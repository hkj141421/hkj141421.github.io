<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>生活随笔</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://hkj141421.github.io/"/>
  <updated>2021-10-22T04:08:09.529Z</updated>
  <id>https://hkj141421.github.io/</id>
  
  <author>
    <name>knight</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>深入理解JAVA虚拟机的高级特性与最佳实践--笔记</title>
    <link href="https://hkj141421.github.io/2021/10/20/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3JAVA%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%9A%84%E9%AB%98%E7%BA%A7%E7%89%B9%E6%80%A7%E4%B8%8E%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5--%E7%AC%94%E8%AE%B0/"/>
    <id>https://hkj141421.github.io/2021/10/20/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3JAVA%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%9A%84%E9%AB%98%E7%BA%A7%E7%89%B9%E6%80%A7%E4%B8%8E%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5--%E7%AC%94%E8%AE%B0/</id>
    <published>2021-10-20T06:33:57.000Z</published>
    <updated>2021-10-22T04:08:09.529Z</updated>
    
    <content type="html"><![CDATA[<h5 id="一、内存自动管理机制："><a href="#一、内存自动管理机制：" class="headerlink" title="一、内存自动管理机制："></a>一、内存自动管理机制：</h5><h6 id="JVM内存分区："><a href="#JVM内存分区：" class="headerlink" title="JVM内存分区："></a>JVM内存分区：</h6><table><thead><tr><th>区域名</th><th>是否共享</th><th>作用</th></tr></thead><tbody><tr><td>程序计数器</td><td>线程私有</td><td>用于存储线程当前执行的程序行号，jvm通过改变行号来选取下一条需要执行的命令</td></tr><tr><td>虚拟机栈</td><td>线程私有</td><td>用于存储方法局部变量表、操作栈帧、动态链接、方法出口等信息，每一个方法被执行的时候都会创建，栈帧的内存空间分配在编译时就完成了</td></tr><tr><td>本地方法栈</td><td>线程私有</td><td>作用与虚拟机栈相似，只是本地方法栈是为jvm调用native方法服务的</td></tr><tr><td>java堆</td><td>线程共享</td><td>用于存放对象实例，也是GC的主要收集区域</td></tr><tr><td>方法区</td><td>线程共享</td><td>用于存放类信息、静态变量等信息，还包含了运行时常量池</td></tr></tbody></table><h6 id="此外还有一部分内存被称为直接内存-这部分空间实际上并不属于jvm管理的内存区域，在jdk1-4之后sun推出了nio，nio基于channel进行读写，它可以通过调用本地方法来直接分配堆外内存，然后通过对象引用内存地址进行操作，可以避免读写时还需要从堆外内存复制到堆内内存，节省了io操作，显著提高性能"><a href="#此外还有一部分内存被称为直接内存-这部分空间实际上并不属于jvm管理的内存区域，在jdk1-4之后sun推出了nio，nio基于channel进行读写，它可以通过调用本地方法来直接分配堆外内存，然后通过对象引用内存地址进行操作，可以避免读写时还需要从堆外内存复制到堆内内存，节省了io操作，显著提高性能" class="headerlink" title="此外还有一部分内存被称为直接内存,这部分空间实际上并不属于jvm管理的内存区域，在jdk1.4之后sun推出了nio，nio基于channel进行读写，它可以通过调用本地方法来直接分配堆外内存，然后通过对象引用内存地址进行操作，可以避免读写时还需要从堆外内存复制到堆内内存，节省了io操作，显著提高性能 |"></a>此外还有一部分内存被称为直接内存,这部分空间实际上并不属于jvm管理的内存区域，在jdk1.4之后sun推出了nio，nio基于channel进行读写，它可以通过调用本地方法来直接分配堆外内存，然后通过对象引用内存地址进行操作，可以避免读写时还需要从堆外内存复制到堆内内存，节省了io操作，显著提高性能 |</h6><h5 id="对象访问的方式"><a href="#对象访问的方式" class="headerlink" title="对象访问的方式:"></a>对象访问的方式:</h5><ol><li><p>句柄访问：采用句柄访问方式时，jvm需要创建一个句柄池，对象引用的是句柄，句柄内存储了对象实例地址和对象类型信息地址，采用这种方式的好处是对象移动时只需要修改句柄的实例地址即可，对象引用则不需要改变。</p></li><li><p>直接指针访问：采用直接指针访问方式时，jvm需要创建一个存放对象类型信息的区域，对象引用中直接包含了实例数据和对象类型信息的地址，直接指针访问的好处是节省了一次指针定位的操作，不需要再根据对象引用中的实例地址查找数据，hotspot就是采用这种方式，它将类型信息存放在方法区。</p></li></ol><h6 id="可回收对象判定算法："><a href="#可回收对象判定算法：" class="headerlink" title="可回收对象判定算法："></a>可回收对象判定算法：</h6><ol><li><p>引用计数法：统计每一个对象的引用次数，每当对象实例被引用时+1，放弃时-1，当计数为0时，则代表该实例可回收，这种算法简单而且高效，但是无法处理对象循环引用的问题</p></li><li><p>根搜索算法：通过一系列GC root的对象做为起点，向下搜索，所走过的路径成为引用链，当一个对象到任意GC root都没有引用时，则该对象可回收。在java中局部变量表中引用的对象、静态变量、常量引用的对象、本地方法引用的对象都可以作为GC root。<br>当对象被标记为可回收后，并不意味着直接就被清除了，jvm会对其进行两次标记，第一次发现对象没有引用链时会对其进行标记并判断其是否覆盖了finalize方法或是否已被jvm调用了finalize方法，如果覆盖了finalize方法且未被自动调用过则将其放入一个队列中等待调用finalize方法，但jvm不保证会等待方法运行完成，防止某个对象的finalize执行缓慢导致程序回收系统崩溃，第二次标记时如果发现对象重新建立引用链则将其移出回收序列</p></li></ol><h6 id="引用类型："><a href="#引用类型：" class="headerlink" title="引用类型："></a>引用类型：</h6><ol><li><p>强引用：该引用是最常见的引用方式，我们平常通过new赋值对象的方式就是一种强引用，这种方式引用的对象，除非我们主动释放引用，否则它会一直存在</p></li><li><p>软引用：该引用可以通过SoftReference来实现，当jvm内存不足时，这种方式引用的对象会被回收</p></li><li><p>弱引用：该引用可以通过WeakReference来实现，这种方式引用的对象只能存活到下一次GC回收前</p></li><li><p>虚引用：该引用可以通过PhantomReference来实现，这种方式引用的对象不会对其生命周期造成任何影响，它的作用仅仅是在GC回收时给予一个系统通知</p></li></ol><h6 id="方法区回收"><a href="#方法区回收" class="headerlink" title="方法区回收"></a>方法区回收</h6><p>方法区又称永久代，因存放类信息等几乎不会被回收的数据而得名。但实际上永久代也会进行回收，只是条件非常苛刻。永久代主要回收两种数据：一、废弃常量，二、无用的类。前者只有当程序中没有任意变量引用该常量且内存不足时才会回收，后者则必须程序中不存在该类的实例，也不存在该类的class实例，无法通过反射访问该类，连加载该类的classloader也不存在时才满足回收条件，而要真正回收还需要-Xnoclassgc参数进行控制</p><h6 id="回收算法"><a href="#回收算法" class="headerlink" title="回收算法"></a>回收算法</h6><ol><li><p>标记-清除算法：先标记出哪些对象可以回收，然后逐个回收空间，缺点：效率低且会产生大量不连续的内存空间，当需要分配大对象时无法找到足够的连续内存空间，会导致提前触发GC回收</p></li><li><p>标记-复制算法：首先将内存空间分为两部分，一部分用于对象实例分配，另一部分保留，先标记出哪些对象可以回收，然后将不可回收的对象全部移动到之前保留的内存空间中，最后将原来用于分配的内存空间全部清除。我们无法保证每次回收时都只要少量对象存活，当出现极端情况时，会出现内存不足的情况，这时我们就会通过担保机制，直接从老年代中分配内存创建对象实例，</p></li><li><p>标记-整理算法：该算法先标记出所以可回收对象，然后将存活对象都移动到一端，最后清除边界外的内存空间。这种方法相比复制算法更适用于对象存活率较高的情况，可以减少对象复制的操作，而且不需要浪费内存空间</p></li><li><p>分代收集算法：该算法根据对象存活周期将内存划分为几个区域，新生代、老年代，然后根据不同的区域采用不同的收集算法。比如新生代的对象经常不可用，则使用复制算法。老年代对象存活率高则使用整理算法或清除算法</p></li></ol><h6 id="垃圾收集器"><a href="#垃圾收集器" class="headerlink" title="垃圾收集器"></a>垃圾收集器</h6><ol><li><p>Serial收集器：这是最基本也是最早的收集器，它是一个单线程的收集器，与其他单线程的收集器相比，它非常简单且高效，但它高效的背后付出的代价则是当收集器回收垃圾时，必须暂停其他所有工作线程，这是令用户难以忍受的一点，随着jdk的版本升级收集器暂停的时间也越来越短，但仍然无法完全消除暂停。当然它也有它的应用场景，对于桌面应用而言，通常分配给虚拟机的内存不会很大，收集几十兆甚至一两百兆内存，时间完全可以控制在几十到100毫秒左右。</p></li><li><p>ParNew收集器：这是Serial收集器的多线程版本，除了具备多线程的特性外，它完全和Serial收集器一样。</p></li><li><p>CMS收集器：这是一款以获得最短停顿时间为目标的收集器，它基于标记-清除算法，收集过程中分为四个阶段，1).初始标记、2).并发标记、3).重新标记、4).并发清除。其中初始标记和重新标记两个阶段需要暂停其他工作线程，但时间非常短暂。由于回收过程中最耗时的并发标记和并发清除阶段不需要暂停其他工作线程，因此总体上可以视为收集线程与用户线程是并发执行的。它也存在一些缺点，1).CPU资源敏感，当CPU资源不足时会挤占用户线程的资源，导致运行速度大幅降低、2).由于是采用标记清除算法，因此会产生许多碎片空间、3).无法处理浮动垃圾，即回收时用户线程仍然在产生新的垃圾，因此需要预留空间给用户线程使用，当预留空间不足时会导致回收失败，直接触发FullGC，JVM会SerialOld收集器进行老年代回收，而这是会使用户线程停顿很长的时间</p></li><li><p>G1收集器：该收集器是一款基于标记-整理算法的收集器，它允许用户精确指定在M时间内停顿时间不得超过N毫秒，G1收集器通过将JAVA堆划分为多个大小固定的内存区域，并跟踪区域内存可用大小，建立一个维护优先列表，每次在允许的时间内回收垃圾最多的区域，这种模式使得G1收集器可以在不降低吞吐量的前提下完成低停顿的内存回收</p></li></ol><h6 id="内存区域管理"><a href="#内存区域管理" class="headerlink" title="内存区域管理"></a>内存区域管理</h6><p>JVM为了更好的回收管理堆内存，将JAVA堆内存划分为新生代、老年代、永久代。</p><ol><li><p>新生代：新生代又被划分为Eden和Survivor区域，大部分新生对象都是在新生代中的Eden进行分配内存的，当这些对象在GC回收中存活下后，就会被转移到Survivor区域，同时计数器+1，每存活一次GC回收计数器都会+1，当达到一定次数后，这些对象就会被移动到老年代。该区域采用标记-复制算法进行回收垃圾。</p></li><li><p>老年代： 进入老年代的对象除了新生代中长时间存活的对象外还有一些新创建的大对象，例如用于读取文件内容的字节数组等</p></li><li><p>永久代：用于存放Class等一些元数据信息，这些数据几乎不可能出现需要回收的情况，因此被称为永久代，在JAVA8中该区域已被元数据区所取代。</p></li></ol><h6 id="JDK命令行工具"><a href="#JDK命令行工具" class="headerlink" title="JDK命令行工具"></a>JDK命令行工具</h6><ol><li><p>jps：用于查看当前虚拟机进程，列出JAVA执行进程的入口类、JVMID等信息</p></li><li><p>jstat：用于监视虚拟机运行状态，查看类装载、内存、垃圾回收等运行数据</p></li><li><p>jinfo：用于实时查看及调整虚拟机运行参数</p></li><li><p>jmap：用于生成堆转储快照</p></li><li><p>jhat：用于分析堆转储快照</p></li><li><p>jstack：用于生成虚拟机当前线程快照，定位线程阻塞的原因</p></li><li><p>jconsole：基于JMX的虚拟机可视化监控管理工具，可以监控虚拟机内存、线程、MBean等信息</p></li></ol><h5 id="二、虚拟机执行子系统"><a href="#二、虚拟机执行子系统" class="headerlink" title="二、虚拟机执行子系统"></a>二、虚拟机执行子系统</h5><p><strong>想想很多程序开发者都听说过JAVA的口号吧“一次编译到处运行“,JAVA之所以敢提出这个口号，是因为JAVA代码并不是直接运行在操作系统上的，而是编译为class文件，运行于虚拟机环境中。也因此JAVA设计者们提出了JAVA虚拟机规范，使得JAVA代码可以运行在任何实现了JAVA虚拟机规范的不同平台不同厂商的虚拟机上从而实现了平台无关性，另外由于虚拟机并不是直接运行JAVA代码而是运行Class文件，使得其它语言也有了运行在JAVA虚拟机上的可能性，使得JAVA虚拟机也拥有了语言无关性</strong></p><h6 id="类文件结构"><a href="#类文件结构" class="headerlink" title="类文件结构"></a>类文件结构</h6><p>class文件是一组以8位字节为基础单位的二进制流，当需要存储超过八位字节的数据时则按照高位在前分割为若干个8位字节存储，中间没有任何分隔符。虚拟机规范规定了class文件采用累计C语言结构体的方式存储，这种结构体只要两种结构，1).无符号数、2).表。无符号数属于基本数据类型，用u1、u2、u4、u8代表1、2、4、8个字节，用于描述数字、索引引用、数量值、或按照UTF8编位字符串值。表由多个无符号数或其他表组成的数据类型。<br>由于class文件没有分隔符，因此它的结构顺序及大小是被严格限定的，下面的表就是class文件的结构顺序</p><table><thead><tr><th>类型</th><th>名称</th><th>数量</th><th>说明</th></tr></thead><tbody><tr><td>u4</td><td>magic</td><td>1</td><td>文件标识符</td></tr><tr><td>u2</td><td>minor_version</td><td>1</td><td>java次版本</td></tr><tr><td>u2</td><td>major_version</td><td>1</td><td>java主版本</td></tr><tr><td>u2</td><td>constant_pool_count</td><td>1</td><td>常量池大小</td></tr><tr><td>cp_info</td><td>constant_pool</td><td>constant_pool_count</td><td>存放常量的常量池</td></tr><tr><td>u2</td><td>access_flag</td><td>1</td><td>class访问标识符</td></tr><tr><td>u2</td><td>this_class</td><td>1</td><td>当前类描述符</td></tr><tr><td>u2</td><td>super_class</td><td>1</td><td>父类描述符</td></tr><tr><td>u2</td><td>interfaces_count</td><td>1</td><td>实现的接口数量</td></tr><tr><td>u2</td><td>interfaces</td><td>interfaces_count</td><td>实现的接口描述符</td></tr><tr><td>u2</td><td>fields_count</td><td>1</td><td>成员变量数量</td></tr><tr><td>field_info</td><td>fields</td><td>fields_count</td><td>成员变量描述符</td></tr><tr><td>u2</td><td>methods_count</td><td>1</td><td>成员方法数量</td></tr><tr><td>method_info</td><td>methods</td><td>methods_count</td><td>成员方法描述符</td></tr><tr><td>u2</td><td>attributes_count</td><td>1</td><td>属性表数量</td></tr><tr><td>attribute_info</td><td>attributes</td><td>attributes_count</td><td>属性表</td></tr></tbody></table><p>注意上面常量池的计数是从1开始的，原因是有些情况下需要表达不引用任何一个常量池项，因此空出0来表达不引用任何常量</p><p>常量池中主要存放两种值：字面量和符号引用。字面量是指字符串及被声明为final的常量值，符号引用则指类和接口的全限定名、字段名称及描述符、方法名称及描述符。常量池中的每一项都是一个表，共有11中不同类型的表，每个表的开始都是一个u1的标识位，代表该项的数据类型，取值为1-12，2被空出</p><p>在JAVA语法中规定了，同一个类不能存在两个相同方法名且参数类型及个数相同仅返回值不同的的方法，但在class文件中却没有这个限制，class结构允许存在方法名及参数个数类型相同但返回值类型不同的方法描述符</p><p>JAVA虚拟机规范中在属性表中预定义了9种可识别的属性：</p><table><thead><tr><th>属性名称</th><th>使用位置</th><th>含义</th></tr></thead><tbody><tr><td>code</td><td>方法表</td><td>java代码编译的字节码指令</td></tr><tr><td>ConstantValue</td><td>字段表</td><td>final定义的常量值</td></tr><tr><td>Deprecated</td><td>类，方法表，字段表</td><td>被声明为Deprecated方法和类</td></tr><tr><td>Exception</td><td>方法表</td><td>方法声明抛出的异常</td></tr><tr><td>InnerClass</td><td>类</td><td>内部类列表</td></tr><tr><td>LineNumberTable</td><td>Code属性</td><td>java源码和字节码的对应关系</td></tr><tr><td>LocalVariableTable</td><td>Code属性</td><td>局部变量描述</td></tr><tr><td>SourceFile</td><td>类文件</td><td>源文件名称</td></tr><tr><td>Synthetic</td><td>类，方法表，字段表</td><td>标识方法或字段是编译器自动生成的</td></tr></tbody></table><h6 id="虚拟机类加载机制"><a href="#虚拟机类加载机制" class="headerlink" title="虚拟机类加载机制"></a>虚拟机类加载机制</h6><p><strong>类加载过程</strong>：</p><p><img src="/" class="lazyload" data-src="/2021/10/20/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3JAVA%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%9A%84%E9%AB%98%E7%BA%A7%E7%89%B9%E6%80%A7%E4%B8%8E%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5--%E7%AC%94%E8%AE%B0/classLoaderProcess.png"  alt></p><p>按照上图所示类的声明周期有七个阶段，其中加载、验证、准备、初始化、卸载五个阶段的开始顺序是确定，而解析阶段则有可能在初始化之后才开始。</p><p>对于加载阶段，虚拟机并没有规定应该声明时候开始触发，但对于初始化阶段，虚拟机有明确规定有以下四种情况，必须进行初始化：</p><ol><li><p>使用new、getstatic、putstatic或invokestatic命令时，如果类没有初始化则必须立刻进行初始化，具体场景为使用new创建对象、读取或设置静态变量(被final修饰的除外，已在编译器将将结果放入常量池的除外)、调用静态方法</p></li><li><p>使用反射时，类未初始化则必须立刻初始化</p></li><li><p>当初始化类时，如果它的父类未初始化则先初始化</p></li><li><p>虚拟机启动时，用户需要指定启动主类即包含main方法的类，虚拟机会先初始化该类</p></li></ol><p>对于以上四种场景虚拟机规范称之为主动引用，除此之外的引用类方式都称为被动引用，都不会触发初始化行为，例如通过子类去调用父类的静态成员，则只会触发父类的初始化</p><p><strong>具体类加载过程</strong></p><ol><li><p>加载阶段：首先根据类全限定名获取二进制流，然后将静态存储结果转换为方法区存储结构，最后生成Class对象作为方法区数据的访问入口，由于虚拟机并没有规定必须从class文件种获取二进制流，因此我们可以自行实现加载器，从zip包，网络或其他渠道获取二进制流。</p></li><li><p>验证阶段：虚拟机规范对该过程的描述十分笼统，仅说明当文件不符合格式时抛出错误，并未具体说明如何检查。因此不同的虚拟机对该过程有不同的实现，但大致可分为：文件格式检查，例如检查魔数，主次版本号等是否符合要求、元数据检查，例如检查类是否有父类，是否继承了不允许继承的类、字节码验证，例如类型转换是否正确、符号引用验证，例如检查通过描述的类全限定名是否能找到对应的类</p></li><li><p>准备阶段：该阶段是对类静态变量分配默认值，但它分配的是通常情况下该类型应有的初始值，例如代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> i = <span class="number">123</span></span><br></pre></td></tr></table></figure><p>以上代码在准备阶段时分配的初始值是0，而不是123，除非该字段被final关键字修饰。</p></li><li><p>解析阶段：虚拟机在该阶段将符号引用替换为直接引用</p></li><li><p>初始化阶段：该阶段是虚拟机加载类的最后一步，虚拟在这个阶段根据用户程序代码为变量进行初始化赋值和执行一些静态代码 ，虚拟机在这里主要是在执行<clinit>方法，该方法是虚拟机收集静态变量赋值及静态代码块合并生成的，代码顺序由其在源码中的顺序决定，当执行子类的<clinit>方法时虚拟机不会调用父类的<clinit>方法，但会保证父类的<clitit>方法在子类之前完成调用。虚拟机能保证<clinit>方法在多线程环境下的线程安全，只会有一个线程去执行，其他线程会被阻塞，因此如果在静态代码块中进行一些耗时操作会导致多个线程被阻塞。</clinit></clitit></clinit></clinit></clinit></p></li></ol><p><strong>类加载器</strong></p><p>在虚拟机中根据类全限定名加载class的动作是在虚拟机外部完成的，通过类加载器进行加载class文件，这也意味着用户可以根据自身需求自行实现类加载器完成类加载动作。<br>类加载器除了起到加载class的作用外，它还和它所加载的class一起确定了当前class的唯一性即当你使用class对象的equal方法或instanceof关键字比较其他类加载器加载的class对象时得到的结果必然是不相等，因为它们不是由同一个类加载器加载的。</p><p>类加载器可以分为三类：</p><ol><li><p>启动类加载器：该类是负责加载JAVA_HOME/lib目录或被启动参数-Xbootclasspath指定的目录中的jar文件，对于HotSpot来说该加载器是通过C++实现的，用户程序无法引用该加载器</p></li><li><p>扩展类加载器：该类负责加载JAVA_HOME/lib/ext目录或java.ext.dirs系统变量所指定的类库，用户程序可以引用该加载器</p></li><li><p>应用程序类加载器：该类负责加载用户classpath路径下的类库，它也是程序中的默认加载器，用户可以通过getSystemClassLoader()方法获得该类加载器，因此也称为系统加载器</p></li></ol><p><strong>双亲加载模型</strong><br>如下图所示，JAVA采用双亲模型进行加载类，即当一个子类加载器接收到一个类加载请求时它会先检查该类是否已加载，如果没有加载则将请求委托给父加载器，如果没有父加载器则默认使用系统加载器去加载，父类加载器又会委托给它的父类加载器，以此类推，直到启动类加载器，当所有的父类加载器加载不了时（该类不在父加载器的加载目录下），子加载器才会尝试自己进行加载。这样做的好处在于保证了同一个类文件在虚拟机内都是同一个class对象<br><img src="/" class="lazyload" data-src="/2021/10/20/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3JAVA%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%9A%84%E9%AB%98%E7%BA%A7%E7%89%B9%E6%80%A7%E4%B8%8E%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5--%E7%AC%94%E8%AE%B0/%E7%B1%BB%E5%8A%A0%E8%BD%BD%E8%BF%87%E7%A8%8B.png"  alt></p><p>双亲模型虽然有保证类不被重复加载的好处，但设计者也并没有强制开发者遵循该模式。事实上双亲模型也会被破坏，这样的行为有三次：</p><ol><li>第一次是在双亲模型出现之前即jdk1.2之前，当时开发者继承classLodaer类之后，都会重写loadClass方法，而双亲模型的实现恰恰实在这个方法中完成的，因此设计者为了兼容开发者以前的自定义类加载器代码不得不做出妥协，在classLoader中添加了新的findClass方法，推荐jdk1.2之后的开发都去重写findClass方法而不是loadClasss方法，这样新的类加载器就符合双亲模型了。</li><li>第二次破坏是由于双亲模型本身的缺陷引起的，双亲模型能很好的解决基础类在虚拟机内的唯一，但是当基础类需要调用用户代码时就会没办法了，例如JNDI服务，它是由启动类加载器加载的，由于需要集中管理资源，它需要调用服务厂商部署在classpath下的服务提供者，但启动类加载器的加载范围不包含classpath，因此也无法认识这些代码。为解决这个问题设计者只能设计一个线程上下文类加载器，该加载器通过Thread类的setContextClassLoader进行设置，如果创建线程时还未设置则从父线程获取，如果父线程也没有，则默认获取应用程序类加载器，这样启动类加载器就可以委托线程上下文类加载器去获取服务提供者的代码了，但这恰恰违背了双亲模型。</li><li>第三次破坏是由于开发者对程序热部署概念的追求导致的，客户总是希望系统能够降低风险，而如果能实现系统不停机更新，无疑对客户有着巨大的吸引力。因此OSGI应运而生，这是一项Java动态化模块化系统规范，它通过自定义类加载器的机制实现了模块热部署，当需要更新模块时就把bundle和对应的类加载器全部丢弃重建，以此实现代码热替换。在OSGI中的类加载模型不再遵从双亲模式，而是以下形式：</li><li>）凡是java包下的类都交给父类加载器进行加载</li><li>）否则将委派名单上的类交给父类加载器加载</li><li>）否则将Import列表的类交给Export这个类的bundle的类加载器加载</li><li>）否则查找类是否在自己FragmentBundle中，如果在则委派给FragmentBundle的类加载器加载</li><li>）否则查找DynamicImport的Bundle,委派给对应的BUndle的类加载器加载</li><li>）否则类查找失败<br>上面的顺序只有1，2是符合双亲委派机制，其余的类查找都是在平级进行的。虽然OSGI破坏了双亲委派模型，但这并不不行的，这种改变无疑带了很大的便利，是一种创新改动。</li></ol><h6 id="虚拟机字节码执行引擎"><a href="#虚拟机字节码执行引擎" class="headerlink" title="虚拟机字节码执行引擎"></a>虚拟机字节码执行引擎</h6><p>虚拟机是相对于于物理机的概念，这两者都具备代码执行能力，不同的是物理机的执行引擎是建立再于本身的处理器、操作系统、硬件、指令集上的，<br>而虚拟机的执行引擎是自己实现的，可以自己定义一些指令集，并且能支持一些不被硬件直接支持的指令集格式。<br>JAVA虚拟机规范制定了虚拟机执行引擎的概念模型，而不同的虚拟机有不同的实现，有的是编译执行，有的是解释执行，还有的是编译和解释执行混用。<br>所谓编译执行就是将字节码一次性编译成本地代码后直接执行本地代码，而解释执行则是解释器解释一句虚拟机执行一句。</p><p><strong>运行时栈帧</strong></p><p>栈帧是用于支持虚拟机进行方法调用的数据结构，虚拟机每调用一个方法就会生成一个方法栈，该方法栈中会包含局部变量表，操作数栈，方法出口等信息，<br>在一个线程中可能会嵌套调用多个方法，但有效的只有当前在栈顶的方法，所以被称为当前栈帧，执行引擎的所有操作也只针对当前栈帧。</p><ol><li><p>局部变量表：该表用于存储方法执行过程中需要的变量，该表以slot的方式存储，虚拟机并没有明确制定slot的长度，但规定了一个slot应当可以存储<br>一个32位的数据类型，64位则采用高位在前的方式以两个slot存储，例如long,double。该表的最大深度在编译期间就已确定，作为max_locals存储在code属<br>性中。局部变量表中的slot是可以复用的，当执行代码超出某个作用域时，这个slot就可以交给其他变量使用，这样既可以节省栈空间又可以及时让GC回收内<br>存。</p></li><li><p>操作数栈：这是一个后入先出的栈结构，主要用于存放JVM执行字节码命令时需要的参数，和局部变量表一样，它也有最大深度max_stacks，同样写在code<br>属性中。栈中的元素可以是任意java数据类型，32位数据类型使用一个slot，64位使用两个slot。</p></li><li><p>动态连接：class文件的常量池中存在大量的符号引用，字节码的方法调用指令就是以这些符号引用为参数，这些符号引用一部分在类加载时转换为直接<br>引用，另一部分在运行时转换为直接引用，这部分就称之为动态连接。</p></li><li><p>方法返回地址：一个方法返回的方式有两种，一、虚拟机遇到任意一个返回类型的返回指令，这种方式称为正常完成出口。二、执行过程出现异常，且异常<br>无法在栈帧的异常表中找到，这种方式称为异常完成出口，这种返回不会给予方法调用者任何返回信息。无论是那种方式退出，JVM都需要将当前栈帧出栈，<br>恢复方法调用者的栈帧，有返回值则将返回值压栈，并将PC计数器指向方法调用者的下一条指令。如果方法是正常返回则会采用PC计数器的值作为返回地址，否则会通过异常处理器表确定</p></li></ol><p><strong>方法调用</strong></p><p>在虚拟机中方法调用不代表方法执行，方法调用仅仅是为了确定需要调用的方法。要完成一个方法的执行，需要经过解析或分派。</p><ol><li><p>解析：在类加载时会又一部分部分符号引用被转化为直接引用，这种解析的前提是目标方法在编译时就确定了，在java中符合要求的只有静态方法和被<br>final修饰的方法，这两种方法都不可能出现继承和重写的情况，因此可以在加载时就转为直接引用。这种方法的调用就称为解析</p></li><li><p>分派：分派又有静态分派和动态分派的区别，静态分派在被调用方法所属对象确定的时候，依赖参数静态类型确定具体分派给哪个方法版本，在某些情况下<br>静态分派也无法确定具体的方法版本，例如参数是一个字面量’a’,此时类中存在多个方法名相同参数不同的方法，编译器首先会寻找char类型的方法，如果找<br>不到则会尝试依次转为int,long,float等数据类型，继续寻找对应的方法版本。而动态分派则依赖被调用方法所属对象的实际类型，当虚拟机调用一个静态类型为父类实际类型为子类时，它会进行以下操作<br>1.）从操作数栈顶确定被调用方法所属对象的实际类型，记为C<br>2.）在该类及其父类，自下而上的查找方法描述符匹配的方法，如果找到则返回引用<br>3.）如果始终未找到合适的方法，则抛出java.lang.AbstractMethodError异常</p><p><strong>基于栈的字节码解释执行引擎</strong></p><p>java执行引擎输出的指令集是一种基于栈的指令集，与之相对的还有一种基于寄存器的指令集，通常来说基于寄存器的指令集会比基于栈的指令集要更快一<br>点，因为它免去很多的出栈入栈的内存访问操作，同时也完成相同的功能也比基于栈的指令集要少很多的指令。但是而直接依赖基于寄存器的指令集的程序也<br>会不可避免的受限于硬件条件。而依赖基于栈的指令集的程序，则可以由虚拟机进行优化获取更好的性能。</p></li></ol><h6 id="程序编译及优化"><a href="#程序编译及优化" class="headerlink" title="程序编译及优化"></a>程序编译及优化</h6><p> <strong>编译器</strong></p><p> java语言的编译期可以分为三类，一、前端编译器将java源码编译为字节码文件。二、后期运行时编译器（JIT编译器）将字节码转为本地机器码。<br> 三、静态提前编译期（AOT编译器）直接将java源码编译为本地机器码。而我们通常说的编译期都是指第一类，以下是三类代表性的编译器</p><ol><li>前端编译器：sun的javac、EclipseJDT的增量式编译器ECJ</li><li>JIT编译器：hotspot虚拟机的C1、C2编译器</li><li>AOT编译器：GNU Compiler for the java (GCJ)、Excelsior JET</li></ol><p> <strong>插入式注解处理器</strong></p><p> 在JDK1.6中Java语言提供了一组插入式注解处理器的标准API，开发者可以通过这些API干扰编译期的行为，实现在编译期间修改语法树，而一旦修改代码，<br> 编译器就会重新进行解析和符号引用填充处理，直到所有插入式注解处理器运行完成。这种特性可以帮助我们完成很多原本只能编程实现的代码，我们常<br> 用的lomback就是利用插入式注解处理器完成，我们也可以自己实现一个插入式注解对类，方法，字段的命名风格进行检查。</p><p> <strong>泛型与类型擦除</strong></p><p> 泛型式JDK1.5提出的新特性，它的本质式参数化类型，即类型也可以作为一个参数传递。在C#和JAVA都存在泛型，但两者的实现却完全不同，C#的泛型无论<br> 是在源码中、编译后的文件还是运行期都是切实存在，List<int>和List<String>就是不同的类型，它们有自己的虚方法表和类型数据，这种实现方式称为<br> 类型膨胀，也称为真泛型。而JAVA的泛型只存在于源码中，它实际上是JAVA的语法糖，当它被编译时就会被替换上强制类型转换，因此对于运行期的虚拟机<br> 来说List<int>和List<String>就是同一个类型，这种方式被称为类型擦除，也称为伪泛型。<br>  JAVA的使用类型擦除实现泛型的方式，也带来了一些方法重载的识别问题，例如当有两个返回值类型一致且方法名相同参数个数相同，仅参数泛型类型不同<br> 的方法是否可以编译，由于JAVA对泛型的实现本质上是进行类型擦除，所有例子中的两个方法是无法编译成功的因为它们的方法签名完全相同。<br> 但如果我们将它们的方法返回值改为int和String呢？这时我们会发现程序竟然可以编译并执行成功。这是为什么呢,因为虽然JAVA重载不会区分返回值类型，<br> 但是class文件是允许两个方法签名相同但返回值类型不同的方法同时存在的，调用时由于存在方法的泛型类型不同可以可以通过类型推断出需要调用的方<br> 法版本，因此这个例子的代码才能编译运行。<br> 虽然编译时JAVA会擦除泛型，但实际仅仅只是擦除了code属性字节码中的泛型信息，我们还是可以通过反射在元数据中获取到泛型类型。</String></int></String></int></p><p> <strong>运行期优化</strong></p><p> 在一些商用虚拟机中，字节码运行最初依靠解释执行，随着运行时间的推移，会检测出某些代码为热点代码，通过即时编译器将这些代码编译为本地机器码，<br> 并进行各种优化，以达到更好的运行效果。虚拟机并没有对即时编译器的规范，但依靠即时编译器的好坏却是虚拟机的优秀与否的最关键的指标之一。</p><p> <strong>编译器与解释器</strong></p><p> 大部分虚拟机都是采用解释器与编译器混合执行的模式，当程序启动时采用解释器执行可以更快的启动，减少编译时间，随着运行时间增长编译器开时将热点<br> 代码编译为本地机器码获取更好的性能。但内存空间受限时采用解释器执行减少占用空间，反之采用编译器执行提升效率。编译器编译优化代码时可能会采用<br> 一些激进的优化方法导致程序出现问题，此时可以通过逆优化方式回退到解释器执行继续运行，所以编译器和解释器通常时相辅相成的。<br> HotSpot虚拟机提供两个编译器 Client Compiler、Serve Compiler也称为C1、C2编译器，虚拟机运行默认采用一个编译器和一个解释器一起执行。具体是<br> 哪个编译器由虚拟机根据硬件及自身版本决定，开发者也可以通过启动参数自行决定。<br> 由于即时编译器优化代码需要占用程序运行时间，越好的优化时间越长，同时也需要收集更多程序运行信息。JDK采用了分层编译的策略：</p><ol><li>第0层：完全由解释器执行，解释器不开启性能监控功能，可触发第一层</li><li>第1层：也称为C1编译，将字节码转为本地机器码，并使用简单可靠的优化，如有必要开启性能监控</li><li>第2层：也称为C2编译，将字节码转为本地机器码，并采用一些编译耗时较长的优化，甚至根据监控信息采用一些激进的不可靠的优化手段<br>采用分层编译后，C1和C2编译器会同时运行。</li></ol><p> <strong>编译对象及触发条件</strong></p><p> 能触发即时编译器编译的代码分为两类：一、 多次执行的方法。二、 多次执行的循环体 对于第一种情况即时编译器会直接将整个方法编译为本地机器码，<br> 而对于第二种情况即时编译器尽管是由循环体触发的但仍会编译整个方法，这种编译情况称为栈上替换。<br> 那么虚拟是怎么判断方法代码被多次执行的呢，目前有两种技术：</p><ol><li>基于采样的热点探测：虚拟机会周期性检查各个线程的栈顶，如果发现某个方法经常出现在栈顶，则这个方法就是热点方法，这种方式实现简单高<br>效，但难以确定具体热度，也容易受到线程阻塞等原因扰乱热点探测。</li><li>基于计数器的热点探测：虚拟机为每个方法甚至代码块建立计数器，统计调用次数，如果超过一定次数则是热点方法，这种方法实现较为复杂，但更加<br>精确严谨。<br>HotSpot虚拟机就是采用第二种方式，它有方法调用计数器和回边调用计数器分别统计方法和循环体的调用次数。</li></ol><p> <strong>编译优化</strong></p><p> 即时编译器的优化技术主要有：<br> <img src="/" class="lazyload" data-src="/2021/10/20/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3JAVA%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%9A%84%E9%AB%98%E7%BA%A7%E7%89%B9%E6%80%A7%E4%B8%8E%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5--%E7%AC%94%E8%AE%B0/%E5%8D%B3%E6%97%B6%E7%BC%96%E8%AF%91%E5%99%A8%E4%BC%98%E5%8C%96%E6%8A%80%E6%9C%AF1.png"  alt><br> <img src="/" class="lazyload" data-src="/2021/10/20/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3JAVA%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%9A%84%E9%AB%98%E7%BA%A7%E7%89%B9%E6%80%A7%E4%B8%8E%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5--%E7%AC%94%E8%AE%B0/%E5%8D%B3%E6%97%B6%E7%BC%96%E8%AF%91%E5%99%A8%E4%BC%98%E5%8C%96%E6%8A%80%E6%9C%AF2.png"  alt><br> <img src="/" class="lazyload" data-src="/2021/10/20/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3JAVA%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%9A%84%E9%AB%98%E7%BA%A7%E7%89%B9%E6%80%A7%E4%B8%8E%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5--%E7%AC%94%E8%AE%B0/%E5%8D%B3%E6%97%B6%E7%BC%96%E8%AF%91%E5%99%A8%E4%BC%98%E5%8C%96%E6%8A%80%E6%9C%AF3.png"  alt><br> <img src="/" class="lazyload" data-src="/2021/10/20/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3JAVA%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%9A%84%E9%AB%98%E7%BA%A7%E7%89%B9%E6%80%A7%E4%B8%8E%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5--%E7%AC%94%E8%AE%B0/%E5%8D%B3%E6%97%B6%E7%BC%96%E8%AF%91%E5%99%A8%E4%BC%98%E5%8C%96%E6%8A%80%E6%9C%AF4.png"  alt></p><h6 id="JAVA内存模型与线程"><a href="#JAVA内存模型与线程" class="headerlink" title="JAVA内存模型与线程"></a>JAVA内存模型与线程</h6><p> <strong>内存模型</strong></p><p> 内存模型的目的定义应用程序对变量的访问规则即如何从内存中读取设置变量，此处指变量不包含局部变量和方法参数，因为它们是线程私有的不存在线程<br> 安全问题。内存模型规定了所有的变量都应该存放在主内存中，而各个线程各自都有工作内存，工作内存保存了主内存变量的拷贝，线程对变量所有的操作都<br> 是在工作内存中进行的，各个线程也不能直接访问其他线程的工作内存，线程中的变量交换完全依靠主内存进行。</p><p> <strong>内存交互</strong></p><p> 关于如何将从主内存读取变量到工作内存及向主内存写入变量的操作，内存模型规定了8种操作：</p><ol><li><p>LOCK：将主内存中的变量锁定，设置为线程独占状态。</p></li><li><p>UNLOCK: 将主内存中已被锁定的变量解锁。</p></li><li><p>READ: 将主内存的变量读取至工作内存,以便后面的LOAD操作使用。</p></li><li><p>LOAD: 作用于工作内存的变量，将READ操作获取到的值放入工作内存的变量副本。</p></li><li><p>USE: 作用于工作内存的变量，将工作内存的值传给执行引擎，当虚拟机需要使用变量值时就会执行该操作。</p></li><li><p>ASSIGN：作用于工作内存的变量，将执行引擎接收的值赋给工作内存的变量副本，当虚拟机需要进行给变量赋值时就会执行该操作。</p></li><li><p>STORE: 作用于工作内存的变量，它将工作内存的变量值同步到主内存中，供后面的WRITE操作使用。</p></li><li><p>WRITE：作用于主内存的变量，它将STORE操作获取的值放入主内存变量中。</p><p>内存模型规定了READ和LOAD操作及STORE和WRITE操作必须顺序执行，但不要求连续执行。同时内存模型还有8个原则：</p></li><li><p>不允许READ、WRITE、STORE、LOAD操作单独出现，即不能工作内存读主内存但不接收值或工作内存写了值但主内存不接收。</p></li><li><p>不允许线程丢弃它最近的ASSIGN操作，即不能变量在工作内存值改变了但不同步到主内存。</p></li><li><p>不允许线程在变量没有发送改变的情况下同步数据到主内存。</p></li><li><p>一个新的变量只能在主内存中诞生，即对一个变量操作前必须先执行过ASSIGN和LOAD操作。</p></li><li><p>一个变量同一时刻只能被一个线程LOCK，但同一个线程可以进行多次LOCK，之后需要相同次数的UNLOCK解锁</p></li><li><p>如果对一个变量进行LOCK,则会清空工作内存该变量的副本，之后使用前需要进行ASSIGN或LOAD操作重新初始化变量值</p></li><li><p>对一个变量进行UNLOCK操作的前提时改变量已被LOCK</p></li><li><p>对一个变量进行UNLOCK前必须先将工作内存的变量副本同步到主内存</p></li></ol><p> <strong>volatile关键字</strong></p><p> 被volatile关键字修饰过的变量可以保证更改对所有的线程都是立即可见的，因为执行引擎使用都会先刷新主内存的值到工作内存中。但是它并发是线程安全<br> 的，例如a++操作，该操作编译为字节码后会被分解为两个操作，第一个操作获取主内存的变量a的值，然后压入操作数栈，最后进行+1，这个操作在多线程环<br> 境下执行到+1操作时就可能出现问题，因为你无法保证此时栈顶的值是不是还等于主内存变量a的值，其他线程可能在这时已进行完了+1操作，操作数栈的值<br> 已过期了。因此在不符合以下场景时我们仍需进行加锁保证线程安全：</p><ol><li>运算不依赖自身的值或只有单个线程进行更新</li><li>运算不依赖其他状态变量<br>当场景为通过true或false等常量值进行控制多线程状态时，则可以很好的发挥volatile关键字的作用。<br>volatile关键字还有第二个作用即禁止指令重排序，编译器为了优化程序提高性能，可能会对重写排列指令顺序，而这可能会对我们的代码逻辑造成影响。</li></ol><p> <strong>long和double的非原子性协定</strong></p><p> 虚拟机规范要求lock，unlock等8种内存模型操作必须具备原子性，但允许对64位的数据类型不实现原子性，不过基本上主流虚拟机都选择了实现64位数据类<br> 型的原子性。</p><p> <strong>并发的三个特性</strong></p><ol><li>原子性：内存模型的8种内存访问交互操作都是原子性的，如果需要更大范围的原子性可以通过synchronized关键字完成。</li><li>可见性：内存模型提供了volatile关键字保证了可见性，同时使用synchronized关键字也能保证可见性</li><li>有序性：JAVA天然就具备有序性，它的有序性可总结为一句话：”从本线程观察，一切操作都是有序的，从其他线程观察本线程，一切操作都是无序的”，<br>这句话前半句是指线程内表现为串行，后半句是指指令重排序和工作内存与主内存同步延迟现象。JAVA提供了synchronized关键字可以保证有序性，而<br>volatile关键字可以禁止指令重排序也能保证有序性。所谓线程内表现为串行是指：普通变量仅仅保证在执行过程种所有依赖该变量的地方都能正确获取到<br>值，但并不保证执行顺序与代码顺序一致，这一点是无法在线程内感知到的</li></ol><p> <strong>先行发生原则</strong></p><p> 在编码过程中我们并不总需要通过加锁的方式保证线程安全，如果代码符合先行发生原则即操作A发生在操作B之前，操作A的结果可以被操作B观察到<br> ，则不会存在线程安全问题。以下是一些JAVA内存模型下天然存在的先行发生关系：</p><ol><li>程序次序关系：在一个线程内，按照代码控制流的顺序，写在前面的代码必然发生在写在后面的代码的前面。</li><li>管理锁定关系：一个UNLOCK操作必然发生在后面对同一个锁的LOCK操作之前，这里的后面是指时间上的先后。</li><li>volatile变量规则：对一个volatile变量的写操作发生在后面对这个变量读操作的前面，这里的后面是指时间上的先后。</li><li>线程启动规则：线程的start方法发生于该线程的所有操作之前。</li><li>线程终止规则：线程的所有操作发生于对此线程的检测之前。</li><li>线程中断规则：对线程的interrupt方法的调用先行发生于被中断线程代码检测到中断事件的发生。</li><li>对象终结规则：一个对象的初始化完成先行发生于该对象的finalize方法之前。</li><li>传递性：如果操作A发生于操作B之前，操作B发生于操作C之前，则操作A必然发生于操作C之前。</li></ol><p> <strong>线程的实现</strong></p><p> 线程是比进程更小的执行单元，线程相比进程的优势在于多线程之间可以共享IO、CPU、内存等资源，又可以独立调用。线程的实现通常需要操作系统的支持，目前操作系统基本都支持线程，而线程的具体实现有三种方式：</p><ol><li><p>内核线程：内核进程是直接有系统内核支持的一种线程，这种线程由内核完成线程切换，内核通过调度器将线程分配到不同的处理器运行，这种支持多线<br>程的内核被称为多线程内核，但程序通常不会直接使用内核线程而是用它提供的一种轻量级进程，这也是我们通常多说的线程，每一个轻量级进程都需要一<br>个内核进程支持，由于内核线程的支持每个轻量级进程都是对立的执行单元，即时阻塞了也不影响内核线程，但也由于是基于内核线程实现，因此创建，<br>析构都会需要在用户态和内核态进行切换，代价较大，同时轻量级进程也会消耗内核资源，因此系统支持的轻量级进程是有限的。</p></li><li><p>用户线程：通常意义的用户线程是指完全建立在用户态的线程，它的创建，析构，同步都不依赖内核态，因此操作会更快速且低耗，但是没有内核态的支<br>持，也意味着所有操作都需要用户程序来实现，线程的创建，调度，切换都是需要考虑的问题，而由于操作系统只将资源分配到进程，线程如何解决堵塞，如<br>何映射到其他处理器等问题都很难解决。因此目前java、ruby等语言都放弃了用户线程。</p></li><li><p>混合实现：除了内核线程和用户线程各自独立实现外，还可以将两者结合，用户线程支持大量的并发，而内核线程作为用户线程和内核态的桥梁映射处理<br>器，分配资源等，用户线程和内核线程的比例关系不等，是M:N的线程模型关系。</p></li></ol><p> <strong>线程调度</strong></p><p> 线程调度可分为协同式和抢占式，协同式调度：线程的执行时间由线程自行决定，当它执行完后通知系统让出执行时间，但是如果线程堵塞的话可能造成整个<br> 系统都直接崩溃了。抢占式：线程的执行时间由系统决定，但是线程可以让出自己的执行时间，如果我们想让系统给某个系统多分配一些执行时间，可以设置<br> 优先级，但是并不一定就会拿到更多的执行时间。</p><p> <strong>线程状态</strong></p><ol><li>新建：创建但尚未启动的线程状态</li><li>运行：已启动的线程，可能正在运行，也可能在等待分配执行时间</li><li>等待：该状态可分为无限期等待和限期等待，无限期等待指线程挂起直到被其他线程唤醒，限期等待指线程挂起一段时间后就会被系统唤醒</li><li>阻塞：线程在等待获取排他锁的状态</li><li>死亡：线程完成执行任务，开始销毁资源</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h5 id=&quot;一、内存自动管理机制：&quot;&gt;&lt;a href=&quot;#一、内存自动管理机制：&quot; class=&quot;headerlink&quot; title=&quot;一、内存自动管理机制：&quot;&gt;&lt;/a&gt;一、内存自动管理机制：&lt;/h5&gt;&lt;h6 id=&quot;JVM内存分区：&quot;&gt;&lt;a href=&quot;#JVM内存分区：&quot;
      
    
    </summary>
    
    
    
      <category term="JVM" scheme="https://hkj141421.github.io/tags/JVM/"/>
    
  </entry>
  
  <entry>
    <title>springboot1.x部署weblogic10的过程</title>
    <link href="https://hkj141421.github.io/2021/08/12/springboot1-x%E9%83%A8%E7%BD%B2weblogic10%E7%9A%84%E8%BF%87%E7%A8%8B/"/>
    <id>https://hkj141421.github.io/2021/08/12/springboot1-x%E9%83%A8%E7%BD%B2weblogic10%E7%9A%84%E8%BF%87%E7%A8%8B/</id>
    <published>2021-08-12T05:48:20.000Z</published>
    <updated>2021-08-18T03:52:20.692Z</updated>
    
    <content type="html"><![CDATA[<h6 id="最近由于客户的一些需求需要在weblogic10服务器下发布一个war包应用，本以为是一个简单轻松的过程，但是没想到因为jdk版本太低是1-6的以及没有weblogic服务器的部署经验等种种原因整个过程相当坎坷。"><a href="#最近由于客户的一些需求需要在weblogic10服务器下发布一个war包应用，本以为是一个简单轻松的过程，但是没想到因为jdk版本太低是1-6的以及没有weblogic服务器的部署经验等种种原因整个过程相当坎坷。" class="headerlink" title="最近由于客户的一些需求需要在weblogic10服务器下发布一个war包应用，本以为是一个简单轻松的过程，但是没想到因为jdk版本太低是1.6的以及没有weblogic服务器的部署经验等种种原因整个过程相当坎坷。"></a>最近由于客户的一些需求需要在weblogic10服务器下发布一个war包应用，本以为是一个简单轻松的过程，但是没想到因为jdk版本太低是1.6的以及没有weblogic服务器的部署经验等种种原因整个过程相当坎坷。</h6><h6 id="下面贴出war包使用的pom文件"><a href="#下面贴出war包使用的pom文件" class="headerlink" title="下面贴出war包使用的pom文件"></a>下面贴出war包使用的pom文件</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;project xmlns&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0&quot; xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;</span><br><span class="line">  xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0 http:&#x2F;&#x2F;maven.apache.org&#x2F;xsd&#x2F;maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">  &lt;modelVersion&gt;4.0.0&lt;&#x2F;modelVersion&gt;</span><br><span class="line"></span><br><span class="line">  &lt;groupId&gt;com.definesys&lt;&#x2F;groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;BydApp&lt;&#x2F;artifactId&gt;</span><br><span class="line">  &lt;version&gt;1.0-SNAPSHOT&lt;&#x2F;version&gt;</span><br><span class="line">&lt;!--  指定打包方式--&gt;</span><br><span class="line">  &lt;packaging&gt;war&lt;&#x2F;packaging&gt;</span><br><span class="line"></span><br><span class="line">  &lt;name&gt;BydApp&lt;&#x2F;name&gt;</span><br><span class="line">  &lt;!-- FIXME change it to the project&#39;s website --&gt;</span><br><span class="line">  &lt;url&gt;http:&#x2F;&#x2F;www.example.com&lt;&#x2F;url&gt;</span><br><span class="line"></span><br><span class="line">  &lt;properties&gt;</span><br><span class="line">    &lt;project.build.sourceEncoding&gt;UTF-8&lt;&#x2F;project.build.sourceEncoding&gt;</span><br><span class="line">    &lt;maven.compiler.source&gt;1.6&lt;&#x2F;maven.compiler.source&gt;</span><br><span class="line">    &lt;maven.compiler.target&gt;1.6&lt;&#x2F;maven.compiler.target&gt;</span><br><span class="line">    &lt;tomcat.version&gt;7.0.59&lt;&#x2F;tomcat.version&gt;</span><br><span class="line">&lt;!--    &lt;jackson.version&gt;2.0.0&lt;&#x2F;jackson.version&gt;--&gt;</span><br><span class="line">  &lt;&#x2F;properties&gt;</span><br><span class="line"></span><br><span class="line">  &lt;!-- https:&#x2F;&#x2F;mvnrepository.com&#x2F;artifact&#x2F;org.springframework.boot&#x2F;spring-boot-starter-parent --&gt;</span><br><span class="line">  &lt;parent&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-parent&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.5.22.RELEASE&lt;&#x2F;version&gt;</span><br><span class="line">  &lt;&#x2F;parent&gt;</span><br><span class="line"></span><br><span class="line">  &lt;dependencies&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;junit&lt;&#x2F;groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;junit&lt;&#x2F;artifactId&gt;</span><br><span class="line">      &lt;version&gt;4.11&lt;&#x2F;version&gt;</span><br><span class="line">      &lt;scope&gt;test&lt;&#x2F;scope&gt;</span><br><span class="line">    &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- https:&#x2F;&#x2F;mvnrepository.com&#x2F;artifact&#x2F;org.springframework.boot&#x2F;spring-boot-starter-web --&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;spring-boot-starter-web&lt;&#x2F;artifactId&gt;</span><br><span class="line">      &lt;exclusions&gt;</span><br><span class="line">        &lt;!--不知道为啥这个包用不了，不能添加json格式的http消息转换器MappingJackson2HttpMessageConverter --&gt;</span><br><span class="line">        &lt;exclusion&gt;</span><br><span class="line">          &lt;groupId&gt;com.fasterxml.jackson.core&lt;&#x2F;groupId&gt;</span><br><span class="line">          &lt;artifactId&gt;jackson-databind&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;&#x2F;exclusion&gt;</span><br><span class="line">         &lt;!--由于需要打成war发布到weblogic运行，因此需要排除tomcat--&gt;</span><br><span class="line">        &lt;exclusion&gt;</span><br><span class="line">          &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">          &lt;artifactId&gt;spring-boot-starter-tomcat&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;&#x2F;exclusion&gt;</span><br><span class="line">      &lt;&#x2F;exclusions&gt;</span><br><span class="line">    &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- https:&#x2F;&#x2F;mvnrepository.com&#x2F;artifact&#x2F;org.mybatis&#x2F;mybatis --&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.mybatis&lt;&#x2F;groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;mybatis&lt;&#x2F;artifactId&gt;</span><br><span class="line">      &lt;version&gt;3.3.0&lt;&#x2F;version&gt;</span><br><span class="line">    &lt;&#x2F;dependency&gt;</span><br><span class="line">&lt;!--mybatis与springboot的集成配置包--&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.mybatis&lt;&#x2F;groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;mybatis-spring&lt;&#x2F;artifactId&gt;</span><br><span class="line">      &lt;version&gt;1.3.0&lt;&#x2F;version&gt;</span><br><span class="line">    &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;spring-boot-starter-jdbc&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- https:&#x2F;&#x2F;mvnrepository.com&#x2F;artifact&#x2F;org.jboss.spec.javax.transaction&#x2F;jboss-transaction-api_1.2_spec --&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.jboss.spec.javax.transaction&lt;&#x2F;groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;jboss-transaction-api_1.2_spec&lt;&#x2F;artifactId&gt;</span><br><span class="line">      &lt;version&gt;1.0.0.Final&lt;&#x2F;version&gt;</span><br><span class="line">    &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- https:&#x2F;&#x2F;mvnrepository.com&#x2F;artifact&#x2F;com.oracle&#x2F;ojdbc14 --&gt;</span><br><span class="line">&lt;!--    仅用于本地测试--&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;com.oracle&lt;&#x2F;groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;ojdbc14&lt;&#x2F;artifactId&gt;</span><br><span class="line">      &lt;version&gt;11.2.0.3.0&lt;&#x2F;version&gt;</span><br><span class="line">      &lt;systemPath&gt;$&#123;project.basedir&#125;&#x2F;lib&#x2F;ojdbc6.jar&lt;&#x2F;systemPath&gt;</span><br><span class="line">      &lt;scope&gt;system&lt;&#x2F;scope&gt;</span><br><span class="line">    &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- https:&#x2F;&#x2F;mvnrepository.com&#x2F;artifact&#x2F;org.springframework.boot&#x2F;spring-boot-starter-thymeleaf --&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;spring-boot-starter-thymeleaf&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;&#x2F;dependency&gt;</span><br><span class="line">    &lt;!--    仅用于本地测试--&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;spring-boot-starter-tomcat&lt;&#x2F;artifactId&gt;</span><br><span class="line">      &lt;!--打包的时候可以不用包进去，别的设施会提供。事实上该依赖理论上可以参与编译，测试，运行等周期。</span><br><span class="line">        相当于compile，但是打包阶段做了exclude操作--&gt;</span><br><span class="line">      &lt;scope&gt;provided&lt;&#x2F;scope&gt;</span><br><span class="line">      &lt;exclusions&gt;</span><br><span class="line">      &lt;&#x2F;exclusions&gt;</span><br><span class="line">    &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;spring-boot-legacy&lt;&#x2F;artifactId&gt;</span><br><span class="line">      &lt;version&gt;1.1.0.RELEASE&lt;&#x2F;version&gt;</span><br><span class="line">      &lt;exclusions&gt;</span><br><span class="line">        &lt;exclusion&gt;</span><br><span class="line">          &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">          &lt;artifactId&gt;spring-boot-starter-log4j2&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;&#x2F;exclusion&gt;</span><br><span class="line">      &lt;&#x2F;exclusions&gt;</span><br><span class="line">    &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;javax.servlet&lt;&#x2F;groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;servlet-api&lt;&#x2F;artifactId&gt;</span><br><span class="line">      &lt;version&gt;2.5&lt;&#x2F;version&gt;</span><br><span class="line">    &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.apache.tomcat.embed&lt;&#x2F;groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;tomcat-embed-logging-juli&lt;&#x2F;artifactId&gt;</span><br><span class="line">      &lt;version&gt;7.0.59&lt;&#x2F;version&gt;</span><br><span class="line">      &lt;scope&gt;provided&lt;&#x2F;scope&gt;</span><br><span class="line">    &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;com.fasterxml.jackson.core&lt;&#x2F;groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;jackson-databind&lt;&#x2F;artifactId&gt;</span><br><span class="line">      &lt;version&gt;2.5.5&lt;&#x2F;version&gt;</span><br><span class="line">    &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">  &lt;&#x2F;dependencies&gt;</span><br><span class="line"></span><br><span class="line">  &lt;build&gt;</span><br><span class="line">&lt;!--    指定打包名称--&gt;</span><br><span class="line">    &lt;finalName&gt;bydapp&lt;&#x2F;finalName&gt;</span><br><span class="line"></span><br><span class="line">    &lt;plugins&gt;</span><br><span class="line">      &lt;plugin&gt;</span><br><span class="line">        &lt;groupId&gt;org.apache.maven.plugins&lt;&#x2F;groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;maven-war-plugin&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;version&gt;2.6&lt;&#x2F;version&gt;</span><br><span class="line">        &lt;configuration&gt;</span><br><span class="line">&lt;!--          指定打包时将static目录下的文件放到war包根目录下--&gt;</span><br><span class="line">          &lt;webResources&gt;</span><br><span class="line">            &lt;resource&gt;</span><br><span class="line">              &lt;directory&gt;src&#x2F;main&#x2F;resources&#x2F;static&lt;&#x2F;directory&gt;</span><br><span class="line">              &lt;targetPath&gt;&#x2F;&lt;&#x2F;targetPath&gt;</span><br><span class="line">            &lt;&#x2F;resource&gt;</span><br><span class="line">            &lt;resource&gt;</span><br><span class="line">              &lt;directory&gt;src&#x2F;main&#x2F;resources&lt;&#x2F;directory&gt;</span><br><span class="line">              &lt;filtering&gt;true&lt;&#x2F;filtering&gt;</span><br><span class="line">              &lt;includes&gt;</span><br><span class="line">                &lt;include&gt;*.properties&lt;&#x2F;include&gt;</span><br><span class="line">              &lt;&#x2F;includes&gt;</span><br><span class="line">            &lt;&#x2F;resource&gt;</span><br><span class="line">          &lt;&#x2F;webResources&gt;</span><br><span class="line">        &lt;&#x2F;configuration&gt;</span><br><span class="line">      &lt;&#x2F;plugin&gt;</span><br><span class="line">    &lt;&#x2F;plugins&gt;</span><br><span class="line"></span><br><span class="line">    &lt;resources&gt;</span><br><span class="line">      &lt;resource&gt;</span><br><span class="line">        &lt;directory&gt;src&#x2F;main&#x2F;resources&lt;&#x2F;directory&gt;</span><br><span class="line">        &lt;!--      替换properties文件中的@变量--&gt;</span><br><span class="line">        &lt;filtering&gt;true&lt;&#x2F;filtering&gt;</span><br><span class="line">        &lt;includes&gt;</span><br><span class="line">          &lt;include&gt;*.properties&lt;&#x2F;include&gt;</span><br><span class="line">        &lt;&#x2F;includes&gt;</span><br><span class="line">      &lt;&#x2F;resource&gt;</span><br><span class="line">&lt;!--      编译打包资源目录下的所有文件--&gt;</span><br><span class="line">      &lt;resource&gt;</span><br><span class="line">        &lt;directory&gt;src&#x2F;main&#x2F;resources&lt;&#x2F;directory&gt;</span><br><span class="line">        &lt;includes&gt;</span><br><span class="line">          &lt;include&gt;**&#x2F;*&lt;&#x2F;include&gt;</span><br><span class="line">        &lt;&#x2F;includes&gt;</span><br><span class="line">      &lt;&#x2F;resource&gt;</span><br><span class="line">&lt;!--      编译打包mapper文件--&gt;</span><br><span class="line">      &lt;resource&gt;</span><br><span class="line">        &lt;directory&gt;src&#x2F;main&#x2F;java&lt;&#x2F;directory&gt;</span><br><span class="line">        &lt;includes&gt;</span><br><span class="line">          &lt;include&gt;**&#x2F;*.xml&lt;&#x2F;include&gt;</span><br><span class="line">        &lt;&#x2F;includes&gt;</span><br><span class="line">      &lt;&#x2F;resource&gt;</span><br><span class="line">    &lt;&#x2F;resources&gt;</span><br><span class="line">  &lt;&#x2F;build&gt;</span><br><span class="line">&lt;&#x2F;project&gt;</span><br></pre></td></tr></table></figure><p>由于我们最终运行时需要打成war包，因此我们要从spring-boot-starter-web中排除tomcat的依赖，另外自行引用tomcat的依赖包并指明不打包到最终war包中。</p><h4 id="第一步：实现springboot容器监听类"><a href="#第一步：实现springboot容器监听类" class="headerlink" title="第一步：实现springboot容器监听类"></a>第一步：实现springboot容器监听类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.builder.SpringApplicationBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.web.support.SpringBootServletInitializer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.WebApplicationInitializer;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppStarter</span> <span class="keyword">extends</span> <span class="title">SpringBootServletInitializer</span> <span class="keyword">implements</span> <span class="title">WebApplicationInitializer</span>  </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        SpringApplication.run(AppStarter<span class="class">.<span class="keyword">class</span>,<span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> SpringApplicationBuilder <span class="title">configure</span><span class="params">(SpringApplicationBuilder builder)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> builder.sources(AppStarter<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为了使springboot程序能够作为war包运行，我们必须继承SpringBootServletInitializer类，还必须直接实现WebApplicationInitializer。</p><h4 id="第二步：构建web-xml"><a href="#第二步：构建web-xml" class="headerlink" title="第二步：构建web.xml"></a>第二步：构建web.xml</h4><p>web.xml文件是web程序部署描述文件，我们可以在这个文件里设置容器的上下文参数、启动监听器、servlet、过滤器、容器资源引用等信息。</p><p>以下是该应用的web.xml配置信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;&lt;web-app        version&#x3D;&quot;2.4&quot;        </span><br><span class="line">xmlns&#x3D;&quot;http:&#x2F;&#x2F;java.sun.com&#x2F;xml&#x2F;ns&#x2F;j2ee&quot;        </span><br><span class="line">xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;        </span><br><span class="line">xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;java.sun.com&#x2F;xml&#x2F;ns&#x2F;j2ee                        </span><br><span class="line">http:&#x2F;&#x2F;java.sun.com&#x2F;xml&#x2F;ns&#x2F;j2ee&#x2F;web-app_2_4.xsd&quot;&gt;</span><br><span class="line">&lt;!--    启动类所在包路径--&gt;    </span><br><span class="line">&lt;context-param&gt;        </span><br><span class="line">&lt;param-name&gt;contextConfigLocation&lt;&#x2F;param-name&gt;        </span><br><span class="line">&lt;param-value&gt;com.definesys&lt;&#x2F;param-value&gt;    </span><br><span class="line">&lt;&#x2F;context-param&gt;</span><br><span class="line">&lt;!--    springBoot容器监听类--&gt;    </span><br><span class="line">&lt;listener&gt;        </span><br><span class="line">&lt;listener-class&gt;org.springframework.boot.legacy.context.web.SpringBootContextLoaderListener&lt;&#x2F;listener-class&gt;    </span><br><span class="line">&lt;&#x2F;listener&gt;</span><br><span class="line">&lt;!--    配置springmvc的DispatcherServlet--&gt;    </span><br><span class="line">&lt;servlet&gt;        </span><br><span class="line">&lt;servlet-name&gt;appServlet&lt;&#x2F;servlet-name&gt;        </span><br><span class="line">&lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;&#x2F;servlet-class&gt;        </span><br><span class="line">&lt;init-param&gt;            </span><br><span class="line">&lt;param-name&gt;contextAttribute&lt;&#x2F;param-name&gt;            </span><br><span class="line">&lt;param-value&gt;org.springframework.web.context.WebApplicationContext.ROOT&lt;&#x2F;param-value&gt;        </span><br><span class="line">&lt;&#x2F;init-param&gt;        </span><br><span class="line">&lt;load-on-startup&gt;1&lt;&#x2F;load-on-startup&gt;    </span><br><span class="line">&lt;&#x2F;servlet&gt;</span><br><span class="line">&lt;!--    配置DispatcherServlet的请求路径--&gt;    </span><br><span class="line">&lt;servlet-mapping&gt;        </span><br><span class="line">&lt;servlet-name&gt;appServlet&lt;&#x2F;servlet-name&gt;        </span><br><span class="line">&lt;url-pattern&gt;&#x2F;&lt;&#x2F;url-pattern&gt;    </span><br><span class="line">&lt;&#x2F;servlet-mapping&gt;</span><br><span class="line">&lt;&#x2F;web-app&gt;</span><br></pre></td></tr></table></figure><p>注意上面的web.xml版本不能太高，否则weblogic10会不支持，建议使用2.4，使用2.5都会报错</p><h4 id="第三步：构建weblogic-xml"><a href="#第三步：构建weblogic-xml" class="headerlink" title="第三步：构建weblogic.xml"></a>第三步：构建weblogic.xml</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;&lt;wls:weblogic-web-app        </span><br><span class="line">xmlns:wls&#x3D;&quot;http:&#x2F;&#x2F;xmlns.oracle.com&#x2F;weblogic&#x2F;weblogic-web-app&quot;        </span><br><span class="line">xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;        </span><br><span class="line">xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;xmlns.oracle.com&#x2F;weblogic&#x2F;weblogic-web-app        </span><br><span class="line">http:&#x2F;&#x2F;xmlns.oracle.com&#x2F;weblogic&#x2F;weblogic-web-app&#x2F;1.4&#x2F;weblogic-web-app.xsd&quot;&gt;</span><br><span class="line">&lt;!--    指定部署上下文路径--&gt;    </span><br><span class="line">&lt;wls:context-root&gt;&#x2F;bydapp&lt;&#x2F;wls:context-root&gt;    </span><br><span class="line">&lt;wls:container-descriptor&gt;</span><br><span class="line">&lt;!--        如果weblogic与当前程序存在相同的包，则优先使用当前程序的依赖包，避免出现jar包冲突--&gt;        </span><br><span class="line">&lt;wls:prefer-application-packages&gt;            </span><br><span class="line">&lt;wls:package-name&gt;org.slf4j.*&lt;&#x2F;wls:package-name&gt;            </span><br><span class="line">&lt;wls:package-name&gt;org.springframework.*&lt;&#x2F;wls:package-name&gt;            </span><br><span class="line">&lt;wls:package-name&gt;javax.persistence.*&lt;&#x2F;wls:package-name&gt;        </span><br><span class="line">&lt;&#x2F;wls:prefer-application-packages&gt;    </span><br><span class="line">&lt;&#x2F;wls:container-descriptor&gt;</span><br><span class="line">&lt;&#x2F;wls:weblogic-web-app&gt;</span><br></pre></td></tr></table></figure><p>如果程序中使用了jpa持久框架，则一定要加上javax.persistence包的配置，否则会出现冲突</p><h4 id="第四步：引用JNDI数据源"><a href="#第四步：引用JNDI数据源" class="headerlink" title="第四步：引用JNDI数据源"></a>第四步：引用JNDI数据源</h4><p>方式一：利用服务器上下文直接获取jndi数据源，下面这种方式获取jndi数据源时使用的是匿名用户，如果jndi资源存在安全验证则会获取失败，需要在Context的环境变量中设置用户名密码，如果需要获取远程服务器的jndi资源，也需要在环境变量种设置对应的远程服务器地址</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@Bean</span><br><span class="line">public DataSource dataSource() throws NamingException &#123;    </span><br><span class="line">    Context lookup &#x3D; new InitialContext();    </span><br><span class="line">    return (DataSource) lookup.lookup(jndiName);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方式二：可以直接使用spring提供的JndiObjectFactoryBean获取服务器jndi资源，这种方式也可以设置安全验证，远程服务器地址等信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">public DataSource serverDataSource() throws NamingException &#123;    </span><br><span class="line">    JndiObjectFactoryBean bean &#x3D; new JndiObjectFactoryBean();    </span><br><span class="line">    Properties properties &#x3D; new Properties();    </span><br><span class="line">    properties.setProperty(Context.INITIAL_CONTEXT_FACTORY,&quot;weblogic.jndi.WLInitialContextFactory&quot;);    </span><br><span class="line">    properties.setProperty(Context.PROVIDER_URL,&quot;t3:&#x2F;&#x2F;localhost:7001&quot;);   </span><br><span class="line">    &#x2F;&#x2F;用户名</span><br><span class="line">    properties.setProperty(Context.SECURITY_PRINCIPAL,&quot;username&quot;);  </span><br><span class="line">    &#x2F;&#x2F;密码</span><br><span class="line">    properties.setProperty(Context.SECURITY_CREDENTIALS,&quot;password&quot;);    </span><br><span class="line">bean.setJndiEnvironment(properties);    </span><br><span class="line">    bean.setResourceRef(true);    </span><br><span class="line">    bean.setProxyInterface(DataSource.class);    </span><br><span class="line">    bean.setLookupOnStartup(true);    </span><br><span class="line">    bean.setJndiName(&quot;wlsbjmsrpDataSource&quot;);    </span><br><span class="line">    bean.afterPropertiesSet();    </span><br><span class="line">    return (DataSource) bean.getObject();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上两种方式都支持获取远程服务器的jndi资源和安全验证，但是如果你的应用不是运行在weblogic服务器环境下，则需要在${oracle_home}/wlserver_10.3/server/lib目录下，使用java -jar wljarbuilder.jar命令生成wlfullclient.jar作为应用程序的依赖，否则程序无法正常使用</p><h4 id="第五步：logback日志配置"><a href="#第五步：logback日志配置" class="headerlink" title="第五步：logback日志配置"></a>第五步：logback日志配置</h4><p>application.properties文件配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">logging.config&#x3D;classpath:logback-dev.xml</span><br></pre></td></tr></table></figure><p>logback日志记录配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;configuration debug&#x3D;&quot;false&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--定义日志文件的存储地址 勿在 LogBack 的配置中使用相对路径--&gt;</span><br><span class="line">    &lt;property name&#x3D;&quot;LOG_HOME&quot; value&#x3D;&quot;&#x2F;home&#x2F;oaheibao&#x2F;bydapp_logs&#x2F;&quot; &#x2F;&gt;</span><br><span class="line">    &lt;property name&#x3D;&quot;FILE_NAME&quot; value&#x3D;&quot;bydapp&quot;&#x2F;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--控制台日志， 控制台输出 --&gt;</span><br><span class="line">    &lt;appender name&#x3D;&quot;STDOUT&quot; class&#x3D;&quot;ch.qos.logback.core.ConsoleAppender&quot;&gt;</span><br><span class="line">        &lt;encoder class&#x3D;&quot;ch.qos.logback.classic.encoder.PatternLayoutEncoder&quot;&gt;</span><br><span class="line">            &lt;!--格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度,%msg：日志消息，%n是换行符--&gt;</span><br><span class="line">            &lt;pattern&gt;%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;50&#125; - %msg%n&lt;&#x2F;pattern&gt;</span><br><span class="line">        &lt;&#x2F;encoder&gt;</span><br><span class="line">    &lt;&#x2F;appender&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--文件日志， 按照每天生成日志文件 --&gt;</span><br><span class="line">    &lt;appender name&#x3D;&quot;FILE&quot; class&#x3D;&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;&gt;</span><br><span class="line">        &lt;rollingPolicy class&#x3D;&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;&gt;</span><br><span class="line">            &lt;!--日志文件输出的文件名--&gt;</span><br><span class="line">            &lt;FileNamePattern&gt;$&#123;LOG_HOME&#125;&#x2F;$&#123;FILE_NAME&#125;.log.%d&#123;yyyy-MM-dd&#125;.log&lt;&#x2F;FileNamePattern&gt;</span><br><span class="line">            &lt;!--日志文件保留天数--&gt;</span><br><span class="line">            &lt;MaxHistory&gt;30&lt;&#x2F;MaxHistory&gt;</span><br><span class="line">        &lt;&#x2F;rollingPolicy&gt;</span><br><span class="line">        &lt;encoder class&#x3D;&quot;ch.qos.logback.classic.encoder.PatternLayoutEncoder&quot;&gt;</span><br><span class="line">            &lt;!--格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度%msg：日志消息，%n是换行符--&gt;</span><br><span class="line">            &lt;pattern&gt;%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;50&#125; - %msg%n&lt;&#x2F;pattern&gt;</span><br><span class="line">        &lt;&#x2F;encoder&gt;</span><br><span class="line">        &lt;!--日志文件最大的大小--&gt;</span><br><span class="line">        &lt;triggeringPolicy class&#x3D;&quot;ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy&quot;&gt;</span><br><span class="line">            &lt;MaxFileSize&gt;10MB&lt;&#x2F;MaxFileSize&gt;</span><br><span class="line">        &lt;&#x2F;triggeringPolicy&gt;</span><br><span class="line">    &lt;&#x2F;appender&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- show parameters for hibernate sql 专为 Hibernate 定制 --&gt;</span><br><span class="line">&lt;!--    &lt;logger name&#x3D;&quot;org.hibernate.type.descriptor.sql.BasicBinder&quot; level&#x3D;&quot;TRACE&quot; &#x2F;&gt;--&gt;</span><br><span class="line">&lt;!--    &lt;logger name&#x3D;&quot;org.hibernate.type.descriptor.sql.BasicExtractor&quot; level&#x3D;&quot;DEBUG&quot; &#x2F;&gt;--&gt;</span><br><span class="line">&lt;!--    &lt;logger name&#x3D;&quot;org.hibernate.SQL&quot; level&#x3D;&quot;DEBUG&quot; &#x2F;&gt;--&gt;</span><br><span class="line">&lt;!--    &lt;logger name&#x3D;&quot;org.hibernate.engine.QueryParameters&quot; level&#x3D;&quot;DEBUG&quot; &#x2F;&gt;--&gt;</span><br><span class="line">&lt;!--    &lt;logger name&#x3D;&quot;org.hibernate.engine.query.HQLQueryPlan&quot; level&#x3D;&quot;DEBUG&quot; &#x2F;&gt;--&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--myibatis log configure--&gt;</span><br><span class="line">    &lt;logger name&#x3D;&quot;com.apache.ibatis&quot; level&#x3D;&quot;TRACE&quot;&#x2F;&gt;</span><br><span class="line">    &lt;logger name&#x3D;&quot;java.sql.Connection&quot; level&#x3D;&quot;DEBUG&quot;&#x2F;&gt;</span><br><span class="line">    &lt;logger name&#x3D;&quot;java.sql.Statement&quot; level&#x3D;&quot;DEBUG&quot;&#x2F;&gt;</span><br><span class="line">    &lt;logger name&#x3D;&quot;java.sql.PreparedStatement&quot; level&#x3D;&quot;DEBUG&quot;&#x2F;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 日志输出级别 --&gt;</span><br><span class="line">    &lt;root level&#x3D;&quot;DEBUG&quot;&gt;</span><br><span class="line">        &lt;appender-ref ref&#x3D;&quot;FILE&quot;&#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;root&gt;</span><br><span class="line"></span><br><span class="line">    &lt;root level&#x3D;&quot;INFO&quot;&gt;</span><br><span class="line">        &lt;appender-ref ref&#x3D;&quot;STDOUT&quot; &#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;root&gt;</span><br><span class="line">&lt;&#x2F;configuration&gt;</span><br></pre></td></tr></table></figure><p>虽然weblogic服务器也有日志记录，然而总归没有自己配置的那么舒服。</p><p>写到这里关于springboot打包发布weblogic的步骤就完成了，相比tomcat的war包打包方式仅多了一个weblogic.xml的配置信息以及启动类额外实现了WebApplicationInitializer。虽然最终写出来过程简单，然鹅开始做的时候仍然会碰到各种奇怪的问题。下面就来盘点一下坑点：</p><h5 id="坑一："><a href="#坑一：" class="headerlink" title="坑一："></a>坑一：</h5><h6 id="问题：jar包冲突或缺少jar包，低版本的springboot总是出现各种奇奇怪怪的jar包冲突问题。"><a href="#问题：jar包冲突或缺少jar包，低版本的springboot总是出现各种奇奇怪怪的jar包冲突问题。" class="headerlink" title="问题：jar包冲突或缺少jar包，低版本的springboot总是出现各种奇奇怪怪的jar包冲突问题。"></a>问题：jar包冲突或缺少jar包，低版本的springboot总是出现各种奇奇怪怪的jar包冲突问题。</h6><h6 id="解决方案：如果使用idea可以在pom文件右击，选择Diagrams-gt-show-dependencies菜单项可以展开依赖图，如果出现红色线条则代表依赖冲突，在对应的包中排除依赖即可。缺少jar包则直接引入相应的依赖"><a href="#解决方案：如果使用idea可以在pom文件右击，选择Diagrams-gt-show-dependencies菜单项可以展开依赖图，如果出现红色线条则代表依赖冲突，在对应的包中排除依赖即可。缺少jar包则直接引入相应的依赖" class="headerlink" title="解决方案：如果使用idea可以在pom文件右击，选择Diagrams-&gt;show dependencies菜单项可以展开依赖图，如果出现红色线条则代表依赖冲突，在对应的包中排除依赖即可。缺少jar包则直接引入相应的依赖"></a>解决方案：如果使用idea可以在pom文件右击，选择Diagrams-&gt;show dependencies菜单项可以展开依赖图，如果出现红色线条则代表依赖冲突，在对应的包中排除依赖即可。缺少jar包则直接引入相应的依赖</h6><h5 id="坑二："><a href="#坑二：" class="headerlink" title="坑二："></a>坑二：</h5><h6 id="问题：由于jdk版本是1-6，引入的tomcat包中的内嵌服务器版本过高，导致本地无法测试"><a href="#问题：由于jdk版本是1-6，引入的tomcat包中的内嵌服务器版本过高，导致本地无法测试" class="headerlink" title="问题：由于jdk版本是1.6，引入的tomcat包中的内嵌服务器版本过高，导致本地无法测试"></a>问题：由于jdk版本是1.6，引入的tomcat包中的内嵌服务器版本过高，导致本地无法测试</h6><h6 id="解决方案：在pom文件的属性中tomcat-version指定tomcat版本"><a href="#解决方案：在pom文件的属性中tomcat-version指定tomcat版本" class="headerlink" title="解决方案：在pom文件的属性中tomcat.version指定tomcat版本"></a>解决方案：在pom文件的属性中tomcat.version指定tomcat版本</h6><h5 id="坑三："><a href="#坑三：" class="headerlink" title="坑三："></a>坑三：</h5><h6 id="问题：两处简单的拼写错误，一、web-xml文件中指定启动包路径，二、获取数据源的jndi名称，这两个地方拼写错了，导致自己查了两天的问题，发现的时候人都裂开了。"><a href="#问题：两处简单的拼写错误，一、web-xml文件中指定启动包路径，二、获取数据源的jndi名称，这两个地方拼写错了，导致自己查了两天的问题，发现的时候人都裂开了。" class="headerlink" title="问题：两处简单的拼写错误，一、web.xml文件中指定启动包路径，二、获取数据源的jndi名称，这两个地方拼写错了，导致自己查了两天的问题，发现的时候人都裂开了。"></a>问题：两处简单的拼写错误，一、web.xml文件中指定启动包路径，二、获取数据源的jndi名称，这两个地方拼写错了，导致自己查了两天的问题，发现的时候人都裂开了。</h6><h6 id="解决方案：能复制的时候千万别自己写，多检查检查"><a href="#解决方案：能复制的时候千万别自己写，多检查检查" class="headerlink" title="解决方案：能复制的时候千万别自己写，多检查检查"></a>解决方案：能复制的时候千万别自己写，多检查检查</h6><h5 id="坑四："><a href="#坑四：" class="headerlink" title="坑四："></a>坑四：</h5><h6 id="问题：spring-data-jpa很不好使，不够灵活，简单的日期区间查询都不支持，因为是基于实体操作的。另外对于联表查询也很不友好，可以使用注解映射一对多或多对多的方式查询，但是根据打印的日志来看，似乎是根据映射字段一条一条的去查询详情表的。虽然可以通过注解直接执行原生sql，但是这样就没法进行动态sql查询了。"><a href="#问题：spring-data-jpa很不好使，不够灵活，简单的日期区间查询都不支持，因为是基于实体操作的。另外对于联表查询也很不友好，可以使用注解映射一对多或多对多的方式查询，但是根据打印的日志来看，似乎是根据映射字段一条一条的去查询详情表的。虽然可以通过注解直接执行原生sql，但是这样就没法进行动态sql查询了。" class="headerlink" title="问题：spring-data-jpa很不好使，不够灵活，简单的日期区间查询都不支持，因为是基于实体操作的。另外对于联表查询也很不友好，可以使用注解映射一对多或多对多的方式查询，但是根据打印的日志来看，似乎是根据映射字段一条一条的去查询详情表的。虽然可以通过注解直接执行原生sql，但是这样就没法进行动态sql查询了。"></a>问题：spring-data-jpa很不好使，不够灵活，简单的日期区间查询都不支持，因为是基于实体操作的。另外对于联表查询也很不友好，可以使用注解映射一对多或多对多的方式查询，但是根据打印的日志来看，似乎是根据映射字段一条一条的去查询详情表的。虽然可以通过注解直接执行原生sql，但是这样就没法进行动态sql查询了。</h6><h6 id="解决方案：更换框架，转为使用mybatis，"><a href="#解决方案：更换框架，转为使用mybatis，" class="headerlink" title="解决方案：更换框架，转为使用mybatis，"></a>解决方案：更换框架，转为使用mybatis，</h6><h5 id="坑五："><a href="#坑五：" class="headerlink" title="坑五："></a>坑五：</h5><h6 id="问题：mybatis的sql中无法使用order-by-param1-param2-的方式进行动态排序，mybatis不支持对order-by命令进行这种参数预编译的方式，一旦使用就会出现”-java-sql-SQLSyntaxErrorException-ORA-01745-无效的主机-绑定变量名“的错误"><a href="#问题：mybatis的sql中无法使用order-by-param1-param2-的方式进行动态排序，mybatis不支持对order-by命令进行这种参数预编译的方式，一旦使用就会出现”-java-sql-SQLSyntaxErrorException-ORA-01745-无效的主机-绑定变量名“的错误" class="headerlink" title="问题：mybatis的sql中无法使用order by #{param1} #{param2}的方式进行动态排序，mybatis不支持对order by命令进行这种参数预编译的方式，一旦使用就会出现” java.sql.SQLSyntaxErrorException: ORA-01745: 无效的主机/绑定变量名“的错误"></a>问题：mybatis的sql中无法使用order by #{param1} #{param2}的方式进行动态排序，mybatis不支持对order by命令进行这种参数预编译的方式，一旦使用就会出现” java.sql.SQLSyntaxErrorException: ORA-01745: 无效的主机/绑定变量名“的错误</h6><h6 id="解决方案：将order-by-param1-param2-改为order-by-param1-param2-对于使用-的参数mybatis会进行识别为参数占位符，而使用-则会直接将参数拼接上去"><a href="#解决方案：将order-by-param1-param2-改为order-by-param1-param2-对于使用-的参数mybatis会进行识别为参数占位符，而使用-则会直接将参数拼接上去" class="headerlink" title="解决方案：将order by #{param1} #{param2}改为order by ${param1} ${param2} ,对于使用#的参数mybatis会进行识别为参数占位符，而使用$则会直接将参数拼接上去"></a>解决方案：将order by #{param1} #{param2}改为order by ${param1} ${param2} ,对于使用#的参数mybatis会进行识别为参数占位符，而使用$则会直接将参数拼接上去</h6><h5 id="坑六："><a href="#坑六：" class="headerlink" title="坑六："></a>坑六：</h5><h6 id="问题：在yml文件中使用-param-方式读取pom文件变量总是会报错，提示非法字符的问题"><a href="#问题：在yml文件中使用-param-方式读取pom文件变量总是会报错，提示非法字符的问题" class="headerlink" title="问题：在yml文件中使用@param@方式读取pom文件变量总是会报错，提示非法字符的问题"></a>问题：在yml文件中使用@param@方式读取pom文件变量总是会报错，提示非法字符的问题</h6><h6 id="解决方案：将yml文件改为properties文件，并在pom文件中加入如下配置，对参数进行解析"><a href="#解决方案：将yml文件改为properties文件，并在pom文件中加入如下配置，对参数进行解析" class="headerlink" title="解决方案：将yml文件改为properties文件，并在pom文件中加入如下配置，对参数进行解析"></a>解决方案：将yml文件改为properties文件，并在pom文件中加入如下配置，对参数进行解析</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;resources&gt;  </span><br><span class="line">     &lt;resource&gt;    </span><br><span class="line">       &lt;directory&gt;src&#x2F;main&#x2F;resources&lt;&#x2F;directory&gt;    </span><br><span class="line">       &lt;!--      替换properties文件中的@变量--&gt;    </span><br><span class="line">       &lt;filtering&gt;true&lt;&#x2F;filtering&gt;    </span><br><span class="line">       &lt;includes&gt;      </span><br><span class="line">         &lt;include&gt;*.properties&lt;&#x2F;include&gt;    </span><br><span class="line">       &lt;&#x2F;includes&gt;  </span><br><span class="line">     &lt;&#x2F;resource&gt;</span><br><span class="line">&lt;&#x2F;resources&gt;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;打包时如果变量未被替换则加入以下配置</span><br><span class="line">&lt;plugins&gt;      </span><br><span class="line">    &lt;plugin&gt;        </span><br><span class="line">       &lt;groupId&gt;org.apache.maven.plugins&lt;&#x2F;groupId&gt;        </span><br><span class="line">       &lt;artifactId&gt;maven-war-plugin&lt;&#x2F;artifactId&gt;        </span><br><span class="line">       &lt;version&gt;2.6&lt;&#x2F;version&gt;        </span><br><span class="line">       &lt;configuration&gt;</span><br><span class="line">       &lt;webResources&gt;                       </span><br><span class="line">             &lt;resource&gt;              </span><br><span class="line">             &lt;directory&gt;src&#x2F;main&#x2F;resources&lt;&#x2F;directory&gt;       </span><br><span class="line">             &lt;filtering&gt;true&lt;&#x2F;filtering&gt;              </span><br><span class="line">             &lt;includes&gt;                </span><br><span class="line">                 &lt;include&gt;*.properties&lt;&#x2F;include&gt;              </span><br><span class="line">             &lt;&#x2F;includes&gt;            </span><br><span class="line">         &lt;&#x2F;resource&gt;          </span><br><span class="line">      &lt;&#x2F;webResources&gt;        </span><br><span class="line">     &lt;&#x2F;configuration&gt;      </span><br><span class="line">     &lt;&#x2F;plugin&gt;    </span><br><span class="line">     &lt;&#x2F;plugins&gt;</span><br></pre></td></tr></table></figure><h5 id="坑七："><a href="#坑七：" class="headerlink" title="坑七："></a>坑七：</h5><h6 id="问题：前端图标字体显示错误，原因是由于我们在pom文件配置了对resources目录下的文件进行filtering，maven打包时就错误的破坏了字体文件"><a href="#问题：前端图标字体显示错误，原因是由于我们在pom文件配置了对resources目录下的文件进行filtering，maven打包时就错误的破坏了字体文件" class="headerlink" title="问题：前端图标字体显示错误，原因是由于我们在pom文件配置了对resources目录下的文件进行filtering，maven打包时就错误的破坏了字体文件"></a>问题：前端图标字体显示错误，原因是由于我们在pom文件配置了对resources目录下的文件进行filtering，maven打包时就错误的破坏了字体文件</h6><h6 id="解决方案：在对于的resource配置中利用include限定解析范围或利用exclude排除字体图标文件"><a href="#解决方案：在对于的resource配置中利用include限定解析范围或利用exclude排除字体图标文件" class="headerlink" title="解决方案：在对于的resource配置中利用include限定解析范围或利用exclude排除字体图标文件"></a>解决方案：在对于的resource配置中利用include限定解析范围或利用exclude排除字体图标文件</h6><h5 id="坑八："><a href="#坑八：" class="headerlink" title="坑八："></a>坑八：</h5><h6 id="问题：在springboot1-5-2中与mybatis的集成似乎并没有springboot2那么简单，在springboot2中我们只需要配置spring-datasource，将mapper与接口放在同一目录下，并在接口加上-Mapper注解即可，最多再在启动类加上-MapperScan指定一下扫描路径即可，但springboot1-x似乎没那么简单，同样的方法尝试多次后仍无法正常启动"><a href="#问题：在springboot1-5-2中与mybatis的集成似乎并没有springboot2那么简单，在springboot2中我们只需要配置spring-datasource，将mapper与接口放在同一目录下，并在接口加上-Mapper注解即可，最多再在启动类加上-MapperScan指定一下扫描路径即可，但springboot1-x似乎没那么简单，同样的方法尝试多次后仍无法正常启动" class="headerlink" title="问题：在springboot1.5.2中与mybatis的集成似乎并没有springboot2那么简单，在springboot2中我们只需要配置spring.datasource，将mapper与接口放在同一目录下，并在接口加上@Mapper注解即可，最多再在启动类加上@MapperScan指定一下扫描路径即可，但springboot1.x似乎没那么简单，同样的方法尝试多次后仍无法正常启动"></a>问题：在springboot1.5.2中与mybatis的集成似乎并没有springboot2那么简单，在springboot2中我们只需要配置spring.datasource，将mapper与接口放在同一目录下，并在接口加上@Mapper注解即可，最多再在启动类加上@MapperScan指定一下扫描路径即可，但springboot1.x似乎没那么简单，同样的方法尝试多次后仍无法正常启动</h6><h6 id="解决方案：抛弃spring-boot-starter-mybatis包，直接使用mybatis-spring集成包，采用原生bean配置的方式逐一配置Datasource、TransactionFactory、Configuration、SqlSessionFactoryBean、MapperScannerConfigurer，将他们交给spring容器进行管理"><a href="#解决方案：抛弃spring-boot-starter-mybatis包，直接使用mybatis-spring集成包，采用原生bean配置的方式逐一配置Datasource、TransactionFactory、Configuration、SqlSessionFactoryBean、MapperScannerConfigurer，将他们交给spring容器进行管理" class="headerlink" title="解决方案：抛弃spring-boot-starter-mybatis包，直接使用mybatis-spring集成包，采用原生bean配置的方式逐一配置Datasource、TransactionFactory、Configuration、SqlSessionFactoryBean、MapperScannerConfigurer，将他们交给spring容器进行管理"></a>解决方案：抛弃spring-boot-starter-mybatis包，直接使用mybatis-spring集成包，采用原生bean配置的方式逐一配置Datasource、TransactionFactory、Configuration、SqlSessionFactoryBean、MapperScannerConfigurer，将他们交给spring容器进行管理</h6><h5 id="坑九："><a href="#坑九：" class="headerlink" title="坑九："></a>坑九：</h5><h6 id="问题：thymeleaf模板有毛病连js里的特殊符号也会解析，就算使用转义字符，它也不会帮你转义回去"><a href="#问题：thymeleaf模板有毛病连js里的特殊符号也会解析，就算使用转义字符，它也不会帮你转义回去" class="headerlink" title="问题：thymeleaf模板有毛病连js里的特殊符号也会解析，就算使用转义字符，它也不会帮你转义回去"></a>问题：thymeleaf模板有毛病连js里的特殊符号也会解析，就算使用转义字符，它也不会帮你转义回去</h6><h6 id="解决方案：这个问题两种方法解决1、使用CDATA标签包裹特殊字符语句可以防止被解析。2、将出问题的js代码放到js文件中，html文件仅调用js暴露的方法应该可以避免这个问题"><a href="#解决方案：这个问题两种方法解决1、使用CDATA标签包裹特殊字符语句可以防止被解析。2、将出问题的js代码放到js文件中，html文件仅调用js暴露的方法应该可以避免这个问题" class="headerlink" title="解决方案：这个问题两种方法解决1、使用CDATA标签包裹特殊字符语句可以防止被解析。2、将出问题的js代码放到js文件中，html文件仅调用js暴露的方法应该可以避免这个问题"></a>解决方案：这个问题两种方法解决1、使用CDATA标签包裹特殊字符语句可以防止被解析。2、将出问题的js代码放到js文件中，html文件仅调用js暴露的方法应该可以避免这个问题</h6><h5 id="坑十："><a href="#坑十：" class="headerlink" title="坑十："></a>坑十：</h5><h6 id="问题：应用部署到weblogic后无法正常访问静态资源，配置了mvc框架的资源映射后也没有效果"><a href="#问题：应用部署到weblogic后无法正常访问静态资源，配置了mvc框架的资源映射后也没有效果" class="headerlink" title="问题：应用部署到weblogic后无法正常访问静态资源，配置了mvc框架的资源映射后也没有效果"></a>问题：应用部署到weblogic后无法正常访问静态资源，配置了mvc框架的资源映射后也没有效果</h6><h6 id="解决方案：直接利用maven将静态资源打包到war包的根路径下，pom文件配置如下"><a href="#解决方案：直接利用maven将静态资源打包到war包的根路径下，pom文件配置如下" class="headerlink" title="解决方案：直接利用maven将静态资源打包到war包的根路径下，pom文件配置如下"></a>解决方案：直接利用maven将静态资源打包到war包的根路径下，pom文件配置如下</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">    &lt;plugins&gt;      </span><br><span class="line">&lt;plugin&gt;        </span><br><span class="line">&lt;groupId&gt;org.apache.maven.plugins&lt;&#x2F;groupId&gt;        </span><br><span class="line">&lt;artifactId&gt;maven-war-plugin&lt;&#x2F;artifactId&gt;        </span><br><span class="line">&lt;version&gt;2.6&lt;&#x2F;version&gt;        </span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">&lt;!--          指定打包时将static目录下的文件放到war包根目录下--&gt;            </span><br><span class="line">  &lt;webResources&gt;            </span><br><span class="line">     &lt;resource&gt;              </span><br><span class="line">     &lt;directory&gt;src&#x2F;main&#x2F;resources&#x2F;static&lt;&#x2F;directory&gt; </span><br><span class="line">     &lt;targetPath&gt;&#x2F;&lt;&#x2F;targetPath&gt;            </span><br><span class="line">     &lt;&#x2F;resource&gt;                    </span><br><span class="line">  &lt;&#x2F;webResources&gt;        </span><br><span class="line">&lt;&#x2F;configuration&gt;      </span><br><span class="line">&lt;&#x2F;plugin&gt;    </span><br><span class="line">&lt;&#x2F;plugins&gt;</span><br></pre></td></tr></table></figure><h5 id="坑十一："><a href="#坑十一：" class="headerlink" title="坑十一："></a>坑十一：</h5><h6 id="问题：利用-ConfigurationProperties-prefix-“spring-datasource”-读取配置文件参数，然后注入到数据源配置信息中，然而数据源bean的实例化顺序在配置信息bean之前，导致配置DataSource时出现空指针异常"><a href="#问题：利用-ConfigurationProperties-prefix-“spring-datasource”-读取配置文件参数，然后注入到数据源配置信息中，然而数据源bean的实例化顺序在配置信息bean之前，导致配置DataSource时出现空指针异常" class="headerlink" title="问题：利用@ConfigurationProperties(prefix = “spring.datasource”)读取配置文件参数，然后注入到数据源配置信息中，然而数据源bean的实例化顺序在配置信息bean之前，导致配置DataSource时出现空指针异常"></a>问题：利用@ConfigurationProperties(prefix = “spring.datasource”)读取配置文件参数，然后注入到数据源配置信息中，然而数据源bean的实例化顺序在配置信息bean之前，导致配置DataSource时出现空指针异常</h6><h6 id="解决方案：在数据源bean配置方法的参数中添加配置信息bean，并设置为自动注入在，而已spring就会先实例化配置信息再实例化数据源bean，其他需要依赖数据源的bean也需要这么配置。例子如下："><a href="#解决方案：在数据源bean配置方法的参数中添加配置信息bean，并设置为自动注入在，而已spring就会先实例化配置信息再实例化数据源bean，其他需要依赖数据源的bean也需要这么配置。例子如下：" class="headerlink" title="解决方案：在数据源bean配置方法的参数中添加配置信息bean，并设置为自动注入在，而已spring就会先实例化配置信息再实例化数据源bean，其他需要依赖数据源的bean也需要这么配置。例子如下："></a>解决方案：在数据源bean配置方法的参数中添加配置信息bean，并设置为自动注入在，而已spring就会先实例化配置信息再实例化数据源bean，其他需要依赖数据源的bean也需要这么配置。例子如下：</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">@org.springframework.context.annotation.Configurationpublic class MybatisConfig &#123;    </span><br><span class="line">@Bean    </span><br><span class="line">public DataSource dataSource(@Autowired DataSourceConfig config)&#123;        </span><br><span class="line">PooledDataSourceFactory factory &#x3D; new PooledDataSourceFactory();        </span><br><span class="line">Properties properties &#x3D; new Properties();        </span><br><span class="line">properties.setProperty(&quot;username&quot;,config.getUsername());        </span><br><span class="line">properties.setProperty(&quot;password&quot;,config.getPassword());        </span><br><span class="line">properties.setProperty(&quot;driver&quot;,config.getDriverClassName());        </span><br><span class="line">properties.setProperty(&quot;url&quot;,config.getUrl());        </span><br><span class="line">factory.setProperties(properties);        </span><br><span class="line">return factory.getDataSource();    </span><br><span class="line">&#125;    </span><br><span class="line">@Bean    </span><br><span class="line">public TransactionFactory transactionFactory()&#123;        </span><br><span class="line">JdbcTransactionFactory factory &#x3D; new JdbcTransactionFactory();        </span><br><span class="line">return factory;   </span><br><span class="line">&#125;    </span><br><span class="line">@Bean   </span><br><span class="line">public Configuration configuration(@Autowired DataSource dataSource)&#123;        </span><br><span class="line">Configuration configuration &#x3D; new Configuration();        </span><br><span class="line">Environment environment &#x3D; new </span><br><span class="line">Environment(&quot;dev&quot;,transactionFactory(),dataSource);        </span><br><span class="line">configuration.setEnvironment(environment);        </span><br><span class="line">configuration.getTypeAliasRegistry().registerAliases(&quot;com.definesys.pojo&quot;);        </span><br><span class="line">configuration.addMappers(&quot;com.definesys.repository.mapper&quot;);        </span><br><span class="line">&#x2F;开启驼峰命名        </span><br><span class="line">configuration.setMapUnderscoreToCamelCase(true);        </span><br><span class="line">&#x2F;&#x2F;当没有为参数提供特定的JDBC类型时，指定的jdbc类型为空。一些驱动程序需要指定列JDBC类型，但其他驱动程序使用NULL、VARCHAR或其它类型值。        configuration.setJdbcTypeForNull(JdbcType.NULL);        </span><br><span class="line">return configuration;   </span><br><span class="line">&#125;    </span><br><span class="line">@Bean    </span><br><span class="line">public SqlSessionFactoryBean sqlSessionFactoryBean(@Autowired DataSource </span><br><span class="line">dataSource)&#123;        </span><br><span class="line">SqlSessionFactoryBean bean &#x3D; new SqlSessionFactoryBean();        </span><br><span class="line">Resource resource1 &#x3D; new </span><br><span class="line">ClassPathResource(&quot;com&#x2F;definesys&#x2F;repository&#x2F;mapper&#x2F;MessageDetailMapper.xml&quot;);        </span><br><span class="line">Resource resource2 &#x3D; new ClassPathResource(&quot;com&#x2F;definesys&#x2F;repository&#x2F;mapper&#x2F;MessageMapper.xml&quot;);        </span><br><span class="line">bean.setDataSource(dataSource);        </span><br><span class="line">bean.setMapperLocations(new Resource[]&#123;resource1,resource2&#125;);        </span><br><span class="line">return bean;    </span><br><span class="line">&#125;    </span><br><span class="line">@Bean    </span><br><span class="line">public MapperScannerConfigurer scannerConfigurer()&#123;        </span><br><span class="line">MapperScannerConfigurer configurer &#x3D; new MapperScannerConfigurer();        </span><br><span class="line">configurer.setSqlSessionFactoryBeanName(&quot;sqlSessionFactoryBean&quot;);        </span><br><span class="line">configurer.setBasePackage(&quot;com.definesys.repository&quot;);        </span><br><span class="line">return configurer;    </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="坑十二"><a href="#坑十二" class="headerlink" title="坑十二"></a>坑十二</h5><h6 id><a href="#" class="headerlink" title></a></h6><p>问题：spring-boot-web1.5.22引用的jackson-databind无法使用，前端一发送参数，就会提示找不到对应的json转换器。</p><h6 id="解决方案：在pom文件的web包中排除jackson-databind依赖，重新引入2-5-5版本的jackson-databind。当时开发时引入后也会报错但是可以自己将MappingJackson2HttpMessageConverter转换器重新配置到mvc中，后面测试的时候惊奇的发现又不需要这个配置了，只要引入这个包就可以了，总之很迷。"><a href="#解决方案：在pom文件的web包中排除jackson-databind依赖，重新引入2-5-5版本的jackson-databind。当时开发时引入后也会报错但是可以自己将MappingJackson2HttpMessageConverter转换器重新配置到mvc中，后面测试的时候惊奇的发现又不需要这个配置了，只要引入这个包就可以了，总之很迷。" class="headerlink" title="解决方案：在pom文件的web包中排除jackson-databind依赖，重新引入2.5.5版本的jackson-databind。当时开发时引入后也会报错但是可以自己将MappingJackson2HttpMessageConverter转换器重新配置到mvc中，后面测试的时候惊奇的发现又不需要这个配置了，只要引入这个包就可以了，总之很迷。"></a>解决方案：在pom文件的web包中排除jackson-databind依赖，重新引入2.5.5版本的jackson-databind。当时开发时引入后也会报错但是可以自己将MappingJackson2HttpMessageConverter转换器重新配置到mvc中，后面测试的时候惊奇的发现又不需要这个配置了，只要引入这个包就可以了，总之很迷。</h6>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h6 id=&quot;最近由于客户的一些需求需要在weblogic10服务器下发布一个war包应用，本以为是一个简单轻松的过程，但是没想到因为jdk版本太低是1-6的以及没有weblogic服务器的部署经验等种种原因整个过程相当坎坷。&quot;&gt;&lt;a href=&quot;#最近由于客户的一些需求需要在
      
    
    </summary>
    
    
      <category term="weblogic springboot1.x" scheme="https://hkj141421.github.io/categories/weblogic-springboot1-x/"/>
    
    
      <category term="weblogic springboot1.x" scheme="https://hkj141421.github.io/tags/weblogic-springboot1-x/"/>
    
  </entry>
  
  <entry>
    <title>Netty4使用指南(三)流量控制</title>
    <link href="https://hkj141421.github.io/2020/06/02/Netty4%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97(%E4%B8%89)%20%E6%B5%81%E9%87%8F%E6%8E%A7%E5%88%B6/"/>
    <id>https://hkj141421.github.io/2020/06/02/Netty4%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97(%E4%B8%89)%20%E6%B5%81%E9%87%8F%E6%8E%A7%E5%88%B6/</id>
    <published>2020-06-02T09:36:20.000Z</published>
    <updated>2021-08-18T06:06:59.152Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Netty4使用指南-三-流量控制"><a href="#Netty4使用指南-三-流量控制" class="headerlink" title="Netty4使用指南(三) 流量控制"></a>Netty4使用指南(三) 流量控制</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>在实际生活中我们可能会因为某些原因需要控制服务端的读写速率，根据业务需求对不同的用户提供不同的下载速度，Netty本身也提供了高低水位和流量整形，两种方式来控制流量。</p><ol><li><strong>高低水位</strong><br>netty中的高低水位机制会在发送缓冲区的数据超过高水位时触发channelWritabilityChanged事件同时将channel的写状态设置为false，但是这个写状态只是程序层面的状态，程序还是可以继续写入数据。所以使用这个机制时需要自行判断是否可写，并做相应的处理。</li></ol><ol start="2"><li><strong>流量整形</strong><br> netty提供了ChannelTrafficShapingHandler、GlobalTrafficShapingHandler、GlobalChannelTrafficShapingHandler三个流量整形处理器，依次用于控制单个channel、所有channel、所有channel。这些处理器控制流量的原理相同的。控制读取速度是通过先从TCP缓存区读取数据，然后根据读取的数据大小和读取速率的限制计算出，需要暂停读取数据的时间。这样从平均来看读取速度就被降低了。控制写速度则是根据数据大小和写出速率计算出预期写出的时间，然后封装为一个待发送任务放到延迟消息队列中，同时提交一个延迟任务查看消息是否可发送了。这样从平均来看每秒钟的数据读写速度就被控制在读写限制下了。</li></ol><h3 id="高低水位机制的实现"><a href="#高低水位机制的实现" class="headerlink" title="高低水位机制的实现"></a>高低水位机制的实现</h3><p>众所周知netty通过一个ChannelPipeline维护了一个双向链表，当触发Inbound事件时事件会从head传播到tail，而Outboud事件则有两种传播方式，一是从当前handler传播到head、二是从tail传播到head。使用哪种传播方式取决于你是通过ChannelHandlerContext直接发送数据还是通过channel发送数据。<br>当我们在netty中使用write方法发送数据时，这个数据其实是写到了一个缓冲区中，并未直接发送给接收方，netty使用ChannelOutboundBuffer封装出站消息的发送，所有的消息都会存储在一个链表中，直到缓冲区被flush方法刷新，netty才会将数据真正发送出去。<br>netty默认设置的高水位为64KB，低水位为32KB.</p><p>以下代码为ChannelOutboundBuffer的部分源码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addMessage</span><span class="params">(Object msg, <span class="keyword">int</span> size, ChannelPromise promise)</span> </span>&#123;</span><br><span class="line">    ChannelOutboundBuffer.Entry entry = ChannelOutboundBuffer.Entry.newInstance(msg, size, total(msg), promise);</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>.tailEntry == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.flushedEntry = <span class="keyword">null</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        ChannelOutboundBuffer.Entry tail = <span class="keyword">this</span>.tailEntry;</span><br><span class="line">        tail.next = entry;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.tailEntry = entry;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>.unflushedEntry == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.unflushedEntry = entry;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.incrementPendingOutboundBytes((<span class="keyword">long</span>)entry.pendingSize, <span class="keyword">false</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 该方法会在用户调用write()发送数据时被调用，它会将待发送的数据加入到数据缓冲区中</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">incrementPendingOutboundBytes</span><span class="params">(<span class="keyword">long</span> size, <span class="keyword">boolean</span> invokeLater)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(size != <span class="number">0L</span>) &#123;</span><br><span class="line">        <span class="keyword">long</span> newWriteBufferSize = TOTAL_PENDING_SIZE_UPDATER.addAndGet(<span class="keyword">this</span>, size);</span><br><span class="line">        <span class="keyword">if</span>(newWriteBufferSize &gt; (<span class="keyword">long</span>)<span class="keyword">this</span>.channel.config().getWriteBufferHighWaterMark()) &#123;</span><br><span class="line">            <span class="keyword">this</span>.setUnwritable(invokeLater);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 加入缓冲区后，调用incrementPendingOutboundBytes方法增加待发送的字节数，同时判断字节数是否超过高水位。</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setUnwritable</span><span class="params">(<span class="keyword">boolean</span> invokeLater)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> oldValue;</span><br><span class="line">    <span class="keyword">int</span> newValue;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        oldValue = <span class="keyword">this</span>.unwritable;</span><br><span class="line">        newValue = oldValue | <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">while</span>(!UNWRITABLE_UPDATER.compareAndSet(<span class="keyword">this</span>, oldValue, newValue));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(oldValue == <span class="number">0</span> &amp;&amp; newValue != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.fireChannelWritabilityChanged(invokeLater);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 超过高水位则将可写状态设置为false，并触发可写状态改变事件</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addFlush</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ChannelOutboundBuffer.Entry entry = <span class="keyword">this</span>.unflushedEntry;</span><br><span class="line">    <span class="keyword">if</span>(entry != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.flushedEntry == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.flushedEntry = entry;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            ++<span class="keyword">this</span>.flushed;</span><br><span class="line">            <span class="keyword">if</span>(!entry.promise.setUncancellable()) &#123;</span><br><span class="line">                <span class="keyword">int</span> pending = entry.cancel();</span><br><span class="line">                <span class="keyword">this</span>.decrementPendingOutboundBytes((<span class="keyword">long</span>)pending, <span class="keyword">false</span>, <span class="keyword">true</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            entry = entry.next;</span><br><span class="line">        &#125; <span class="keyword">while</span>(entry != <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.unflushedEntry = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此方法将未刷新的数据刷到准备发送的已刷新队列中。</p><h3 id="高低水位机制的应用"><a href="#高低水位机制的应用" class="headerlink" title="高低水位机制的应用"></a>高低水位机制的应用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelActive</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="comment">//设置低水位</span></span><br><span class="line">    ctx.channel().config().setWriteBufferLowWaterMark(<span class="number">10</span>);</span><br><span class="line">    <span class="comment">//设置高水位</span></span><br><span class="line">    ctx.channel().config().setWriteBufferHighWaterMark(<span class="number">100</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (channel.isWritable()) &#123;</span><br><span class="line">    channel.writeAndFlush(msg);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">"服务端不可写"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过ChannelHandlerContext即可设置高低水位，在激活事件中设置可以使配置在建立连接时就生效，高低水位如果设置在客户端就是控制发送给服务器的数据速度，设置在服务器就是控制发送给客户端的数据速度。</p><h3 id="流量整形的实现"><a href="#流量整形的实现" class="headerlink" title="流量整形的实现"></a>流量整形的实现</h3><p>netty可以用于流量整形的处理器有ChannelTrafficShapingHandler、GlobalTrafficShapingHandler、GlobalChannelTrafficShapingHandler，这三个处理器都继承了AbstractTrafficShapingHandler，AbstractTrafficShapingHandler主要实现了控制读取速度、判断发送数据需要的时间、统计周期内读写的字节。本博客以ChannelTrafficShapingHandler为例，其他两个处理器的实现原理都是差不多的，下面贴一下AbstractTrafficShapingHandler的几段源码，看看netty是怎么控制的读写速率的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelRead</span><span class="params">(ChannelHandlerContext ctx, Object msg)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="comment">//计算读取到的消息大小</span></span><br><span class="line">      <span class="keyword">long</span> size = <span class="keyword">this</span>.calculateSize(msg);</span><br><span class="line">      <span class="comment">//获取当前时间</span></span><br><span class="line">      <span class="keyword">long</span> now = TrafficCounter.milliSecondFromNano();</span><br><span class="line">      <span class="keyword">if</span>(size &gt; <span class="number">0L</span>) &#123;</span><br><span class="line">  <span class="comment">//根据读取速率计算已读取数据需要暂停多长时间</span></span><br><span class="line">          <span class="keyword">long</span> wait = <span class="keyword">this</span>.trafficCounter.readTimeToWait(size, <span class="keyword">this</span>.readLimit, <span class="keyword">this</span>.maxTime, now);</span><br><span class="line">          <span class="comment">//此处直接返回wait参数的值，可以重写该方法控制暂停读取的时间</span></span><br><span class="line">          wait = <span class="keyword">this</span>.checkWaitReadTime(ctx, wait, now);</span><br><span class="line">          <span class="comment">//如果暂停时间小于10毫秒，则不暂停读取，允许读取速率存在一定的偏差</span></span><br><span class="line">          <span class="keyword">if</span>(wait &gt;= <span class="number">10L</span>) &#123;</span><br><span class="line">              Channel channel = ctx.channel();</span><br><span class="line">              ChannelConfig config = channel.config();</span><br><span class="line">              <span class="keyword">if</span>(logger.isDebugEnabled()) &#123;</span><br><span class="line">                  logger.debug(<span class="string">"Read suspend: "</span> + wait + <span class="string">':'</span> + config.isAutoRead() + <span class="string">':'</span> + isHandlerActive(ctx));</span><br><span class="line">              &#125;</span><br><span class="line"><span class="comment">//如果自动读取被关闭且是该处理器暂停的</span></span><br><span class="line">              <span class="keyword">if</span>(config.isAutoRead() &amp;&amp; isHandlerActive(ctx)) &#123;</span><br><span class="line">                  <span class="comment">//关闭自动读取</span></span><br><span class="line">                  config.setAutoRead(<span class="keyword">false</span>);</span><br><span class="line">                  <span class="comment">//在channel中设置属性，标记读取事件被处理器暂停了</span></span><br><span class="line">                  channel.attr(READ_SUSPENDED).set(Boolean.valueOf(<span class="keyword">true</span>));</span><br><span class="line">                  <span class="comment">//从channel属性中获取重启读取任务</span></span><br><span class="line">                  Attribute&lt;Runnable&gt; attr = channel.attr(REOPEN_TASK);</span><br><span class="line">                  Runnable reopenTask = (Runnable)attr.get();</span><br><span class="line">                  <span class="keyword">if</span>(reopenTask == <span class="keyword">null</span>) &#123;</span><br><span class="line">                      reopenTask = <span class="keyword">new</span> AbstractTrafficShapingHandler.ReopenReadTimerTask(ctx);</span><br><span class="line">                      attr.set(reopenTask);</span><br><span class="line">                  &#125;</span><br><span class="line"><span class="comment">//将读取事件加入到netty的线程池中作为一个定时任务</span></span><br><span class="line">                  ctx.executor().schedule((Runnable)reopenTask, wait, TimeUnit.MILLISECONDS);</span><br><span class="line">                  <span class="keyword">if</span>(logger.isDebugEnabled()) &#123;</span><br><span class="line">                      logger.debug(<span class="string">"Suspend final status =&gt; "</span> + config.isAutoRead() + <span class="string">':'</span> + isHandlerActive(ctx) + <span class="string">" will reopened at: "</span> + wait);</span><br><span class="line">                  &#125;</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">this</span>.informReadOperation(ctx, now);</span><br><span class="line">      <span class="comment">//继续向下传播读取事件</span></span><br><span class="line">      ctx.fireChannelRead(msg);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ReopenReadTimerTask</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">      <span class="keyword">final</span> ChannelHandlerContext ctx;</span><br><span class="line"></span><br><span class="line">      ReopenReadTimerTask(ChannelHandlerContext ctx) &#123;</span><br><span class="line">          <span class="keyword">this</span>.ctx = ctx;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">          Channel channel = <span class="keyword">this</span>.ctx.channel();</span><br><span class="line">          ChannelConfig config = channel.config();</span><br><span class="line">          <span class="comment">//如果channel的自动读取被关闭了且不是AbstractTrafficShapingHandler关闭的</span></span><br><span class="line">          <span class="keyword">if</span>(!config.isAutoRead() &amp;&amp; AbstractTrafficShapingHandler.isHandlerActive(<span class="keyword">this</span>.ctx)) &#123;</span><br><span class="line">              <span class="keyword">if</span>(AbstractTrafficShapingHandler.logger.isDebugEnabled()) &#123;</span><br><span class="line">                  AbstractTrafficShapingHandler.logger.debug(<span class="string">"Not unsuspend: "</span> + config.isAutoRead() + <span class="string">':'</span> + AbstractTrafficShapingHandler.isHandlerActive(<span class="keyword">this</span>.ctx));</span><br><span class="line">              &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//重置AbstractTrafficShapingHandler的状态</span></span><br><span class="line">     channel.attr(AbstractTrafficShapingHandler.READ_SUSPENDED).set(Boolean.valueOf(<span class="keyword">false</span>));</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">              <span class="keyword">if</span>(AbstractTrafficShapingHandler.logger.isDebugEnabled()) &#123;</span><br><span class="line">                  <span class="keyword">if</span>(config.isAutoRead() &amp;&amp; !AbstractTrafficShapingHandler.isHandlerActive(<span class="keyword">this</span>.ctx)) &#123;</span><br><span class="line">                      AbstractTrafficShapingHandler.logger.debug(<span class="string">"Unsuspend: "</span> + config.isAutoRead() + <span class="string">':'</span> + AbstractTrafficShapingHandler.isHandlerActive(<span class="keyword">this</span>.ctx));</span><br><span class="line">                  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                      AbstractTrafficShapingHandler.logger.debug(<span class="string">"Normal unsuspend: "</span> + config.isAutoRead() + <span class="string">':'</span> + AbstractTrafficShapingHandler.isHandlerActive(<span class="keyword">this</span>.ctx));</span><br><span class="line">                  &#125;</span><br><span class="line">              &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//重置AbstractTrafficShapingHandler的状态并开启自动读取     </span></span><br><span class="line">    channel.attr(AbstractTrafficShapingHandler.READ_SUSPENDED).set(Boolean.valueOf(<span class="keyword">false</span>));</span><br><span class="line">              config.setAutoRead(<span class="keyword">true</span>);</span><br><span class="line">              channel.read();</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          <span class="keyword">if</span>(AbstractTrafficShapingHandler.logger.isDebugEnabled()) &#123;</span><br><span class="line">              AbstractTrafficShapingHandler.logger.debug(<span class="string">"Unsuspend final status =&gt; "</span> + config.isAutoRead() + <span class="string">':'</span> + AbstractTrafficShapingHandler.isHandlerActive(<span class="keyword">this</span>.ctx));</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(ChannelHandlerContext ctx, Object msg, ChannelPromise promise)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"> <span class="comment">//计算当前接收到的数据大小</span></span><br><span class="line">      <span class="keyword">long</span> size = <span class="keyword">this</span>.calculateSize(msg);</span><br><span class="line">      <span class="comment">//获取当前时间</span></span><br><span class="line">      <span class="keyword">long</span> now = TrafficCounter.milliSecondFromNano();</span><br><span class="line">      <span class="keyword">if</span>(size &gt; <span class="number">0L</span>) &#123;</span><br><span class="line">      <span class="comment">//计算要发送的数据以写速率需要发送多久</span></span><br><span class="line">          <span class="keyword">long</span> wait = <span class="keyword">this</span>.trafficCounter.writeTimeToWait(size, <span class="keyword">this</span>.writeLimit, <span class="keyword">this</span>.maxTime, now);</span><br><span class="line">          <span class="comment">//如果等待时间小于10毫秒就可以不用等待，允许速率存在一定的偏差</span></span><br><span class="line">          <span class="keyword">if</span>(wait &gt;= <span class="number">10L</span>) &#123;</span><br><span class="line">              <span class="keyword">if</span>(logger.isDebugEnabled()) &#123;</span><br><span class="line">                  logger.debug(<span class="string">"Write suspend: "</span> + wait + <span class="string">':'</span> + ctx.channel().config().isAutoRead() + <span class="string">':'</span> + isHandlerActive(ctx));</span><br><span class="line">              &#125;</span><br><span class="line"><span class="comment">//将写数据的功能留给子类实现</span></span><br><span class="line">              <span class="keyword">this</span>.submitWrite(ctx, msg, size, wait, now, promise);</span><br><span class="line">              <span class="keyword">return</span>;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">this</span>.submitWrite(ctx, msg, size, <span class="number">0L</span>, now, promise);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">submitWrite</span><span class="params">(ChannelHandlerContext var1, Object var2, <span class="keyword">long</span> var3, <span class="keyword">long</span> var5, <span class="keyword">long</span> var7, ChannelPromise var9)</span></span>;</span><br></pre></td></tr></table></figure><p>接下来我们看一下ChannelTrafficShapingHandler的submitWrite方法的实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">submitWrite</span><span class="params">(<span class="keyword">final</span> ChannelHandlerContext ctx, Object msg, <span class="keyword">long</span> size, <span class="keyword">long</span> delay, <span class="keyword">long</span> now, ChannelPromise promise)</span> </span>&#123;</span><br><span class="line">  <span class="comment">//内部类，用于存储待发送的数据</span></span><br><span class="line">      ChannelTrafficShapingHandler.ToSend newToSend;</span><br><span class="line">      <span class="keyword">synchronized</span>(<span class="keyword">this</span>) &#123;</span><br><span class="line">      <span class="comment">//如果不需要延迟发送且待发送消息队列为空</span></span><br><span class="line">          <span class="keyword">if</span>(delay == <span class="number">0L</span> &amp;&amp; <span class="keyword">this</span>.messagesQueue.isEmpty()) &#123;</span><br><span class="line">          <span class="comment">//统计发送的字节</span></span><br><span class="line">              <span class="keyword">this</span>.trafficCounter.bytesRealWriteFlowControl(size);</span><br><span class="line">              <span class="comment">//发送数据给客户端</span></span><br><span class="line">              ctx.write(msg, promise);</span><br><span class="line">              <span class="keyword">return</span>;</span><br><span class="line">          &#125;</span><br><span class="line"><span class="comment">//封装待发送的数据</span></span><br><span class="line">          newToSend = <span class="keyword">new</span> ChannelTrafficShapingHandler.ToSend(delay + now, msg, promise, <span class="keyword">null</span>);</span><br><span class="line">          <span class="comment">//将待发送的任务加入消息队列</span></span><br><span class="line">          <span class="keyword">this</span>.messagesQueue.addLast(newToSend);</span><br><span class="line">          <span class="keyword">this</span>.queueSize += size;</span><br><span class="line">          <span class="comment">//检查待发送的消息队列大小是否超过了最大发送数据限制或延迟时间超过最大等待时间，超过则设置写状态为false，并触发写状态改变事件</span></span><br><span class="line">          <span class="keyword">this</span>.checkWriteSuspend(ctx, delay, <span class="keyword">this</span>.queueSize);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">final</span> <span class="keyword">long</span> futureNow = newToSend.relativeTimeAction;</span><br><span class="line">      <span class="comment">//将发送数据任务加入定时任务</span></span><br><span class="line">      ctx.executor().schedule(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">          <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">              ChannelTrafficShapingHandler.<span class="keyword">this</span>.sendAllValid(ctx, futureNow);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;, delay, TimeUnit.MILLISECONDS);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">sendAllValid</span><span class="params">(ChannelHandlerContext ctx, <span class="keyword">long</span> now)</span> </span>&#123;</span><br><span class="line">  <span class="comment">//由于是线程池可能存在多个定时任务同时执行，因此要加入同步锁</span></span><br><span class="line">      <span class="keyword">synchronized</span>(<span class="keyword">this</span>) &#123;</span><br><span class="line">      <span class="comment">//获取待发送消息队列的第一个元素</span></span><br><span class="line">          ChannelTrafficShapingHandler.ToSend newToSend = (ChannelTrafficShapingHandler.ToSend)<span class="keyword">this</span>.messagesQueue.pollFirst();</span><br><span class="line"></span><br><span class="line">          <span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line">              <span class="keyword">if</span>(newToSend != <span class="keyword">null</span>) &#123;</span><br><span class="line">              <span class="comment">//如果任务的执行时间小于当前时间</span></span><br><span class="line">                  <span class="keyword">if</span>(newToSend.relativeTimeAction &lt;= now) &#123;</span><br><span class="line">                  <span class="comment">//计算数据大小</span></span><br><span class="line">                      <span class="keyword">long</span> size = <span class="keyword">this</span>.calculateSize(newToSend.toSend);</span><br><span class="line">                      <span class="comment">//统计发送的字节数</span></span><br><span class="line">                      <span class="keyword">this</span>.trafficCounter.bytesRealWriteFlowControl(size);</span><br><span class="line">                      <span class="comment">//减少消息队列的数据大小</span></span><br><span class="line">                      <span class="keyword">this</span>.queueSize -= size;</span><br><span class="line">                      <span class="comment">//发送数据给客户端</span></span><br><span class="line">                      ctx.write(newToSend.toSend, newToSend.promise);</span><br><span class="line">                      <span class="comment">//继续获取队列中第一个发送任务</span></span><br><span class="line">                      newToSend = (ChannelTrafficShapingHandler.ToSend)<span class="keyword">this</span>.messagesQueue.pollFirst();</span><br><span class="line">                      <span class="keyword">continue</span>;</span><br><span class="line">                  &#125;</span><br><span class="line"><span class="comment">//任务还不能执行，将发送任务重新加入到队列的队首</span></span><br><span class="line">                  <span class="keyword">this</span>.messagesQueue.addFirst(newToSend);</span><br><span class="line">              &#125;</span><br><span class="line"></span><br><span class="line">              <span class="keyword">if</span>(<span class="keyword">this</span>.messagesQueue.isEmpty()) &#123;</span><br><span class="line">             <span class="comment">//将可写状态设置为true</span></span><br><span class="line">                  <span class="keyword">this</span>.releaseWriteSuspended(ctx);</span><br><span class="line">              &#125;</span><br><span class="line">              <span class="keyword">break</span>;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line"><span class="comment">//刷新缓冲区，真正将数据发送给客户端</span></span><br><span class="line">      ctx.flush();</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>在上面的代码中，我们可以发现netty使用了TrafficCounter来计算读取和发送的等待时间以及监控读取发送的字节数，现在我们继续来看看这里是怎么做的吧。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</span><br><span class="line"> <span class="comment">//该监控器是否被启动了</span></span><br><span class="line">     <span class="keyword">if</span>(!<span class="keyword">this</span>.monitorActive) &#123;</span><br><span class="line">     <span class="comment">//记录本次启动监控器时间</span></span><br><span class="line">         <span class="keyword">this</span>.lastTime.set(milliSecondFromNano());</span><br><span class="line">         <span class="comment">//获取监控周期</span></span><br><span class="line">         <span class="keyword">long</span> localCheckInterval = <span class="keyword">this</span>.checkInterval.get();</span><br><span class="line">         <span class="comment">//如果周期大于0且定时任务执行器不为空</span></span><br><span class="line">         <span class="keyword">if</span>(localCheckInterval &gt; <span class="number">0L</span> &amp;&amp; <span class="keyword">this</span>.executor != <span class="keyword">null</span>) &#123;</span><br><span class="line">         <span class="comment">//设置监控状态</span></span><br><span class="line">             <span class="keyword">this</span>.monitorActive = <span class="keyword">true</span>;</span><br><span class="line">             <span class="comment">//获取监控任务</span></span><br><span class="line">             <span class="keyword">this</span>.monitor = <span class="keyword">new</span> TrafficCounter.TrafficMonitoringTask();</span><br><span class="line">             <span class="comment">//将监控任务加入定时任务中</span></span><br><span class="line">             <span class="keyword">this</span>.scheduledFuture = <span class="keyword">this</span>.executor.schedule(<span class="keyword">this</span>.monitor, localCheckInterval, TimeUnit.MILLISECONDS);</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     <span class="keyword">if</span>(<span class="keyword">this</span>.monitorActive) &#123;</span><br><span class="line">         <span class="keyword">this</span>.monitorActive = <span class="keyword">false</span>;</span><br><span class="line">         <span class="comment">//重置监控信息</span></span><br><span class="line">         <span class="keyword">this</span>.resetAccounting(milliSecondFromNano());</span><br><span class="line">         <span class="keyword">if</span>(<span class="keyword">this</span>.trafficShapingHandler != <span class="keyword">null</span>) &#123;</span><br><span class="line">             <span class="keyword">this</span>.trafficShapingHandler.doAccounting(<span class="keyword">this</span>);</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         <span class="keyword">if</span>(<span class="keyword">this</span>.scheduledFuture != <span class="keyword">null</span>) &#123;</span><br><span class="line">         <span class="comment">//取消定时任务</span></span><br><span class="line">             <span class="keyword">this</span>.scheduledFuture.cancel(<span class="keyword">true</span>);</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">void</span> <span class="keyword">long</span> recv) &#123;</span><br><span class="line"> <span class="comment">//累加当前周期内读取的字节数</span></span><br><span class="line">     <span class="keyword">this</span>.currentReadBytes.addAndGet(recv);</span><br><span class="line">     <span class="comment">//累加当前监控器记录的已读取字节数</span></span><br><span class="line">     <span class="keyword">this</span>.cumulativeReadBytes.addAndGet(recv);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">void</span> <span class="title">bytesWriteFlowControl</span><span class="params">(<span class="keyword">long</span> write)</span> </span>&#123;</span><br><span class="line"> <span class="comment">//累加当前周期内读取的字节数</span></span><br><span class="line">     <span class="keyword">this</span>.currentWrittenBytes.addAndGet(write);</span><br><span class="line">     <span class="comment">//累加当前监控器记录的已读取字节数</span></span><br><span class="line">     <span class="keyword">this</span>.cumulativeWrittenBytes.addAndGet(write);</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> <span class="comment">//该方法的作业时重置监控器状态，将本次周期内记录的数据转到上次</span></span><br><span class="line">     <span class="function"><span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">resetAccounting</span><span class="params">(<span class="keyword">long</span> newLastTime)</span> </span>&#123;</span><br><span class="line">     <span class="comment">//计算上次启动或重置监控器到本次重置监控器的时间</span></span><br><span class="line">     <span class="keyword">long</span> interval = newLastTime - <span class="keyword">this</span>.lastTime.getAndSet(newLastTime);</span><br><span class="line">     <span class="keyword">if</span>(interval != <span class="number">0L</span>) &#123;</span><br><span class="line">         <span class="keyword">if</span>(logger.isDebugEnabled() &amp;&amp; interval &gt; <span class="keyword">this</span>.checkInterval() &lt;&lt; <span class="number">1</span>) &#123;</span><br><span class="line">             logger.debug(<span class="string">"Acct schedule not ok: "</span> + interval + <span class="string">" &gt; 2*"</span> + <span class="keyword">this</span>.checkInterval() + <span class="string">" from "</span> + <span class="keyword">this</span>.name);</span><br><span class="line">         &#125;</span><br><span class="line"><span class="comment">//将本次监控周期内读取的字节数转到上次</span></span><br><span class="line">         <span class="keyword">this</span>.lastReadBytes = <span class="keyword">this</span>.currentReadBytes.getAndSet(<span class="number">0L</span>);</span><br><span class="line">         <span class="comment">//将本次监控周期内发送的字节数转到上次</span></span><br><span class="line">         <span class="keyword">this</span>.lastWrittenBytes = <span class="keyword">this</span>.currentWrittenBytes.getAndSet(<span class="number">0L</span>);</span><br><span class="line">         <span class="keyword">this</span>.lastReadThroughput = <span class="keyword">this</span>.lastReadBytes * <span class="number">1000L</span> / interval;</span><br><span class="line">         <span class="keyword">this</span>.lastWriteThroughput = <span class="keyword">this</span>.lastWrittenBytes * <span class="number">1000L</span> / interval;</span><br><span class="line">         <span class="keyword">this</span>.realWriteThroughput = <span class="keyword">this</span>.realWrittenBytes.getAndSet(<span class="number">0L</span>) * <span class="number">1000L</span> / interval;</span><br><span class="line">         <span class="keyword">this</span>.lastWritingTime = Math.max(<span class="keyword">this</span>.lastWritingTime, <span class="keyword">this</span>.writingTime);</span><br><span class="line">         <span class="keyword">this</span>.lastReadingTime = Math.max(<span class="keyword">this</span>.lastReadingTime, <span class="keyword">this</span>.readingTime);</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">TrafficMonitoringTask</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">     <span class="function"><span class="keyword">private</span> <span class="title">TrafficMonitoringTask</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">         <span class="keyword">if</span>(TrafficCounter.<span class="keyword">this</span>.monitorActive) &#123;</span><br><span class="line">         <span class="comment">//重置监控器状态，转移监控信息到上次</span></span><br><span class="line">             TrafficCounter.<span class="keyword">this</span>.resetAccounting(TrafficCounter.milliSecondFromNano());</span><br><span class="line">             <span class="keyword">if</span>(TrafficCounter.<span class="keyword">this</span>.trafficShapingHandler != <span class="keyword">null</span>) &#123;</span><br><span class="line">             <span class="comment">//调用监控方法，用户可以重写该方法，以在监控重置时进行某些操作</span></span><br><span class="line">                 TrafficCounter.<span class="keyword">this</span>.trafficShapingHandler.doAccounting(TrafficCounter.<span class="keyword">this</span>);</span><br><span class="line">             &#125;</span><br><span class="line"><span class="comment">//重新将该监控任务加入定时任务中</span></span><br><span class="line">             TrafficCounter.<span class="keyword">this</span>.scheduledFuture = TrafficCounter.<span class="keyword">this</span>.executor.schedule(<span class="keyword">this</span>, TrafficCounter.<span class="keyword">this</span>.checkInterval.get(), TimeUnit.MILLISECONDS);</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>从上面的TrafficCounter的源码中，我们可以看出TrafficCounter的周期性统计也是通过定时任务来完成的，当AbstractTrafficShapingHandler读写数据时就会调用bytesWriteFlowControl和bytesRecvFlowControl方法记录读写的数据大小，而TrafficCounter每次执行任务时就会将当前周期记录的读写字节数，转移到上次状态中。在监控过程中，TrafficCounter会调用AbstractTrafficShapingHandler的doAccounting方法，该方法的实现是空的，什么也不做，我们想做些什么可以继承该类来重写doAccounting方法。</p><p>通过以上源码我们可以得出结论，netty的限流并非真正的控制每秒读取写出的字节数，而是先读取一部分字节(读取的这部分字节大小，可以通过设置netty的接收缓冲区控制，但是不建议更改，因为netty会根据读取的字节调整合适的大小，以减少内存开销)，然后根据当前的读取速率限制计算出下一次读取需要等待多久。写出速率也是根据当前写出速率计算出发送时间，然后将发送数据封装到一个待发送任务队列中，再启动定时任务监听该消息队列将数据发送出去。虽然netty是通过暂停读取和发送来实现的，但平均来看还是实现了流量控制的目的。</p><h3 id="流量整形的应用"><a href="#流量整形的应用" class="headerlink" title="流量整形的应用"></a>流量整形的应用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FlowMonitoringHandler</span> <span class="keyword">extends</span> <span class="title">ChannelTrafficShapingHandler</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doAccounting</span><span class="params">(TrafficCounter counter)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"上个监控周期读取了"</span>+counter.lastReadBytes()+<span class="string">"个字节,发送了"</span>+counter.lastWrittenBytes()+<span class="string">"个字节"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里继承了ChannelTrafficShapingHandler重写doAccounting方法，方便我们查看流量整形的效果。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.serverBootstrap.group(<span class="keyword">this</span>.boss,<span class="keyword">this</span>.worker)</span><br><span class="line">                   .channel(NioServerSocketChannel<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">                   .<span class="title">childHandler</span>(<span class="title">new</span> <span class="title">ChannelInitializer</span>() </span>&#123;</span><br><span class="line">                       <span class="meta">@Override</span></span><br><span class="line">                       <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(Channel channel)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                           ChannelPipeline pipeline = channel.pipeline();</span><br><span class="line">                             pipeline.addLast(<span class="string">"FlowMonitoringHandler"</span>, <span class="keyword">new</span> FlowMonitoringHandler(<span class="number">100</span>,<span class="number">10</span>,<span class="number">1000L</span>,<span class="number">1000L</span>*<span class="number">10</span>));</span><br><span class="line"></span><br><span class="line">                           pipeline.addLast(<span class="keyword">new</span> StringDecoder());</span><br><span class="line">                           pipeline.addLast(<span class="keyword">new</span> StringEncoder());</span><br><span class="line">                           pipeline.addLast(<span class="keyword">new</span> HelloServeHandle());</span><br><span class="line">                           pipeline.addLast(<span class="keyword">new</span> TestInboundHandler());</span><br><span class="line">                           pipeline.addLast(<span class="keyword">new</span> TestOutBoundHandler());                        &#125;</span><br><span class="line">                   &#125;);</span><br></pre></td></tr></table></figure><p>将重写后的的流量整形处理器加入到netty的管道中，处理器的三个参数分别代表平均每秒读取10个字节，平均每秒发送100个字节，TrafficCounter每秒统计一次，最大读写等待时间为10秒。</p><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>通过日志可以看到netty的流量控制的确是我们分析的那样，先读取一段数据然后暂停读取，发送数据也是先将数据存放到消息队列，然后开启定时任务去发送数据。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Netty4使用指南-三-流量控制&quot;&gt;&lt;a href=&quot;#Netty4使用指南-三-流量控制&quot; class=&quot;headerlink&quot; title=&quot;Netty4使用指南(三) 流量控制&quot;&gt;&lt;/a&gt;Netty4使用指南(三) 流量控制&lt;/h2&gt;&lt;h3 id=&quot;概述&quot;
      
    
    </summary>
    
    
      <category term="Netty" scheme="https://hkj141421.github.io/categories/Netty/"/>
    
    
      <category term="Netty" scheme="https://hkj141421.github.io/tags/Netty/"/>
    
  </entry>
  
  <entry>
    <title>广度优先搜索算法</title>
    <link href="https://hkj141421.github.io/2020/05/09/%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2%E7%AE%97%E6%B3%95/"/>
    <id>https://hkj141421.github.io/2020/05/09/%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2%E7%AE%97%E6%B3%95/</id>
    <published>2020-05-09T08:14:37.000Z</published>
    <updated>2020-05-09T09:10:07.914Z</updated>
    
    <content type="html"><![CDATA[<h2 id="广度优先算法"><a href="#广度优先算法" class="headerlink" title="广度优先算法"></a>广度优先算法</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>广度优先算法是一种用于解决寻找最短路径的图形搜索算法。通过展开图中的所有节点来查找结果。</p><p>搜索步骤一般为：</p><ol><li>找出当前起点的所有邻居节点，加入队列中。</li><li>从队列中取出节点，判断是否为终点，如果是则停止搜索，返回该节点。否则将该节点的邻近节点加入搜索队列中。</li><li>重复第二个步骤，直到队列为空或找到终点。</li></ol><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p><strong>该算法找出最短路径的原理是它将所有的节点根据相对于起点的距离划分为多级关系网，即起点的邻居节点、邻居节点的邻居节点等待，然后依次向下遍历每一个关系网。所以只要起点存在到达终点的路径，算法就必定能找出最短路径。注意由于广度优先算法判定最短路径的依据是走过的节点数量最少，因此如果节点之间的距离不是固定的，即是节点之间的边具有权重的，则算法无法找出最短路径。</strong></p><h3 id="举例说明"><a href="#举例说明" class="headerlink" title="举例说明"></a>举例说明</h3><p>下图是小明出去春游地图，他要从起点到达终点，我们运用广度优先搜索算法来分析一下，如何找出最短路径。</p><p><img src="/" class="lazyload" data-src="/2020/05/09/%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2%E7%AE%97%E6%B3%95/45df9b52f92938790f4223ffd7859f3f.png"  alt></p><ol><li>搜索起点的邻居节点，这里起点的邻居节点有三马山、万寿山、天河大桥，我们将这些节点加入搜索队列。这里最好是使用队列装载这些节点，因为你必须保证先搜索完距离起点最近的邻居节点，然后再逐步搜索拓展节点，只有这样你才能找到最短路径。</li></ol><p><img src="/" class="lazyload" data-src="/2020/05/09/%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2%E7%AE%97%E6%B3%95/e6bac1268add86e70743e97c7dc94a01.png"  alt></p><ol start="2"><li>取出搜索队列中的三马山、万寿山、天河大桥，发现都不是终点。于是搜索这些节点的邻居节点，将其加入搜索队列。<br>此时我们会发现三马山和万寿山的邻居节点就是天河大桥，而天河大桥已经被检查过了，不需要重复检查。<br>因此我们可以给节点加一个检查属性，出队时判断该节点是否已检查，已检查则跳过，直接将邻居节点加入搜索队列。天河大桥的邻居节点是终点，将此节点加入队列。</li></ol><p><img src="/" class="lazyload" data-src="/2020/05/09/%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2%E7%AE%97%E6%B3%95/d47b876e00ec0f184ff1b013393ac470.png"  alt></p><ol start="3"><li>第二层关系网搜索，队列中有天河大桥、终点、天河大桥，三个节点。依次出队检查，天河大桥从队列出队，节点已检查，跳过判断，将邻居节点终点加入队列。终点节点出队，节点未被检查，节点就是终点，算法结束。</li></ol><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><p>要解决例子中的问题，我们首先要用代码描述问题的图，然后才能去解决。首先我们定义一个point类，代表地图上所有的地点</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">point</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">//节点信息</span></span><br><span class="line">    <span class="keyword">private</span> T label;</span><br><span class="line">    <span class="comment">//是否被访问</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> visited;</span><br><span class="line">    <span class="comment">//前置节点，用于回溯路径</span></span><br><span class="line">    <span class="keyword">private</span> point&lt;T&gt; prePoint;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">point</span><span class="params">(T label)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.label = label;</span><br><span class="line">        <span class="keyword">this</span>.visited=<span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">getLabel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> label;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLabel</span><span class="params">(T label)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.label = label;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isVisited</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> visited;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setVisited</span><span class="params">(<span class="keyword">boolean</span> visited)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.visited = visited;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> point&lt;T&gt; <span class="title">getPrePoint</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> prePoint;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPrePoint</span><span class="params">(point&lt;T&gt; prePoint)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.prePoint = prePoint;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"point&#123;"</span> +</span><br><span class="line">                <span class="string">"label="</span> + label +</span><br><span class="line">                <span class="string">", visited="</span> + visited +</span><br><span class="line">                <span class="string">", prePoint="</span> + prePoint +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义edge类描述边</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">edge</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//终点</span></span><br><span class="line">    <span class="keyword">private</span> point&lt;T&gt; endPoint;</span><br><span class="line">    <span class="comment">//边的权重</span></span><br><span class="line">    <span class="keyword">private</span> Integer weight;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">edge</span><span class="params">(point&lt;T&gt; endPoint)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(endPoint,<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">edge</span><span class="params">(point&lt;T&gt; endPoint, Integer weight)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.endPoint = endPoint;</span><br><span class="line">        <span class="keyword">this</span>.weight = weight;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> point&lt;T&gt; <span class="title">getEndPoint</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> endPoint;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEndPoint</span><span class="params">(point&lt;T&gt; endPoint)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.endPoint = endPoint;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getWeight</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> weight;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setWeight</span><span class="params">(Integer weight)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.weight = weight;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义chart类，描述每个节点的邻居节点</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">chart</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> point&lt;T&gt; start;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;edge&lt;T&gt;&gt; edgeList;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">chart</span><span class="params">(point&lt;T&gt; start)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(start,<span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">chart</span><span class="params">(point&lt;T&gt; start, edge&lt;T&gt; ... edgeList)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.start = start;</span><br><span class="line">        <span class="keyword">this</span>.edgeList=Arrays.stream(edgeList).collect(Collectors.&lt;edge&lt;T&gt;&gt;toList());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> point&lt;T&gt; <span class="title">getStart</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> start;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStart</span><span class="params">(point&lt;T&gt; start)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.start = start;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Iterator&lt;edge&lt;T&gt;&gt; getEdgeInterator()&#123;</span><br><span class="line">        <span class="keyword">return</span> edgeList!=<span class="keyword">null</span>?edgeList.iterator():<span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现广度优先搜索算法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> point&lt;String&gt; <span class="title">BFSearch</span><span class="params">(Map&lt;String,chart&lt;String&gt;&gt; chartList,point&lt;String&gt; start)</span></span>&#123;</span><br><span class="line">      Queue&lt;point&lt;String&gt;&gt; queue=<span class="keyword">new</span> ArrayDeque&lt;&gt;();</span><br><span class="line">      queue.add(start);</span><br><span class="line"></span><br><span class="line">      Integer count=<span class="number">0</span>;</span><br><span class="line">      <span class="keyword">while</span> (!queue.isEmpty())</span><br><span class="line">      &#123;</span><br><span class="line">          point&lt;String&gt; site=queue.poll();</span><br><span class="line">          count++;</span><br><span class="line">          <span class="comment">//判断出队的节点是否为终点</span></span><br><span class="line">          <span class="keyword">if</span>(site.getLabel().equals(<span class="string">"终点"</span>)) &#123;<span class="keyword">return</span> site;&#125;</span><br><span class="line">          <span class="comment">//取出该节点的邻居节点</span></span><br><span class="line"></span><br><span class="line">              Iterator&lt;edge&lt;String&gt;&gt; iterator= chartList.get(site.getLabel()).getEdgeInterator();</span><br><span class="line">              <span class="keyword">while</span> (iterator!=<span class="keyword">null</span>&amp;&amp;iterator.hasNext())&#123;</span><br><span class="line">                  edge&lt;String&gt; s=iterator.next();</span><br><span class="line">                  <span class="comment">//如果节点未入队，则加入搜索队列</span></span><br><span class="line">                  <span class="keyword">if</span>(!s.getEndPoint().isVisited())&#123;</span><br><span class="line">                      s.getEndPoint().setVisited(<span class="keyword">true</span>);</span><br><span class="line">                      s.getEndPoint().setPrePoint(site);</span><br><span class="line">                      queue.add(s.getEndPoint());</span><br><span class="line">                  &#125;</span><br><span class="line">              &#125;</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line">      System.out.println(<span class="string">"该地图不存在通往终点的路径"</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><h4 id="测试方法"><a href="#测试方法" class="headerlink" title="测试方法"></a>测试方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        Map&lt;String,chart&lt;String&gt;&gt; map=<span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        point&lt;String&gt; bridge=<span class="keyword">new</span> point&lt;String&gt;(<span class="string">"天河大桥"</span>);</span><br><span class="line">        point&lt;String&gt; threeHorse=<span class="keyword">new</span> point&lt;String&gt;(<span class="string">"三马山"</span>);</span><br><span class="line">        point&lt;String&gt; start=<span class="keyword">new</span> point&lt;String&gt;(<span class="string">"起点"</span>);</span><br><span class="line">        point&lt;String&gt; end=<span class="keyword">new</span> point&lt;String&gt;(<span class="string">"终点"</span>);</span><br><span class="line">        point&lt;String&gt; OneShou=<span class="keyword">new</span> point&lt;String&gt;(<span class="string">"万寿山"</span>);</span><br><span class="line"></span><br><span class="line">        edge&lt;String&gt; startToBridge=<span class="keyword">new</span> edge&lt;&gt;(bridge);</span><br><span class="line"><span class="comment">//        edge&lt;String&gt; BridgeToThree=new edge&lt;&gt;(threeHorse);</span></span><br><span class="line"><span class="comment">//        edge&lt;String&gt; threeToEnd=new edge&lt;&gt;(end);</span></span><br><span class="line">        edge&lt;String&gt; startTothreeHorese=<span class="keyword">new</span> edge&lt;&gt;(threeHorse);</span><br><span class="line">        edge&lt;String&gt; startToOneShou=<span class="keyword">new</span> edge&lt;&gt;(OneShou);</span><br><span class="line">        edge&lt;String&gt; BridgeToEnd=<span class="keyword">new</span> edge&lt;&gt;(end);</span><br><span class="line">        edge&lt;String&gt; threeToBridge=<span class="keyword">new</span> edge&lt;&gt;(bridge);</span><br><span class="line">        edge&lt;String&gt; OneToBridge=<span class="keyword">new</span> edge&lt;&gt;(bridge);</span><br><span class="line"></span><br><span class="line">        chart&lt;String&gt; one=<span class="keyword">new</span> chart&lt;String&gt;(start,startToBridge,startToOneShou);</span><br><span class="line">        chart&lt;String&gt; two=<span class="keyword">new</span> chart&lt;String&gt;(threeHorse,threeToBridge);</span><br><span class="line">        chart&lt;String&gt; three=<span class="keyword">new</span> chart&lt;String&gt;(OneShou,OneToBridge);</span><br><span class="line">        chart&lt;String&gt; four=<span class="keyword">new</span> chart&lt;String&gt;(bridge,BridgeToEnd);</span><br><span class="line"></span><br><span class="line">        map.put(one.getStart().getLabel(),one);map.put(two.getStart().getLabel(),two);map.put(three.getStart().getLabel(),three);map.put(four.getStart().getLabel(),four);</span><br><span class="line"></span><br><span class="line">        printRoute(BFSearch(map,start));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printRoute</span><span class="params">(point&lt;String&gt; point)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(point==<span class="keyword">null</span>)<span class="keyword">return</span>;</span><br><span class="line">        printRoute(point.getPrePoint());</span><br><span class="line">        System.out.println(point.getLabel());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h4><p><img src="/" class="lazyload" data-src="/2020/05/09/%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2%E7%AE%97%E6%B3%95/09f81b8fd1f34816cb7b3258e6c251b5.png"  alt></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>从上面的例子，我们可以看出广度优先算法实际上就是一种逐层遍历的方法，它适用于单向无权重的问题，可以用来解决寻找迷宫的出口、在人际关系中寻人、寻找到达目的地的最短距离路线等问题。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;广度优先算法&quot;&gt;&lt;a href=&quot;#广度优先算法&quot; class=&quot;headerlink&quot; title=&quot;广度优先算法&quot;&gt;&lt;/a&gt;广度优先算法&lt;/h2&gt;&lt;h3 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;
      
    
    </summary>
    
    
    
      <category term="算法" scheme="https://hkj141421.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Swagger框架的基本使用</title>
    <link href="https://hkj141421.github.io/2020/04/21/Swagger%E6%A1%86%E6%9E%B6%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
    <id>https://hkj141421.github.io/2020/04/21/Swagger%E6%A1%86%E6%9E%B6%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</id>
    <published>2020-04-21T12:43:57.000Z</published>
    <updated>2020-04-21T14:04:07.922Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Swagger是一款非常优秀的一款RESTFUL接口的文档在线自动生成-功能测试功能软件。它可以帮助我们快速生成一套优雅的API文档。"><a href="#Swagger是一款非常优秀的一款RESTFUL接口的文档在线自动生成-功能测试功能软件。它可以帮助我们快速生成一套优雅的API文档。" class="headerlink" title="Swagger是一款非常优秀的一款RESTFUL接口的文档在线自动生成+功能测试功能软件。它可以帮助我们快速生成一套优雅的API文档。"></a>Swagger是一款非常优秀的一款RESTFUL接口的文档在线自动生成+功能测试功能软件。它可以帮助我们快速生成一套优雅的API文档。</h3><h4 id="一、集成Swagger框架"><a href="#一、集成Swagger框架" class="headerlink" title="一、集成Swagger框架"></a>一、集成Swagger框架</h4><h6 id="SSM框架集成Swagger。"><a href="#SSM框架集成Swagger。" class="headerlink" title="SSM框架集成Swagger。"></a>SSM框架集成Swagger。</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;io.springfox&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;springfox-swagger2&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.9.2&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;io.springfox&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;springfox-swagger-ui&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.9.2&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><p>在POM文件中添加以上依赖。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;mvc:resources mapping&#x3D;&quot;swagger-ui.html&quot; location&#x3D;&quot;classpath:&#x2F;META-INF&#x2F;resources&#x2F;&quot;&gt;&lt;&#x2F;mvc:resources&gt;</span><br><span class="line"></span><br><span class="line">&lt;mvc:resources mapping&#x3D;&quot;&#x2F;webjars&#x2F;**&quot; location&#x3D;&quot;classpath:&#x2F;META-INF&#x2F;resources&#x2F;webjars&#x2F;&quot; &#x2F;&gt;</span><br></pre></td></tr></table></figure><p>在Spring的配置文件中添加以上配置,这两行配置用于放行Swagger的静态资源，防止被MVC拦截。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableSwagger</span>2</span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SwaggerConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Docket <span class="title">SwaggerDocket</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Docket docket=<span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2);</span><br><span class="line">        docket.select()</span><br><span class="line">                .apis(RequestHandlerSelectors.basePackage(<span class="string">"FrameWork.Controller"</span>))</span><br><span class="line">                .build()</span><br><span class="line">                .apiInfo(<span class="keyword">new</span> ApiInfoBuilder()</span><br><span class="line">                        .title(<span class="string">"SSM框架整合Swagger"</span>)</span><br><span class="line">                        .description(<span class="string">"整合测试使用"</span>).version(<span class="string">"1.0"</span>)</span><br><span class="line">                        .contact(<span class="keyword">new</span> Contact(<span class="string">"xxx"</span>,<span class="string">"127.0.0.1"</span>,<span class="string">"xxxxxxxxx@qq.com"</span>))</span><br><span class="line">                        .termsOfServiceUrl(<span class="string">"127.0.0.1/team"</span>).build());</span><br><span class="line">        <span class="keyword">return</span> docket;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Docket对象里可以配置一些文档的信息，@EnableSwagger2注解表示启用Swagger,@Configuration注解表示该类是个配置类。</p><p>到目前为止Swagger和SSM框架的集成就已经完成了，访问/swagger-ui.html路径测试框架是否集成成功。</p><h6 id="SpringBoot集成Swagger框架"><a href="#SpringBoot集成Swagger框架" class="headerlink" title="SpringBoot集成Swagger框架"></a>SpringBoot集成Swagger框架</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;io.springfox&lt;&#x2F;groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;springfox-swagger2&lt;&#x2F;artifactId&gt;</span><br><span class="line">  &lt;version&gt;2.9.2&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;io.springfox&lt;&#x2F;groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;springfox-swagger-ui&lt;&#x2F;artifactId&gt;</span><br><span class="line">  &lt;version&gt;2.9.2&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><p>第一步添加依赖到pom文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">@EnableSwagger2</span><br><span class="line">public class SpringBootConfiguration &#123;</span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    public Docket docket()&#123;</span><br><span class="line">        Docket docket&#x3D;new Docket(DocumentationType.SWAGGER_2);</span><br><span class="line">        docket.select()</span><br><span class="line">                .apis(RequestHandlerSelectors.basePackage(&quot;com.knight&quot;))</span><br><span class="line">                .build().apiInfo(new ApiInfoBuilder()</span><br><span class="line">                                .contact(new Contact(&quot;kinght&quot;,&quot;127.0.0.1&quot;,&quot;xxxxxxxxx@qq.com&quot;))</span><br><span class="line">                                .license(&quot;license&quot;)</span><br><span class="line">                                .title(&quot;API文档&quot;)</span><br><span class="line">                                .version(&quot;1&quot;)</span><br><span class="line">                                .description(&quot;测试swagger&quot;)</span><br><span class="line">                                .build());</span><br><span class="line">        return docket;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第二步配置Docket 对象信息。</p><p>到此SpringBoot集成Swagger框架就成功了。不过我在集成到SpringBoot的过程中碰到了一个问题，每次访问/swagger-ui.html路径时，控制台都会报错。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java.lang.NumberFormatException: For input string: <span class="string">""</span></span><br></pre></td></tr></table></figure><p>百度了一下，这貌似是Swagger2.9.0本身的一个BUG,添加以下依赖就可以解决了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;io.swagger&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;swagger-annotations&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.5.22&lt;&#x2F;version&gt;</span><br><span class="line">  &lt;&#x2F;dependency&gt;</span><br><span class="line">  &lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;io.swagger&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;swagger-models&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.5.22&lt;&#x2F;version&gt;</span><br><span class="line">  &lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><p>二、框架的基本使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Api</span>(tags = <span class="string">"管理用户"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"/register"</span>)</span><br><span class="line">    <span class="meta">@ApiOperation</span>(<span class="string">"注册用户"</span>)</span><br><span class="line">    <span class="meta">@ApiImplicitParams</span>(&#123;<span class="meta">@ApiImplicitParam</span>(name=<span class="string">"request"</span>,value = <span class="string">"http请求"</span>)&#125;)</span><br><span class="line">    <span class="meta">@ApiResponse</span>(code = <span class="number">401</span>,message = <span class="string">"拒绝访问，没有登录"</span>,examples=<span class="meta">@Example</span>(&#123;<span class="meta">@ExampleProperty</span>(value = <span class="string">"12"</span>,mediaType = <span class="string">"application/json"</span>)&#125;))</span><br><span class="line">    <span class="function"><span class="keyword">public</span> AjaxResponse <span class="title">register</span><span class="params">(HttpServletRequest request)</span> <span class="keyword">throws</span> UnsupportedEncodingException </span>&#123;</span><br><span class="line"></span><br><span class="line">        String code=<span class="string">"123456"</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!code.equals(code))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> AjaxResponse(<span class="string">"300"</span>,<span class="string">"验证码错误"</span>,<span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        User u=userService.findUserByAccount(request.getParameter(<span class="string">"account"</span>));</span><br><span class="line">        <span class="keyword">if</span>(u!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> AjaxResponse(<span class="string">"300"</span>,<span class="string">"账号已存在"</span>,<span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        User user=<span class="keyword">new</span> User();</span><br><span class="line"></span><br><span class="line">        user.setAccont(request.getParameter(<span class="string">"account"</span>));</span><br><span class="line">        user.setPassword(request.getParameter(<span class="string">"password"</span>));</span><br><span class="line">        user.setPortrait(<span class="string">"images/headImg01.jpg"</span>);</span><br><span class="line">        user.setName(<span class="string">"用户"</span>+System.currentTimeMillis());</span><br><span class="line">        user.setCrationDate(<span class="keyword">new</span> Timestamp(System.currentTimeMillis()));</span><br><span class="line">        user.setLastLoginTime(<span class="keyword">new</span> Timestamp(System.currentTimeMillis()));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">boolean</span> status=userService.register(user);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(status)&#123;</span><br><span class="line">            HashMap&lt;String,Object&gt; res=<span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">            res.put(<span class="string">"token"</span>, JWTUtil.generateToken(user));</span><br><span class="line">            res.put(<span class="string">"user"</span>,user);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> AjaxResponse(<span class="string">"200"</span>,<span class="string">"注册成功"</span>,res);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> AjaxResponse(<span class="string">"500"</span>,<span class="string">"注册失败"</span>,<span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/login"</span>)</span><br><span class="line">    <span class="meta">@ApiOperation</span>(<span class="string">"登录接口"</span>)</span><br><span class="line">    <span class="meta">@ApiImplicitParams</span>(&#123;<span class="meta">@ApiImplicitParam</span>(name=<span class="string">"account"</span>,value = <span class="string">"账户名"</span>,required = <span class="keyword">true</span>,defaultValue = <span class="string">"123456"</span>)</span><br><span class="line">            ,<span class="meta">@ApiImplicitParam</span>(name=<span class="string">"password"</span>,value=<span class="string">"密码"</span>,required = <span class="keyword">true</span>,defaultValue = <span class="string">"acbabsjcbas"</span>)&#125;)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> AjaxResponse <span class="title">login</span><span class="params">(String account, String password)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        User user=userService.login(account,password);</span><br><span class="line">        List&lt;Object&gt; list=<span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span>(user!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            list=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">            list.add(user);</span><br><span class="line">            Map&lt;String,String&gt; token=<span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">            token.put(<span class="string">"token"</span>,JWTUtil.generateToken(user));</span><br><span class="line">            list.add(token);</span><br><span class="line">        &#125;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">new</span> AjaxResponse(<span class="string">"200"</span>,<span class="string">"success"</span>,list);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ApiModel</span>(description = <span class="string">"响应格式"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AjaxResponse</span> <span class="keyword">implements</span> <span class="title">Serializable</span></span>&#123;</span><br><span class="line">    <span class="meta">@ApiModelProperty</span>(<span class="string">"状态码"</span>)</span><br><span class="line">    <span class="keyword">private</span> String code;</span><br><span class="line">    <span class="meta">@ApiModelProperty</span>(<span class="string">"返回消息"</span>)</span><br><span class="line">    <span class="keyword">private</span> String msg;</span><br><span class="line">    <span class="meta">@ApiModelProperty</span>(<span class="string">"响应数据"</span>)</span><br><span class="line">    <span class="keyword">private</span> Object data;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCode</span><span class="params">(String code)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.code = code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMsg</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> msg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMsg</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.msg = msg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getData</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setData</span><span class="params">(Object data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AjaxResponse</span><span class="params">(String code, String msg, Object data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.code = code;</span><br><span class="line">        <span class="keyword">this</span>.msg = msg;</span><br><span class="line">        <span class="keyword">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AjaxResponse</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>@Api注解用于标识控制器。</li><li>@ApiOperation注解用于标识Api接口</li><li>@ApiImplicitParams注解用于描述多个输入参数</li><li>@ApiImplicitParam注解踊跃描述的单个输入参数，可以单独使用</li><li>@ApiResponse注解用于标识响应格式</li><li>@ApiModel注解描述实体类，但只有当被标识的实体类作为返回参数时才会显示到文档中。</li><li>@ApiModelProperty注解描述实体类属性</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Swagger是一款非常优秀的一款RESTFUL接口的文档在线自动生成-功能测试功能软件。它可以帮助我们快速生成一套优雅的API文档。&quot;&gt;&lt;a href=&quot;#Swagger是一款非常优秀的一款RESTFUL接口的文档在线自动生成-功能测试功能软件。它可以帮助我们快
      
    
    </summary>
    
    
    
      <category term="Swagger 测试" scheme="https://hkj141421.github.io/tags/Swagger-%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>WebService的基本概念及使用</title>
    <link href="https://hkj141421.github.io/2020/04/21/WebService%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5%E5%8F%8A%E4%BD%BF%E7%94%A8/"/>
    <id>https://hkj141421.github.io/2020/04/21/WebService%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5%E5%8F%8A%E4%BD%BF%E7%94%A8/</id>
    <published>2020-04-21T12:43:57.000Z</published>
    <updated>2020-04-21T13:52:36.206Z</updated>
    
    <content type="html"><![CDATA[<p>WebService是一种遵循soap协议进行通信的远程调用技术。它具有跨平台，低耦合的特点。</p><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><ol><li>SOAP协议即（Simple Object Access Protocol）简单对象访问协议，它是一种基于xml的通信协议，用于描述信息的格式。</li><li>WSDL即（Web Services Description Language）web服务描述语言，它用于描述webservice的具体形式，如通信协议，数据格式，调用方法等。</li><li>UDDI是一种用于描述、发现、集成Web Service的技术，它是Web Service协议栈的一个重要部分。通过UDDI，企业可以根据自己的需要动态查找并使用Web服务，也可以将自己的Web服务动态地发布到UDDI注册中心，供其他用户使用。</li></ol><h3 id="WebService的基本原理"><a href="#WebService的基本原理" class="headerlink" title="WebService的基本原理"></a>WebService的基本原理</h3><ol><li><p>Service Provider采用WSDL描述服务。</p></li><li><p>Service Provider 采用UDDI将服务的描述文件发布到UDDI服务器（Register server）。</p></li><li><p>Service Requestor在UDDI服务器上查询并 获取WSDL文件。</p></li><li><p>Service requestor将请求绑定到SOAP，并访问相应的服务。</p></li></ol><h3 id="WebService的优点"><a href="#WebService的优点" class="headerlink" title="WebService的优点"></a>WebService的优点</h3><ol><li>可以跨平台，无论用户使用什么语言，什么系统，只要能读取xml就可以进行通信</li><li>由于使用soap协议进行通信，数据是以ASCII字符而非二进制进行传输，调试非常方便</li><li>松耦合</li></ol><h3 id="WebService的缺点"><a href="#WebService的缺点" class="headerlink" title="WebService的缺点"></a>WebService的缺点</h3><ol><li>由于soap协议是采用xml进行传输，因此会增加数据的传输量</li></ol><h3 id="SpringBoot集成CXF发布WebService"><a href="#SpringBoot集成CXF发布WebService" class="headerlink" title="SpringBoot集成CXF发布WebService"></a>SpringBoot集成CXF发布WebService</h3><p>第一步，添加依赖</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">  &lt;dependencyManagement&gt;</span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">      &lt;dependency&gt;</span><br><span class="line">        &lt;!-- Import dependency management from Spring Boot --&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-dependencies&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;version&gt;$&#123;spring.boot.version&#125;&lt;&#x2F;version&gt;</span><br><span class="line">        &lt;type&gt;pom&lt;&#x2F;type&gt;</span><br><span class="line">        &lt;scope&gt;import&lt;&#x2F;scope&gt;</span><br><span class="line">      &lt;&#x2F;dependency&gt;</span><br><span class="line">    &lt;&#x2F;dependencies&gt;</span><br><span class="line">  &lt;&#x2F;dependencyManagement&gt;</span><br><span class="line">  </span><br><span class="line">&lt;dependencies&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.apache.cxf&lt;&#x2F;groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;cxf-spring-boot-starter-jaxws&lt;&#x2F;artifactId&gt;</span><br><span class="line">      &lt;version&gt;3.2.5&lt;&#x2F;version&gt;</span><br><span class="line">    &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;spring-boot-starter-web-services&lt;&#x2F;artifactId&gt;</span><br><span class="line">      &lt;scope&gt;test&lt;&#x2F;scope&gt;</span><br><span class="line">    &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">  &lt;&#x2F;dependencies&gt;</span><br></pre></td></tr></table></figure><p>第二步 编写服务类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebService</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AdminService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@WebMethod</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayhi</span><span class="params">(@WebParam(name = <span class="string">"name"</span>)</span> String name)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hi "</span>+name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebService</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@WebMethod</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getInfo</span><span class="params">(@WebParam(name = <span class="string">"name"</span>)</span> String name) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello "</span>+name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第三步 发布服务</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.forget.cxf.webservice.Impl.AdminService;</span><br><span class="line"><span class="keyword">import</span> com.forget.cxf.webservice.Impl.UserServiceImpl;</span><br><span class="line"><span class="keyword">import</span> org.apache.cxf.Bus;</span><br><span class="line"><span class="keyword">import</span> org.apache.cxf.bus.spring.SpringBus;</span><br><span class="line"><span class="keyword">import</span> org.apache.cxf.jaxws.EndpointImpl;</span><br><span class="line"><span class="keyword">import</span> org.apache.cxf.transport.servlet.CXFServlet;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.web.servlet.ServletRegistrationBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.xml.ws.Endpoint;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by forget on 2019/11/19.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BootConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Bus bus;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Endpoint <span class="title">endpoint</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Endpoint endpoint= <span class="keyword">new</span> EndpointImpl(bus,<span class="keyword">new</span> UserServiceImpl());</span><br><span class="line">        endpoint.publish(<span class="string">"/user"</span>);</span><br><span class="line">        <span class="keyword">return</span> endpoint;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Endpoint <span class="title">endpoint2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Endpoint endpoint= <span class="keyword">new</span> EndpointImpl(bus,<span class="keyword">new</span> AdminService());</span><br><span class="line">        endpoint.publish(<span class="string">"/admin"</span>);</span><br><span class="line">        <span class="keyword">return</span> endpoint;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    @Bean</span></span><br><span class="line"><span class="comment">//    public SpringBus cxf()&#123;</span></span><br><span class="line"><span class="comment">//        return new SpringBus();</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果需要自定义webservice发布在哪个路径，则在springboot的配置文件中添加以下配置即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cxf:</span><br><span class="line">  path: &#x2F;cxfservices</span><br></pre></td></tr></table></figure><p>UserServiceImpl服务的测试地址为：<a href="http://localhost:8080/cxfservices/user" target="_blank" rel="noopener">http://localhost:8080/cxfservices/user</a></p><h3 id="客户端调用"><a href="#客户端调用" class="headerlink" title="客户端调用"></a>客户端调用</h3><p>客户端有两种调用方式，1.使用代码生成工具，通过wsdl生成客户端代码，2.直接通过http协议进行调用。</p><p>第一种方法，可以通过以下步骤进行调用：</p><ol><li>使用jdk代码生成工具，在项目的src目录下，执行以下命令<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsimport -keep -d D:\temp\d -s D:\temp\s -p com.map -verbose http:&#x2F;&#x2F;ws.webxml.com.cn&#x2F;WebServices&#x2F;MobileCodeWS.asmx?wsdl</span><br></pre></td></tr></table></figure></li><li>像本地方法一样调用webservice<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">UserServiceImplService userServiceImplService=<span class="keyword">new</span> UserServiceImplService();</span><br><span class="line">String res=userServiceImplService.getUserServiceImplPort().getInfo(<span class="string">"1212"</span>);</span><br><span class="line">System.out.println(<span class="string">"调用结果："</span>+res);</span><br></pre></td></tr></table></figure></li></ol><p>第二种方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">URL url=<span class="keyword">new</span> URL(<span class="string">"http://localhost:8080/cxfservices/admin"</span>);</span><br><span class="line">        HttpURLConnection connection=(HttpURLConnection) url.openConnection();</span><br><span class="line">        connection.setRequestMethod(<span class="string">"POST"</span>);</span><br><span class="line"></span><br><span class="line">        connection.setDoInput(<span class="keyword">true</span>);</span><br><span class="line">        connection.setDoOutput(<span class="keyword">true</span>);</span><br><span class="line">        connection.setRequestProperty(<span class="string">"Content-Type"</span>,<span class="string">"text/xml; charset=ISO-8859-1"</span>);</span><br><span class="line"></span><br><span class="line">        String body=<span class="string">"&lt;soap:Envelope xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\"&gt;\n"</span> +</span><br><span class="line">                <span class="string">"    &lt;soap:Body&gt;\n"</span> +</span><br><span class="line">                <span class="string">"    \t&lt;tns:sayhi xmlns:tns=\"http://Impl.webservice.cxf.forget.com/\"&gt;\n"</span> +</span><br><span class="line">                <span class="string">"    \t\t&lt;name&gt;knscsc&lt;/name&gt;\n"</span> +</span><br><span class="line">                <span class="string">"    \t&lt;/tns:sayhi&gt;\n"</span> +</span><br><span class="line">                <span class="string">"    &lt;/soap:Body&gt;\n"</span> +</span><br><span class="line">                <span class="string">"&lt;/soap:Envelope&gt;"</span>;</span><br><span class="line"></span><br><span class="line">         connection.getOutputStream().write(body.getBytes());</span><br><span class="line"></span><br><span class="line">         connection.connect();</span><br><span class="line"></span><br><span class="line">         String res=connection.getResponseMessage();</span><br><span class="line">         InputStreamReader inputStreamReader=<span class="keyword">new</span> InputStreamReader(connection.getInputStream());</span><br><span class="line">         BufferedReader reader=<span class="keyword">new</span> BufferedReader(inputStreamReader);</span><br><span class="line">         String s=<span class="keyword">null</span>;</span><br><span class="line">         <span class="keyword">while</span> ((s=reader.readLine())!=<span class="keyword">null</span>)</span><br><span class="line">         &#123;</span><br><span class="line">             System.out.println(s);</span><br><span class="line">         &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;WebService是一种遵循soap协议进行通信的远程调用技术。它具有跨平台，低耦合的特点。&lt;/p&gt;
&lt;h3 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;SOAP协议即（S
      
    
    </summary>
    
    
    
      <category term="WebService" scheme="https://hkj141421.github.io/tags/WebService/"/>
    
  </entry>
  
  <entry>
    <title>日常踩坑系列（一）</title>
    <link href="https://hkj141421.github.io/2020/04/21/%E6%97%A5%E5%B8%B8%E8%B8%A9%E5%9D%91%E7%B3%BB%E5%88%97%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>https://hkj141421.github.io/2020/04/21/%E6%97%A5%E5%B8%B8%E8%B8%A9%E5%9D%91%E7%B3%BB%E5%88%97%EF%BC%88%E4%B8%80%EF%BC%89/</id>
    <published>2020-04-21T12:43:57.000Z</published>
    <updated>2020-04-21T14:04:55.525Z</updated>
    
    <content type="html"><![CDATA[<h1 id="日常踩坑系列（一）"><a href="#日常踩坑系列（一）" class="headerlink" title="日常踩坑系列（一）"></a>日常踩坑系列（一）</h1><p>记录生活中碰到的大大小小的坑，避免下次犯同样的错误。</p><h2 id="1-AOP实现自定义注解"><a href="#1-AOP实现自定义注解" class="headerlink" title="1. AOP实现自定义注解"></a>1. AOP实现自定义注解</h2><p>使用过滤器的时候想排除某些路径，但是网上搜了一下，好像没有这个功能，只能手动判断路径。我想更方便的使用，所有就准备自定义一个注解，实现排除路径的功能。</p><h5 id="定义注解"><a href="#定义注解" class="headerlink" title="定义注解"></a>定义注解</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target</span>(ElementType.METHOD)</span><br><span class="line"><span class="meta">@Retention</span>(value = RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> ExcludeReqPath &#123;</span><br><span class="line">    <span class="keyword">public</span> String[] path();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 1.@Target用来修饰注解，是注解的注解，称为元注解,表示当前定义的注解可以用在什么地方,类，方法或字段等。<br> 2. @Retention也是元注解，表示定义的注解的生命周期。RetentionPolicy.SOURCE说明注解只保留在源文件，不会被编译成class文件。RetentionPolicy.CLASS说明注解会被编译成class文件，但运行时不存在。RetentionPolicy.RUNTIME说明注解会一直存在。<br> 3. @Inherited是元注解，表示定义的注解可以被继承，即被定义的注解加在A类上，B类继承A类时会将被@Inherited标识过的注解一起继承。<br> 4. @Documented表示该注解会被javadoc之类的工具记录，默认情况下javadoc不会记录注解。</p><h5 id="AOP实现注解的功能"><a href="#AOP实现注解的功能" class="headerlink" title="AOP实现注解的功能"></a>AOP实现注解的功能</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.knight.Utils.Annotation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONObject;</span><br><span class="line"><span class="keyword">import</span> com.knight.Bean.AjaxResponse;</span><br><span class="line"><span class="keyword">import</span> com.knight.Utils.MatchUtil;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.JoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.ProceedingJoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.*;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.reflect.MethodSignature;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.context.request.RequestContextHolder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.FilterChain;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletResponse;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by forget on 2019/9/8.</span></span><br><span class="line"><span class="comment"> * 实现ExcludeReqPath注解</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HandleExcludeReqPath</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Pointcut</span>(<span class="string">"@annotation(com.knight.Utils.Annotation.ExcludeReqPath)"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleAnnotation</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Around</span>(<span class="string">"handleAnnotation()"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">AroundHandler</span><span class="params">(ProceedingJoinPoint point)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">boolean</span> pass=<span class="keyword">false</span>;</span><br><span class="line">        Object object=<span class="keyword">null</span>;</span><br><span class="line">        HttpServletResponse response=<span class="keyword">null</span>;</span><br><span class="line">        HttpServletRequest request=<span class="keyword">null</span>;</span><br><span class="line">        FilterChain chain=<span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">for</span> (Object o:point.getArgs()) &#123;</span><br><span class="line">            <span class="keyword">if</span>(o <span class="keyword">instanceof</span> ServletRequest)</span><br><span class="line">            &#123;</span><br><span class="line">                request= (HttpServletRequest) o;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(o <span class="keyword">instanceof</span> ServletResponse)</span><br><span class="line">            &#123;</span><br><span class="line">                response= (HttpServletResponse) o;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(o <span class="keyword">instanceof</span> FilterChain)</span><br><span class="line">            &#123;</span><br><span class="line">                chain= (FilterChain) o;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        String path=request.getServletPath();</span><br><span class="line">        Class tag=point.getTarget().getClass();</span><br><span class="line">        <span class="keyword">for</span> (Method m:tag.getMethods()) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(m.getName().equals(<span class="string">"doFilter"</span>))</span><br><span class="line">            &#123;</span><br><span class="line">                String[] args=m.getAnnotation(ExcludeReqPath<span class="class">.<span class="keyword">class</span>).<span class="title">path</span>()</span>;</span><br><span class="line">                <span class="comment">//匹配请求路径的方法</span></span><br><span class="line">                pass = MatchUtil.MatchPath(path,args);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(pass)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//路径匹配通过，跳过当前过滤器</span></span><br><span class="line">            chain.doFilter(request,response);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            object= point.proceed();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> object;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>使用@Pointcut注解定义切点，参数@annotation用于匹配当前执行方法持有指定注解的方法。</li><li>通过ProceedingJoinPoint类型的参数获得被注解的对象及执行方法的参数。然后获取注解的参数，校验请求路径是否被排除。如果匹配成功，则不执行目标方法。直接在目标方法的响应参数中，返回处理结果。</li></ol><h2 id="2-无法查询到数据"><a href="#2-无法查询到数据" class="headerlink" title="2.无法查询到数据"></a>2.无法查询到数据</h2><p>碰到一个很隐蔽的坑，找了一晚上才找到。使用mybatis查询远程数据库的数据，一直查询不到数据。多次检查代码都没有发现问题。并且连接查询本地数据库可以正常查询到数据。最终排查发现只有带有中文的关键词不能查询到数据，初步确定是字符集的问题，查看了两个数据库的编码集，果然发现两个数据库的编码集不一致，远程数据库的编码集并不是UTF8。</p><h4 id="解决办法：修改远程数据库的字符集编码。"><a href="#解决办法：修改远程数据库的字符集编码。" class="headerlink" title="解决办法：修改远程数据库的字符集编码。"></a>解决办法：修改远程数据库的字符集编码。</h4><p>修改数据库的配置文件<br>ubuntu环境下Mysql5.7版本可以执行以下命令打开配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim &#x2F;etc&#x2F;mysql&#x2F;mysql.conf.d&#x2F;mysqld.cnf</span><br></pre></td></tr></table></figure><p>在[mysqld]下添加一下代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">character-set-server&#x3D;utf8</span><br></pre></td></tr></table></figure><p>最后重启数据库即可。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;日常踩坑系列（一）&quot;&gt;&lt;a href=&quot;#日常踩坑系列（一）&quot; class=&quot;headerlink&quot; title=&quot;日常踩坑系列（一）&quot;&gt;&lt;/a&gt;日常踩坑系列（一）&lt;/h1&gt;&lt;p&gt;记录生活中碰到的大大小小的坑，避免下次犯同样的错误。&lt;/p&gt;
&lt;h2 id=&quot;1-A
      
    
    </summary>
    
    
    
      <category term="日常" scheme="https://hkj141421.github.io/tags/%E6%97%A5%E5%B8%B8/"/>
    
  </entry>
  
  <entry>
    <title>Https基础</title>
    <link href="https://hkj141421.github.io/2020/04/21/Https%E5%9F%BA%E7%A1%80/"/>
    <id>https://hkj141421.github.io/2020/04/21/Https%E5%9F%BA%E7%A1%80/</id>
    <published>2020-04-21T12:43:57.000Z</published>
    <updated>2020-04-21T13:54:52.301Z</updated>
    
    <content type="html"><![CDATA[<h3 id="https是一种安全为目的的http通道，在http的基础上通过传输加密和身份认证保证了传输过程的安全性。HTTPS-主要由两部分组成：HTTP-SSL-TLS，也就是在-HTTP-上又加了一层处理加密信息的模块。服务端和客户端的信息传输都会通过-TLS-进行加密，所以传输的数据都是加密后的数据。"><a href="#https是一种安全为目的的http通道，在http的基础上通过传输加密和身份认证保证了传输过程的安全性。HTTPS-主要由两部分组成：HTTP-SSL-TLS，也就是在-HTTP-上又加了一层处理加密信息的模块。服务端和客户端的信息传输都会通过-TLS-进行加密，所以传输的数据都是加密后的数据。" class="headerlink" title="https是一种安全为目的的http通道，在http的基础上通过传输加密和身份认证保证了传输过程的安全性。HTTPS 主要由两部分组成：HTTP + SSL / TLS，也就是在 HTTP 上又加了一层处理加密信息的模块。服务端和客户端的信息传输都会通过 TLS 进行加密，所以传输的数据都是加密后的数据。"></a>https是一种安全为目的的http通道，在http的基础上通过传输加密和身份认证保证了传输过程的安全性。HTTPS 主要由两部分组成：HTTP + SSL / TLS，也就是在 HTTP 上又加了一层处理加密信息的模块。服务端和客户端的信息传输都会通过 TLS 进行加密，所以传输的数据都是加密后的数据。</h3><h5 id="HTTP与HTTPS的区别"><a href="#HTTP与HTTPS的区别" class="headerlink" title="HTTP与HTTPS的区别"></a>HTTP与HTTPS的区别</h5><p>1.http的传输方式是明文传输，https则是加密传输。<br>2.http通过TCP三次握手建立连接时中间不需要认证。https则需要通过证书的认证才能成功建立连接。<br>3.http的传输过程中可能被劫持篡改数据，而https则通过公钥的不对称加密，防止了数据被篡改</p><h5 id="HTTPS的加密通信原理"><a href="#HTTPS的加密通信原理" class="headerlink" title="HTTPS的加密通信原理"></a>HTTPS的加密通信原理</h5><p>服务器与客户端通信时会发放一个公钥用于客户端加密传输给服务器的数据，客户端选择一个对称加密算法和秘钥，并将它们用公钥加密发送给服务器。服务器接收到加密的数据后会使用私钥进行解密，这个私钥只保存在服务器，不会外泄出去。当服务器需要发送数据给客户端时，就会按照与客户端事先约定好的对称加密算法和客户端密钥对发送的数据进行加密。这样当客户端收到数据时就可以利用客户端的秘钥进行解密了。在建立连接的过程中为了防止有人冒充服务器的公钥，从而达到窃取数据的目的，通常会采用CA（第三方认证机构）证书的方式，保证客户端得到的公钥是正确的服务器公钥。</p><h5 id="CA证书"><a href="#CA证书" class="headerlink" title="CA证书"></a>CA证书</h5><p>CA是负责签发，认证数字证书的权威机构。CA证书是用来确保客户端得到的公钥是他想要请求的服务器的公钥，保证了没有黑客冒充服务器公钥。</p><h5 id="使用openssl生成证书"><a href="#使用openssl生成证书" class="headerlink" title="使用openssl生成证书"></a>使用openssl生成证书</h5><p>ubuntu自带openssl，可以直接运行以下命令。window系统需要自行安装，进入openssl命令执行以下命令，执行时去掉openssl</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">openssl genrsa -out rootkey.pem 2048</span><br><span class="line">生成根证书的密匙。</span><br><span class="line">openssl req -x509 -new -key rootkey.pem -out root.crt</span><br><span class="line">生成根证书。注意-x509，与步骤4和7不同。需要输入机构相关信息。</span><br><span class="line">openssl genrsa -out clientkey.pem 2048</span><br><span class="line">生成客户端的密匙。</span><br><span class="line">openssl req -new -key clientkey.pem -out client.csr </span><br><span class="line">生成客户端证书的请求文件。请求根证书来签发。</span><br><span class="line">openssl x509 -req -in client.csr -CA root.crt -CAkey rootkey.pem -CAcreateserial -days 3650 -out client.crt</span><br><span class="line">用根证书来签发客户端请求文件，生成客户端证书client.crt。</span><br><span class="line">openssl genrsa -out serverkey.pem 2048</span><br><span class="line">生成服务器端的密匙。</span><br><span class="line">openssl req -new -key serverkey.pem -out server.csr</span><br><span class="line">生成服务器端证书的请求文件。请求根证书来签发。</span><br><span class="line">openssl x509 -req -in server.csr -CA root.crt -CAkey rootkey.pem -CAcreateserial -days 3650 -out server.crt</span><br><span class="line">用根证书来签发服务器端请求文件，生成服务器端证书server.crt。</span><br><span class="line">openssl pkcs12 -export -in client.crt -inkey clientkey.pem -out client.pkcs12</span><br><span class="line">打包客户端数据为pkcs12格式(client.pkcs12)。需要输入密码，请记住。</span><br><span class="line">openssl pkcs12 -export -in server.crt -inkey serverkey.pem -out server.pkcs12</span><br><span class="line">打包服务器端数据为pkcs12格式(server.pkcs12 )。需要输入密码，请记住。</span><br></pre></td></tr></table></figure><p>下面这一步不是必须的，可不做。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">keytool -importkeystore -srckeystore client.pkcs12 -destkeystore client.jks -srcstoretype pkcs12</span><br><span class="line">生成客户端keystore(client.jks)。使用keytool的importkeystore指令。pkcs12转jks。需要pkcs12密码和jks密码。</span><br><span class="line">keytool -importkeystore -srckeystore server.pkcs12 -destkeystore server.jks -srcstoretype pkcs12</span><br><span class="line">生成服务器端keystore(server.jks)。使用keytool的importkeystore指令。pkcs12转jks。需要pkcs12密码和jks密码。</span><br><span class="line">keytool -importcert -keystore server.jks -file root.crt</span><br><span class="line">这一步不一定需要的。我发现服务器使用JDK6和JDK7的时候，必须要把根证书加到服务器证书里面，否则交谈失败。nul certification。Google里面很多结果，但是都不灵光。</span><br></pre></td></tr></table></figure><h5 id="在springboot中配置ssl"><a href="#在springboot中配置ssl" class="headerlink" title="在springboot中配置ssl"></a>在springboot中配置ssl</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">  ssl:</span><br><span class="line">    key-store: classpath:server.pkcs12</span><br><span class="line">    key-store-type: PKCS12</span><br><span class="line">    key-store-password: xxxxx</span><br></pre></td></tr></table></figure><p>下面配置将http自动跳转到https</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ServletWebServerFactory <span class="title">servletWebServerFactory</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    TomcatServletWebServerFactory tomcat=<span class="keyword">new</span> TomcatServletWebServerFactory ();</span><br><span class="line">    tomcat.addContextCustomizers(<span class="keyword">new</span> TomcatContextCustomizer() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">customize</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">            SecurityConstraint securityConstraint=<span class="keyword">new</span> SecurityConstraint();</span><br><span class="line">            securityConstraint.setUserConstraint(<span class="string">"CONFIDENTIAL"</span>);</span><br><span class="line">            SecurityCollection collection=<span class="keyword">new</span> SecurityCollection();</span><br><span class="line">            collection.addPattern(<span class="string">"/*"</span>);</span><br><span class="line">            securityConstraint.addCollection(collection);</span><br><span class="line">            context.addConstraint(securityConstraint);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    tomcat.addAdditionalTomcatConnectors(connector());</span><br><span class="line">    <span class="keyword">return</span> tomcat;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Connector <span class="title">connector</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    Connector connector=<span class="keyword">new</span> Connector(<span class="string">"org.apache.coyote.http11.Http11NioProtocol"</span>);</span><br><span class="line">    connector.setPort(<span class="number">8044</span>);</span><br><span class="line">    connector.setScheme(<span class="string">"http"</span>);</span><br><span class="line">    connector.setSecure(<span class="keyword">false</span>);</span><br><span class="line">    connector.setRedirectPort(<span class="number">8080</span>);</span><br><span class="line">    <span class="keyword">return</span> connector;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;https是一种安全为目的的http通道，在http的基础上通过传输加密和身份认证保证了传输过程的安全性。HTTPS-主要由两部分组成：HTTP-SSL-TLS，也就是在-HTTP-上又加了一层处理加密信息的模块。服务端和客户端的信息传输都会通过-TLS-进行加密
      
    
    </summary>
    
    
    
      <category term="Https" scheme="https://hkj141421.github.io/tags/Https/"/>
    
  </entry>
  
  <entry>
    <title>Mybatis框架搭建指南</title>
    <link href="https://hkj141421.github.io/2020/04/21/Mybatis%E6%A1%86%E6%9E%B6%E6%90%AD%E5%BB%BA%E6%8C%87%E5%8D%97/"/>
    <id>https://hkj141421.github.io/2020/04/21/Mybatis%E6%A1%86%E6%9E%B6%E6%90%AD%E5%BB%BA%E6%8C%87%E5%8D%97/</id>
    <published>2020-04-21T12:43:57.000Z</published>
    <updated>2020-04-21T13:56:05.017Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Mybatis框架搭建指南"><a href="#Mybatis框架搭建指南" class="headerlink" title="Mybatis框架搭建指南"></a>Mybatis框架搭建指南</h1><h1 id="前言：最近打算把SSM框架的搭建和使用都复习一遍，写写博客，加深记忆。"><a href="#前言：最近打算把SSM框架的搭建和使用都复习一遍，写写博客，加深记忆。" class="headerlink" title="前言：最近打算把SSM框架的搭建和使用都复习一遍，写写博客，加深记忆。"></a>前言：最近打算把SSM框架的搭建和使用都复习一遍，写写博客，加深记忆。</h1><h1 id="一-导入框架依赖包"><a href="#一-导入框架依赖包" class="headerlink" title="一.导入框架依赖包"></a>一.导入框架依赖包</h1><p>使用maven管理依赖包，在maven仓库中找到Mybatis和Mysql的依赖包，加入到pom文件的依赖中。</p><h1 id="二-配置Mybatis框架"><a href="#二-配置Mybatis框架" class="headerlink" title="二.配置Mybatis框架"></a>二.配置Mybatis框架</h1><p>Mybatis有两种配置方式，第一种是xml方式，第二种是java方式。下面我们先来讲一下第一种xml该如何配置。<br>.</p><h3 id="xml配置Mybatis框架"><a href="#xml配置Mybatis框架" class="headerlink" title="xml配置Mybatis框架"></a>xml配置Mybatis框架</h3><ol><li>创建配置文件，名称随意，但尽量规范起名，如Mybatis-config.xml；</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Config 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/musicsite?characterEncoding=utf8<span class="symbol">&amp;amp;</span>useSSL=true<span class="symbol">&amp;amp;</span>serverTimezone=UTC"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"com.mysql.cj.jdbc.Driver"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"root"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">type</span>=<span class="string">"FrameWork.bean.User"</span> <span class="attr">alias</span>=<span class="string">"User"</span>&gt;</span><span class="tag">&lt;/<span class="name">typeAlias</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"FrameWork.bean"</span>&gt;</span><span class="tag">&lt;/<span class="name">package</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"$&#123;driver&#125;"</span>/&gt;</span>//此处使用上面配置driver属性的值</span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;url&#125;"</span>/&gt;</span>//同上</span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;username&#125;"</span>/&gt;</span>//同上</span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;password&#125;"</span>/&gt;</span>//同上</span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"FrameWork/Mapper/UserMapper.xml"</span>&gt;</span><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>加载mapper文件有三种方式：<pre><code>(1) 使用mapper标签中的resource属性，使用这种方式配置，mapper文件和接口不需要在同一包下，只需要配置mapper文件的路径（相对于classpath），并确保mapper文件中的命名空间与mapper接口的路径一致即可。(2) 使用mapper标签中的class属性，使用这种方式配置，mapper文件必须和mapper接口在同一包，并且mapper文件必须与mapper接口的名字相同，mapper文件的命名空间与接口的路径相同。class属性配置为mapper接口的路径（相对于classpath）。(3) 使用package标签批量添加mapper文件，使用这种方式配置，mapper文件必须与接口在同一包下，mapper文件的名字与接口名相同，且mapper文件的命名空间为接口的路径。**PS**:在IDEA中不会自动编译xml文件，因此，当你使用idea开发时，出现接口类与mapper文件没有映射对的情况时，你可以查看编译好的class目录里，查看是否有xml文件，如果没有可以添加在pom文件中添加以下代码，重新编译。</code></pre> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">     &lt;resources&gt;</span><br><span class="line">          &lt;resource&gt;</span><br><span class="line">               &lt;directory&gt;src&#x2F;main&#x2F;java&lt;&#x2F;directory&gt;</span><br><span class="line">               &lt;includes&gt;</span><br><span class="line">                   &lt;include&gt;**&#x2F;*.xml&lt;&#x2F;include&gt;</span><br><span class="line">               &lt;&#x2F;includes&gt;</span><br><span class="line">           &lt;&#x2F;resource&gt;</span><br><span class="line">        &lt;&#x2F;resources&gt;</span><br><span class="line"> &#96;&#96;&#96;</span><br><span class="line"> 3. 配置数据源时应注意mysql8.0驱动的连接字符串必须加上时区。</span><br><span class="line"> 4. 配置事务管理器时可以选择JDBC&#x2F;MANAGED。</span><br><span class="line"> (1) JDBC配置直接使用了 JDBC 的提交和回滚设置，它依赖于从数据源得到的连接来管理事务作用域。利用java.sql.Connection对象完成对事务的提交。</span><br><span class="line"> (2) MANAGED – 这个配置几乎没做什么。它从来不提交或回滚一个连接，而是让容器(比如 tomcat,weblogic)来管理事务的整个生命周期。 默认情况下它会关闭连接，然而一些容器并不希望这样，因此需要将 closeConnection 属性设置为 false 来阻止它默认的关闭行为。</span><br><span class="line"> 5. 使用typeAliases配置类型别名</span><br><span class="line"> (1) typeAlias标签用于配置单个bean,其中type属性为bean的全类名，alias属性为bean的别名。</span><br><span class="line"> (2) package标签可批量配置bean，name属性为bean所在的包名，Mybatis会自动扫描该包，寻找对应的bean。</span><br><span class="line"></span><br><span class="line">### java配置Mybatis</span><br><span class="line">1.创建Mybatis配置类</span><br><span class="line">&#96;&#96;&#96;java</span><br><span class="line">public class MybatisConfig &#123;</span><br><span class="line"></span><br><span class="line">    public void  ConfigurationMybatis()</span><br><span class="line">    &#123;</span><br><span class="line">        Properties properties&#x3D;new Properties();</span><br><span class="line">        properties.setProperty(&quot;url&quot;,&quot;jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;musicsite?characterEncoding&#x3D;utf8&amp;useSSL&#x3D;true&amp;serverTimezone&#x3D;UTC&quot;);</span><br><span class="line">        properties.setProperty(&quot;driver&quot;,&quot;com.mysql.cj.jdbc.Driver&quot;);</span><br><span class="line">        properties.setProperty(&quot;username&quot;,&quot;root&quot;);</span><br><span class="line">        properties.setProperty(&quot;password&quot;,&quot;root&quot;);</span><br><span class="line">        PooledDataSourceFactory pooledDataSourceFactory &#x3D; new PooledDataSourceFactory();</span><br><span class="line">        pooledDataSourceFactory.setProperties(properties);&#x2F;&#x2F;配置数据源属性</span><br><span class="line">        DataSource dataSource&#x3D;pooledDataSourceFactory.getDataSource();</span><br><span class="line">        TransactionFactory transactionFactory &#x3D; new JdbcTransactionFactory();&#x2F;&#x2F;事务管理器为JDBC</span><br><span class="line">        Environment environment &#x3D; new Environment(&quot;development&quot;, transactionFactory, dataSource);&#x2F;&#x2F;配置开发环境</span><br><span class="line">        Configuration configuration &#x3D; new Configuration(environment);&#x2F;&#x2F;将环境加入配置</span><br><span class="line">        configuration.getTypeAliasRegistry().registerAlias(&quot;userbase&quot;,userbase.class);</span><br><span class="line">        configuration.addMapper(UserDAO.class);&#x2F;&#x2F;注册接口</span><br><span class="line">        configuration.addInterceptor(new SqlInvocation());&#x2F;&#x2F;配置sql拦截器</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>2.加载mapper文件<pre><code>1.使用Configuration对象的addMapper()方法，指定要添加的接口类型，一次注册一个接口，使用这个方法，同样需要接口名与mapper文件名称相同，mapper命名空间为接口的路径，接口与mapper文件在同一包下。2. 使用Configuration对象的addMappers()方法,指定要扫描的mapper文件路径，与addMapper()方法相同，addMappers()方法也要求接口名与mapper文件名称相同，mapper命名空间为接口的路径，接口与mapper文件在同一包下。</code></pre><ol start="3"><li>配置数据源时应注意mysql8.0驱动的连接字符串必须加上时区。需要切换其他数据源则使用其他的工厂类创建数据源对象(如UnpooledDataSourceFactory，JndiDataSourceFactory)，然后加入到环境对象中。</li><li>你可以通过创建不同的事务管理器工厂来切换事务管理器，例如你要切换为MANAGED 配置，则创建ManagedTransactionFactory对象，然后加入配置中。</li><li>配置别名要先通过configuration对象的getTypeAliasRegistry方法获取TypeAliasRegistry对象，然后调用方法配置别名，注意配置别名的操作必须放在注册mapper接口的前面，否则mybatis解析mapper文件时会找不到别名对应的类。</li></ol></li></ol><h1 id="三-配置Sql语句"><a href="#三-配置Sql语句" class="headerlink" title="三.配置Sql语句"></a>三.配置Sql语句</h1><p>在配置sql语句方面，Mybatis同样提供java配置和xml配置两种方式。</p><h3 id="xml配置sql语句"><a href="#xml配置sql语句" class="headerlink" title="xml配置sql语句"></a>xml配置sql语句</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot; ?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper</span><br><span class="line">        PUBLIC &quot;-&#x2F;&#x2F;mybatis.org&#x2F;&#x2F;DTD Mapper 3.0&#x2F;&#x2F;EN&quot;</span><br><span class="line">        &quot;http:&#x2F;&#x2F;mybatis.org&#x2F;dtd&#x2F;mybatis-3-mapper.dtd&quot;&gt;</span><br><span class="line">&lt;mapper namespace&#x3D;&quot;FrameWork.DAO.UserMapper&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;select id&#x3D;&quot;selectUser&quot; resultType&#x3D;&quot;user&quot; parameterType&#x3D;&quot;Long&quot;&gt;</span><br><span class="line">        select * from user where id &#x3D; #&#123;id&#125;</span><br><span class="line">    &lt;&#x2F;select&gt;</span><br><span class="line">    </span><br><span class="line">&lt;&#x2F;mapper&gt;</span><br></pre></td></tr></table></figure><p>对于这种Mapper文件，Mybatis提供专门的xml语法。开发人员所有的配置都在mapper标签中进行。读者可以直接复制上方的代码到xml文件中，然后删除此处select标签，自行实现sql语句。mapper标签中关于描述sql语句的标签有select，insert，delete，update。<br>        (1) select标签用于查询语句。其中id属性用于唯一标识，id名应与java接口的方法名一一对应，resultType属性用于确定将结果集转换为哪种类型的javabean,parameterType<br>代表传入的参数类型。<br>        (2) insert标签用于插入语句。<br>        (3) delete标签用于删除语句。<br>        (4) update标签用于更新语句。<br>以上标签都有id,resultType,parameterType,parameterMap,resultMap属性.。id代表对应接口的方法名。resultType和resultMap都代表结果集的转换类型，前者只有在javabean的属性名与数据库列名相同时才能使用，后者则是在属性名与列名不同时使用，使用时还需要定义resultMap，在标签内定义好数据库字段与javabean属性的映射关系。parameterType和parameterMap的关系与resultType和resultMap相同，只不过这是两个控制输入类型的标签。<br>在上面的例子中，我们可以看到在select标签中有一个 #{id}，这代表这条语句会获取一个名为id的输入参数，而这个输入参数正是我们在接口定义的入参。如果定义的是一个java bean作为输入参数，那么你可以用#{属性名}的形式获取参数中的值。</p><h1 id="四-读取配置"><a href="#四-读取配置" class="headerlink" title="四.读取配置"></a>四.读取配置</h1><p>使用xml配置框架和使用java配置框架，除了在读取配置时有些区别之外，在其他时候都相同的，下面我们先看看使用xml配置如何读取配置。</p><h3 id="读取xml配置"><a href="#读取xml配置" class="headerlink" title="读取xml配置"></a>读取xml配置</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> FrameWork.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.imageio.plugins.jpeg.JPEGImageReaderResources;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.io.Resources;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">sqlSessionUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SqlSessionFactory <span class="title">getSqlSessionFactory</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        InputStream inputStream= Resources.getResourceAsStream(<span class="string">"Mybatis_Config.xml"</span>);</span><br><span class="line">        SqlSessionFactory sqlSessionFactory=<span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line">        <span class="keyword">return</span> sqlSessionFactory;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SqlSession <span class="title">getSqlSession</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        SqlSessionFactory sqlSessionFactory=sqlSessionUtil.getSqlSessionFactory();</span><br><span class="line">        <span class="keyword">return</span> sqlSessionFactory.openSession();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到这里直接通过Mybatis提供的Resource类读取Mybatis_Config.xml配置文件。而getResourceAsStream()方法是从classpath下寻找文件的。所以配置文件必须要加入到classpath路径下，才能读取到。接着使用这个流就可以创建SqlSessionFactory 对象，再通过该对象获取sqlSession对象。</p><h3 id="读取java配置"><a href="#读取java配置" class="headerlink" title="读取java配置"></a>读取java配置</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SqlSession <span class="title">getSession</span><span class="params">(Configuration configuration)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    SqlSessionFactory sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(configuration);<span class="comment">//根据配置生产SqlSessionFactory对象</span></span><br><span class="line">    <span class="keyword">return</span> sqlSessionFactory.openSession();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>configuration就是使用java配置出的最终配置对象，将对象传SqlSessionFactoryBuilder的build方法中就可以获得sqlSessionFactory对象，再使用sqlSessionFactory获取一个sqlSession对象。</p><h1 id="五-测试框架"><a href="#五-测试框架" class="headerlink" title="五.测试框架"></a>五.测试框架</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getUser</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    SqlSession sqlSession= sqlSessionUtil.getSqlSession();</span><br><span class="line">    UserMapper userMapper =sqlSession.getMapper(UserMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    List&lt;user&gt; list= userMapper.selectUser(<span class="number">1L</span>);</span><br><span class="line">    <span class="keyword">for</span> (user list) &#123;</span><br><span class="line">        System.out.println(u);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不管是java配置还是xml配置的，在最终的使用上都是相同的。获取到SqlSession对象。然后调用getMapper方法获取userMapper接口的实例。这里实例是由Mybatis通过动态代理实例化得到的。得到接口的实例后就可以调用方法查询数据库了。</p><h3 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果:"></a>测试结果:</h3><p><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20190605160445492.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM0NzcyNTY4,size_16,color_FFFFFF,t_70"  alt="在这里插入图片描述"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Mybatis框架搭建指南&quot;&gt;&lt;a href=&quot;#Mybatis框架搭建指南&quot; class=&quot;headerlink&quot; title=&quot;Mybatis框架搭建指南&quot;&gt;&lt;/a&gt;Mybatis框架搭建指南&lt;/h1&gt;&lt;h1 id=&quot;前言：最近打算把SSM框架的搭建和使用都复
      
    
    </summary>
    
    
    
      <category term="Mybatis" scheme="https://hkj141421.github.io/tags/Mybatis/"/>
    
  </entry>
  
  <entry>
    <title>Netty4使用指南(二) 粘包拆包</title>
    <link href="https://hkj141421.github.io/2020/04/21/Netty4%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97(%E4%BA%8C)%20%E7%B2%98%E5%8C%85%E6%8B%86%E5%8C%85/"/>
    <id>https://hkj141421.github.io/2020/04/21/Netty4%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97(%E4%BA%8C)%20%E7%B2%98%E5%8C%85%E6%8B%86%E5%8C%85/</id>
    <published>2020-04-21T12:43:57.000Z</published>
    <updated>2020-06-02T09:39:08.213Z</updated>
    
    <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><h6 id="基于TCP的数据传输都会出现粘包和拆包的问题，所谓粘包就是多个小的数据包被整合到一个数据包中进行发送，接收方只接受了一次消息，但实际上得到的是多个消息数据。拆包则是指一个大的数据包被拆分成多个小的数据包发送，接收方接收了多次，但实际上是一个消息数据。之所以出现这样的情况，是因为TCP是一个底层协议，以流的形式发送数据，接收端接收时根据底层缓冲区的大小进行包的划分，不会考虑上层应用的业务数据的实际含义。"><a href="#基于TCP的数据传输都会出现粘包和拆包的问题，所谓粘包就是多个小的数据包被整合到一个数据包中进行发送，接收方只接受了一次消息，但实际上得到的是多个消息数据。拆包则是指一个大的数据包被拆分成多个小的数据包发送，接收方接收了多次，但实际上是一个消息数据。之所以出现这样的情况，是因为TCP是一个底层协议，以流的形式发送数据，接收端接收时根据底层缓冲区的大小进行包的划分，不会考虑上层应用的业务数据的实际含义。" class="headerlink" title="基于TCP的数据传输都会出现粘包和拆包的问题，所谓粘包就是多个小的数据包被整合到一个数据包中进行发送，接收方只接受了一次消息，但实际上得到的是多个消息数据。拆包则是指一个大的数据包被拆分成多个小的数据包发送，接收方接收了多次，但实际上是一个消息数据。之所以出现这样的情况，是因为TCP是一个底层协议，以流的形式发送数据，接收端接收时根据底层缓冲区的大小进行包的划分，不会考虑上层应用的业务数据的实际含义。"></a>基于TCP的数据传输都会出现粘包和拆包的问题，所谓粘包就是多个小的数据包被整合到一个数据包中进行发送，接收方只接受了一次消息，但实际上得到的是多个消息数据。拆包则是指一个大的数据包被拆分成多个小的数据包发送，接收方接收了多次，但实际上是一个消息数据。之所以出现这样的情况，是因为TCP是一个底层协议，以流的形式发送数据，接收端接收时根据底层缓冲区的大小进行包的划分，不会考虑上层应用的业务数据的实际含义。</h6><h3 id="解决策略"><a href="#解决策略" class="headerlink" title="解决策略"></a>解决策略</h3><p>由于粘包和拆包是底层协议的问题，我们只能通过上层的应用协议来解决这个问题，目前针对这个问题有四种解决方案。</p><ol><li>定长数据包，即每个报文固定多少长度，不足的部分用空格代替</li><li>基于长度字段分割，即在报文中，添加报文的长度值，接收时根据长度值，解析报文。</li><li>换行符分割，在报文结束部分增加换行符，（如FTP协议）</li><li>在报文中加入指定的分割字符。</li></ol><h3 id="Netty提供的解决方案"><a href="#Netty提供的解决方案" class="headerlink" title="Netty提供的解决方案"></a>Netty提供的解决方案</h3><p>针对以上四种解决方案，Netty提供了四个编解码器帮助用户快速解决粘包拆包问题。</p><h6 id="固定消息长度"><a href="#固定消息长度" class="headerlink" title="固定消息长度"></a>固定消息长度</h6><p>FixedLengthFrameDecoder 固定长度解码器，构造器接收一个固定长度为参数，单位为字节。使用这个解码器解决粘包与拆包时，用户需要自己再实现一个编码器，为长度不足的报文，填充空格。使用时还需保证报文的长度不超过设定的固定长度。否则还是会出现拆包问题。</p><h6 id="基于长度字段"><a href="#基于长度字段" class="headerlink" title="基于长度字段"></a>基于长度字段</h6><p>LengthFieldBasedFrameDecoder 长度字段解码器，LengthFieldPrepender 长度字段编码器。LengthFieldPrepender 编码器，根据报文长度，添加一个长度域到报文中，注意此长度域是添加到报文第一个位置的，所以如果要求将长度域添加到其他位置，需要用户自定义长度编码器。LengthFieldBasedFrameDecoder 解码器根据长度值解析消息报文。</p><p>LengthFieldPrepender 构造参数</p><ol><li>byteOrder：字节序</li><li>lengthFieldLength：长度字段的字节数</li><li>lengthAdjustment：协议体长度调节值，修正信息长度</li><li>lengthIncludesLengthFieldLength：长度值是否包含长度字段的字节数</li></ol><p>LengthFieldBasedFrameDecoder 构造参数</p><ol><li>maxFrameLength：消息最大长度</li><li>lengthFieldOffset：长度字段在消息中的偏移量</li><li>lengthFieldLength：长度字段占据的字节数</li><li>lengthAdjustment：协议体长度调节值，修正信息长度</li><li>initialBytesToStrip：实际消息数据的位置，需要跳过的字节数，</li><li>failFast ：当帧长度超过最大帧长度的时候是否抛出异常<h6 id="换行符分割"><a href="#换行符分割" class="headerlink" title="换行符分割"></a>换行符分割</h6>LineBasedFrameDecoder 换行符解码器，根据换行符解析消息报文。用户使用时自行在报文结尾加上换行符即可。</li></ol><p>LineBasedFrameDecoder 构造参数</p><ol><li>maxLength：最大消息长度</li><li>failFast：当帧长度超过最大帧长度的时候是否抛出异常</li></ol><h6 id="指定字符分割"><a href="#指定字符分割" class="headerlink" title="指定字符分割"></a>指定字符分割</h6><p>其实换行符分割就是字符分割的特殊形式，DelimiterBasedFrameDecoder就是netty提供的字符分割解码器，用户在使用时在报文结束部分加入分割字符即可。</p><p>DelimiterBasedFrameDecoder构造参数</p><ol><li>maxFrameLength：消息最大长度</li><li>stripDelimiter</li><li>failFast：帧长度超过最大帧长度的时候是否抛出异常</li><li>delimiter：分割符</li></ol><h5 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h5><p>以上四种方案中，基于长度字段进行解析是最灵活通用的方案，因此这里也以此方案为示例，解决粘包拆包问题。</p><p>客户端</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloClientHandle</span> <span class="keyword">extends</span> <span class="title">SimpleChannelInboundHandler</span>&lt;<span class="title">Object</span>&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">channelRead0</span><span class="params">(ChannelHandlerContext channelHandlerContext, Object o)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"收到服务端消息："</span>+o);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelActive</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">100</span>;i++)</span><br><span class="line">        ctx.writeAndFlush(<span class="keyword">new</span> message(<span class="string">"123"</span>,<span class="string">"123"</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelInactive</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"失去连接"</span>);</span><br><span class="line">        <span class="keyword">super</span>.channelInactive(ctx);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exceptionCaught</span><span class="params">(ChannelHandlerContext ctx, Throwable cause)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"出现异常"</span>+cause.getMessage());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> EventLoopGroup eventLoopGroup;</span><br><span class="line">    <span class="keyword">public</span> Bootstrap Bootstrap;</span><br><span class="line">    <span class="keyword">private</span> ChannelFuture channelFuture;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> SocketChannel channel;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Client</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.eventLoopGroup=<span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.Bootstrap=<span class="keyword">new</span> Bootstrap();</span><br><span class="line">        <span class="keyword">this</span>.Bootstrap.group(<span class="keyword">this</span>.eventLoopGroup)</span><br><span class="line">                        .channel(NioSocketChannel<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">                        .<span class="title">handler</span>(<span class="title">new</span> <span class="title">ChannelInitializer</span>() </span>&#123;</span><br><span class="line">                            <span class="meta">@Override</span></span><br><span class="line">                            <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(Channel channel)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                                ChannelPipeline pipeline=channel.pipeline();</span><br><span class="line">                                pipeline.addLast(<span class="keyword">new</span> StringDecoder());</span><br><span class="line">                                pipeline.addLast(<span class="keyword">new</span> StringEncoder());</span><br><span class="line">                                pipeline.addLast(<span class="keyword">new</span> JsonEncode());</span><br><span class="line">                                pipeline.addLast(<span class="keyword">new</span> HelloClientHandle());</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.channelFuture=<span class="keyword">this</span>.Bootstrap.connect(<span class="string">"localhost"</span>,<span class="number">8080</span>).sync();</span><br><span class="line">            System.out.println(<span class="string">"连接成功"</span>);</span><br><span class="line">            <span class="keyword">this</span>.channelFuture.channel().closeFuture().sync();</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>服务端</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloServeHandle</span> <span class="keyword">extends</span> <span class="title">SimpleChannelInboundHandler</span>&lt;<span class="title">String</span>&gt;</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">channelRead0</span><span class="params">(ChannelHandlerContext channelHandlerContext, String o)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"收到客户端消息："</span>+o+<span class="string">","</span>);</span><br><span class="line">        channelHandlerContext.writeAndFlush(o);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelInactive</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"客户端断开连接"</span>);</span><br><span class="line">        <span class="keyword">super</span>.channelInactive(ctx);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exceptionCaught</span><span class="params">(ChannelHandlerContext ctx, Throwable cause)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"出现异常"</span>+cause.getMessage());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NettyServer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> EventLoopGroup worker;</span><br><span class="line">    <span class="keyword">private</span> EventLoopGroup boss;</span><br><span class="line">    <span class="keyword">private</span> ServerBootstrap serverBootstrap;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ChannelFuture future;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">NettyServer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.worker=<span class="keyword">new</span> NioEventLoopGroup(<span class="number">0</span>,<span class="keyword">new</span> DefaultThreadFactory(<span class="string">"worker"</span>,<span class="keyword">false</span>));</span><br><span class="line">        <span class="keyword">this</span>.boss=<span class="keyword">new</span> NioEventLoopGroup(<span class="number">0</span>,<span class="keyword">new</span> DefaultThreadFactory(<span class="string">"boss"</span>,<span class="keyword">false</span>));</span><br><span class="line">        <span class="keyword">this</span>.serverBootstrap=<span class="keyword">new</span> ServerBootstrap();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">(<span class="keyword">int</span> port)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">this</span>.serverBootstrap.group(<span class="keyword">this</span>.boss,<span class="keyword">this</span>.worker)</span><br><span class="line">                    .channel(NioServerSocketChannel<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">                    .<span class="title">childHandler</span>(<span class="title">new</span> <span class="title">ChannelInitializer</span>() </span>&#123;</span><br><span class="line">                        <span class="meta">@Override</span></span><br><span class="line">                        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(Channel channel)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                            ChannelPipeline pipeline = channel.pipeline();</span><br><span class="line">                         </span><br><span class="line">                            pipeline.addLast(<span class="keyword">new</span> StringDecoder());</span><br><span class="line"></span><br><span class="line">                            pipeline.addLast(<span class="keyword">new</span> DelimiterBasedFrameDecoder(<span class="number">1024</span>));</span><br><span class="line">                            pipeline.addLast(<span class="keyword">new</span> StringEncoder());</span><br><span class="line">                            pipeline.addLast(<span class="keyword">new</span> JsonEncode());</span><br><span class="line"></span><br><span class="line">                            pipeline.addLast(<span class="keyword">new</span> HelloServeHandle());</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line"></span><br><span class="line">           <span class="keyword">this</span>.future = <span class="keyword">this</span>.serverBootstrap.bind(port).sync();</span><br><span class="line">           <span class="keyword">this</span>.serverBootstrap.bind(<span class="number">8022</span>).sync();</span><br><span class="line">            System.out.println(<span class="string">"netty服务器启动"</span>);</span><br><span class="line">           <span class="keyword">this</span>.future.channel().closeFuture().sync();</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Exception e)</span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">finally</span> &#123;</span><br><span class="line">             <span class="keyword">this</span>.boss.shutdownGracefully();</span><br><span class="line">             <span class="keyword">this</span>.worker.shutdownGracefully();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果如下：<br><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20191216144919141.png"  alt="在这里插入图片描述"><br>可以看到，客户端发送了100次消息，但是服务端只接收了两次，这里出现了粘包的情况。接下来，我们加入LengthFieldBasedFrameDecoder和LengthFieldPrepender。</p><p>服务端</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(Channel channel)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                        ChannelPipeline pipeline=channel.pipeline();</span><br><span class="line">                        pipeline.addLast(<span class="keyword">new</span> LengthFieldBasedFrameDecoder(<span class="number">10</span>*<span class="number">1024</span>*<span class="number">1024</span>,<span class="number">0</span>,<span class="number">4</span>,<span class="number">0</span>,<span class="number">4</span>));</span><br><span class="line">                        pipeline.addLast(<span class="keyword">new</span> StringDecoder());</span><br><span class="line">                        pipeline.addLast(<span class="keyword">new</span> LengthFieldPrepender(<span class="number">4</span>));</span><br><span class="line">                        pipeline.addLast(<span class="keyword">new</span> StringEncoder());</span><br><span class="line">                        pipeline.addLast(<span class="keyword">new</span> JsonEncode());</span><br><span class="line">                        pipeline.addLast(<span class="keyword">new</span> HelloClientHandle());</span><br><span class="line">                    &#125;</span><br></pre></td></tr></table></figure><p>客户端</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(Channel channel)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                            ChannelPipeline pipeline=channel.pipeline();![在这里插入图片描述](https:<span class="comment">//img-blog.csdnimg.cn/2019121615021791.png)</span></span><br><span class="line">                            pipeline.addLast(<span class="keyword">new</span> LengthFieldBasedFrameDecoder(<span class="number">10</span>*<span class="number">1024</span>*<span class="number">1024</span>,<span class="number">0</span>,<span class="number">4</span>,<span class="number">0</span>,<span class="number">4</span>));</span><br><span class="line">                            pipeline.addLast(<span class="keyword">new</span> StringDecoder());</span><br><span class="line">                            pipeline.addLast(<span class="keyword">new</span> LengthFieldPrepender(<span class="number">4</span>));</span><br><span class="line">                            pipeline.addLast(<span class="keyword">new</span> StringEncoder());</span><br><span class="line">                            pipeline.addLast(<span class="keyword">new</span> JsonEncode());</span><br><span class="line">                            pipeline.addLast(<span class="keyword">new</span> HelloClientHandle());</span><br><span class="line">                        &#125;</span><br></pre></td></tr></table></figure><p>测试结果如下：<br><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20191216150240216.png"  alt="在这里插入图片描述"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h3&gt;&lt;h6 id=&quot;基于TCP的数据传输都会出现粘包和拆包的问题，所谓粘包就是多个小的数据包被整合到一个数据包中进行发送，接收方只接受了一次消息，但实
      
    
    </summary>
    
    
      <category term="Netty" scheme="https://hkj141421.github.io/categories/Netty/"/>
    
    
      <category term="Netty" scheme="https://hkj141421.github.io/tags/Netty/"/>
    
  </entry>
  
  <entry>
    <title>SSM框架整合</title>
    <link href="https://hkj141421.github.io/2020/04/21/SSM%E6%A1%86%E6%9E%B6%E6%95%B4%E5%90%88/"/>
    <id>https://hkj141421.github.io/2020/04/21/SSM%E6%A1%86%E6%9E%B6%E6%95%B4%E5%90%88/</id>
    <published>2020-04-21T12:43:57.000Z</published>
    <updated>2020-04-21T14:24:42.235Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SSM框架整合"><a href="#SSM框架整合" class="headerlink" title="SSM框架整合"></a>SSM框架整合</h1><p>第一步：引入maven依赖</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;!-- https:&#x2F;&#x2F;mvnrepository.com&#x2F;artifact&#x2F;org.mybatis&#x2F;mybatis --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.mybatis&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;mybatis&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;3.4.6&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- https:&#x2F;&#x2F;mvnrepository.com&#x2F;artifact&#x2F;mysql&#x2F;mysql-connector-java --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;mysql&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;mysql-connector-java&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;8.0.16&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- https:&#x2F;&#x2F;mvnrepository.com&#x2F;artifact&#x2F;org.springframework&#x2F;spring-jdbc --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-jdbc&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;5.1.7.RELEASE&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- https:&#x2F;&#x2F;mvnrepository.com&#x2F;artifact&#x2F;org.springframework&#x2F;spring-core --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-core&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;5.1.7.RELEASE&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- https:&#x2F;&#x2F;mvnrepository.com&#x2F;artifact&#x2F;org.springframework&#x2F;spring-aop --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-aop&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;5.1.7.RELEASE&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- https:&#x2F;&#x2F;mvnrepository.com&#x2F;artifact&#x2F;org.springframework&#x2F;spring-beans --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-beans&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;5.1.7.RELEASE&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- https:&#x2F;&#x2F;mvnrepository.com&#x2F;artifact&#x2F;org.springframework&#x2F;spring-context --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-context&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;5.1.7.RELEASE&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;!-- https:&#x2F;&#x2F;mvnrepository.com&#x2F;artifact&#x2F;commons-logging&#x2F;commons-logging --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;commons-logging&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;commons-logging&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.2&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;log4j&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;log4j&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.2.17&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- https:&#x2F;&#x2F;mvnrepository.com&#x2F;artifact&#x2F;org.springframework&#x2F;spring-web --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-web&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;5.1.7.RELEASE&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.aspectj&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;aspectjweaver&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.9.2&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- https:&#x2F;&#x2F;mvnrepository.com&#x2F;artifact&#x2F;org.springframework&#x2F;spring-tx --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-tx&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;5.1.7.RELEASE&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- https:&#x2F;&#x2F;mvnrepository.com&#x2F;artifact&#x2F;org.springframework&#x2F;spring-webmvc --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-webmvc&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;5.1.7.RELEASE&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- https:&#x2F;&#x2F;mvnrepository.com&#x2F;artifact&#x2F;commons-io&#x2F;commons-io --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;commons-io&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;commons-io&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.6&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;javax.servlet.jsp.jstl&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;jstl-api&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.2&lt;&#x2F;version&gt;</span><br><span class="line">    &lt;exclusions&gt;</span><br><span class="line">        &lt;exclusion&gt;</span><br><span class="line">            &lt;groupId&gt;javax.servlet&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;servlet-api&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;&#x2F;exclusion&gt;</span><br><span class="line">        &lt;exclusion&gt;</span><br><span class="line">            &lt;groupId&gt;javax.servlet.jsp&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;jsp-api&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;&#x2F;exclusion&gt;</span><br><span class="line">    &lt;&#x2F;exclusions&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.glassfish.web&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;jstl-impl&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.2&lt;&#x2F;version&gt;</span><br><span class="line">    &lt;exclusions&gt;</span><br><span class="line">        &lt;exclusion&gt;</span><br><span class="line">            &lt;groupId&gt;javax.servlet&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;servlet-api&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;&#x2F;exclusion&gt;</span><br><span class="line">        &lt;exclusion&gt;</span><br><span class="line">            &lt;groupId&gt;javax.servlet.jsp&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;jsp-api&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;&#x2F;exclusion&gt;</span><br><span class="line">        &lt;exclusion&gt;</span><br><span class="line">            &lt;groupId&gt;javax.servlet.jsp.jstl&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;jstl-api&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;&#x2F;exclusion&gt;</span><br><span class="line">    &lt;&#x2F;exclusions&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;!-- https:&#x2F;&#x2F;mvnrepository.com&#x2F;artifact&#x2F;commons-fileupload&#x2F;commons-fileupload --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;commons-fileupload&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;commons-fileupload&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.3.1&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- https:&#x2F;&#x2F;mvnrepository.com&#x2F;artifact&#x2F;org.apache.commons&#x2F;commons-dbcp2 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.apache.commons&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;commons-dbcp2&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.1.1&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.mybatis&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;mybatis-spring&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.3.0&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><p>第二步 整合Spring和Mybatis<br>Mybatis提供了对Spirng框架的整合支持，即mybatis-spring包，我们必须导入这个包才能将Mybatis整合到Spring中。</p><p>下面进行整合的xml配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&quot;</span><br><span class="line">       xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;</span><br><span class="line">       xmlns:context&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context&quot;</span><br><span class="line">       xmlns:aop&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;aop&quot;</span><br><span class="line">       xmlns:tx&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;tx&quot;</span><br><span class="line">       xmlns:mvc&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;mvc&quot;</span><br><span class="line">       xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans</span><br><span class="line">        http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&#x2F;spring-beans.xsd</span><br><span class="line">        http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context</span><br><span class="line">        https:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context&#x2F;spring-context.xsd</span><br><span class="line">        http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;tx</span><br><span class="line">        http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;tx&#x2F;spring-tx.xsd</span><br><span class="line">        http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;mvc</span><br><span class="line">        http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;mvc&#x2F;spring-mvc-4.0.xsd</span><br><span class="line">        http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;aop</span><br><span class="line">        http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;aop&#x2F;spring-aop.xsd&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--扫描Spring组件--&gt;</span><br><span class="line">    &lt;context:component-scan base-package&#x3D;&quot;FrameWork&quot; &gt;&lt;&#x2F;context:component-scan&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--加载数据源属性配置文件--&gt;</span><br><span class="line">    &lt;bean id&#x3D;&quot;propertis&quot; class&#x3D;&quot;org.springframework.beans.factory.config.PropertyPlaceholderConfigurer&quot;&gt;</span><br><span class="line">        &lt;property name&#x3D;&quot;location&quot; value&#x3D;&quot;classpath:config&#x2F;datasource.properties&quot;&gt;&lt;&#x2F;property&gt;</span><br><span class="line">    &lt;&#x2F;bean&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--配置数据源--&gt;</span><br><span class="line">    &lt;bean id&#x3D;&quot;datasource&quot; class&#x3D;&quot;org.apache.commons.dbcp2.BasicDataSource&quot; destroy-method&#x3D;&quot;close&quot;&gt;</span><br><span class="line">        &lt;property name&#x3D;&quot;username&quot; value&#x3D;&quot;$&#123;username&#125;&quot;&gt;&lt;&#x2F;property&gt;</span><br><span class="line">        &lt;property name&#x3D;&quot;url&quot; value&#x3D;&quot;$&#123;url&#125;&quot;&gt;&lt;&#x2F;property&gt;</span><br><span class="line">        &lt;property name&#x3D;&quot;driverClassName&quot; value&#x3D;&quot;$&#123;driver&#125;&quot;&gt;&lt;&#x2F;property&gt;</span><br><span class="line">        &lt;property name&#x3D;&quot;password&quot; value&#x3D;&quot;$&#123;password&#125;&quot;&gt;&lt;&#x2F;property&gt;</span><br><span class="line">    &lt;&#x2F;bean&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--配置Mapper文件--&gt;</span><br><span class="line">    &lt;bean id&#x3D;&quot;sqlSessionFactory&quot; class&#x3D;&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;&gt;</span><br><span class="line">        &lt;property name&#x3D;&quot;dataSource&quot; ref&#x3D;&quot;datasource&quot;&gt;&lt;&#x2F;property&gt;</span><br><span class="line">        &lt;property name&#x3D;&quot;mapperLocations&quot; value&#x3D;&quot;classpath:FrameWork&#x2F;Mapper&#x2F;*.xml&quot;&gt;&lt;&#x2F;property&gt;</span><br><span class="line">    &lt;&#x2F;bean&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--配置Mapper接口的扫描位置，并注册接口--&gt;</span><br><span class="line">    &lt;bean id&#x3D;&quot;MapperConfigurer&quot; class&#x3D;&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;&gt;</span><br><span class="line">        &lt;property name&#x3D;&quot;basePackage&quot; value&#x3D;&quot;FrameWork.Dao&quot;&gt;&lt;&#x2F;property&gt;</span><br><span class="line">        &lt;property name&#x3D;&quot;sqlSessionFactoryBeanName&quot; value&#x3D;&quot;sqlSessionFactory&quot;&gt;&lt;&#x2F;property&gt;</span><br><span class="line">    &lt;&#x2F;bean&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--配置事务管理器--&gt;</span><br><span class="line">   &lt;bean id&#x3D;&quot;tx&quot; class&#x3D;&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;&gt;</span><br><span class="line">        &lt;property name&#x3D;&quot;dataSource&quot; ref&#x3D;&quot;datasource&quot;&gt;&lt;&#x2F;property&gt;</span><br><span class="line">   &lt;&#x2F;bean&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--开启事务注解--&gt;</span><br><span class="line">    &lt;tx:annotation-driven transaction-manager&#x3D;&quot;tx&quot;&gt;&lt;&#x2F;tx:annotation-driven&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;beans&gt;</span><br></pre></td></tr></table></figure><p>这里的整合主要就是配置SqlSessionFactoryBean和MapperScannerConfigurer对象，然后交给Spring容器管理。</p><p>接下来配置SpringMVC</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&quot;</span><br><span class="line">       xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;</span><br><span class="line">       xmlns:context&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context&quot;</span><br><span class="line">       xmlns:mvc&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;mvc&quot;</span><br><span class="line">       xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&#x2F;spring-beans.xsd</span><br><span class="line">        http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context&#x2F;spring-context-4.1.xsd</span><br><span class="line">        http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;mvc http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;mvc&#x2F;spring-mvc-4.1.xsd&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 开启注解扫描 --&gt;</span><br><span class="line">    &lt;context:component-scan base-package&#x3D;&quot;FrameWork.Controller&quot;&#x2F;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 不拦截静态资源 --&gt;</span><br><span class="line">    &lt;mvc:default-servlet-handler &#x2F;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 开启mvc注解支持--&gt;</span><br><span class="line">    &lt;mvc:annotation-driven &#x2F;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 配置视图解析器 --&gt;</span><br><span class="line">    &lt;bean class&#x3D;&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot; id&#x3D;&quot;internalResourceViewResolver&quot;&gt;</span><br><span class="line">        &lt;!-- 前缀 --&gt;</span><br><span class="line">        &lt;property name&#x3D;&quot;prefix&quot; value&#x3D;&quot;&#x2F;WEB-INF&#x2F;jsp&#x2F;&quot; &#x2F;&gt;</span><br><span class="line">        &lt;!-- 后缀 --&gt;</span><br><span class="line">        &lt;property name&#x3D;&quot;suffix&quot; value&#x3D;&quot;.jsp&quot; &#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;bean&gt;</span><br><span class="line">&lt;&#x2F;beans&gt;</span><br></pre></td></tr></table></figure><p>这里的配置其实和单独配置SpringMVC没有什么差别。</p><p>接下来配置web.xml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE web-app PUBLIC</span><br><span class="line">        &quot;-&#x2F;&#x2F;Sun Microsystems, Inc.&#x2F;&#x2F;DTD Web Application 2.3&#x2F;&#x2F;EN&quot;</span><br><span class="line">        &quot;http:&#x2F;&#x2F;java.sun.com&#x2F;dtd&#x2F;web-app_2_3.dtd&quot; &gt;</span><br><span class="line">&lt;web-app&gt;</span><br><span class="line"></span><br><span class="line">    &lt;context-param&gt;</span><br><span class="line">        &lt;param-name&gt;contextConfigLocation&lt;&#x2F;param-name&gt;</span><br><span class="line">        &lt;param-value&gt;classpath:config&#x2F;SpringMybatis_Config.xml&lt;&#x2F;param-value&gt;</span><br><span class="line">    &lt;&#x2F;context-param&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;listener&gt;</span><br><span class="line">        &lt;listener-class&gt;org.springframework.web.context.ContextLoaderListener&lt;&#x2F;listener-class&gt;</span><br><span class="line">    &lt;&#x2F;listener&gt;</span><br><span class="line"></span><br><span class="line">    &lt;servlet&gt;</span><br><span class="line">        &lt;servlet-name&gt;SpringMVC&lt;&#x2F;servlet-name&gt;</span><br><span class="line">        &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;&#x2F;servlet-class&gt;</span><br><span class="line">        &lt;init-param&gt;</span><br><span class="line">            &lt;param-name&gt;contextConfigLocation&lt;&#x2F;param-name&gt;</span><br><span class="line">            &lt;param-value&gt;classpath:config&#x2F;SpringMVC_Config.xml&lt;&#x2F;param-value&gt;</span><br><span class="line">        &lt;&#x2F;init-param&gt;</span><br><span class="line">    &lt;&#x2F;servlet&gt;</span><br><span class="line"></span><br><span class="line">    &lt;servlet-mapping&gt;</span><br><span class="line">        &lt;servlet-name&gt;SpringMVC&lt;&#x2F;servlet-name&gt;</span><br><span class="line">        &lt;url-pattern&gt;&#x2F;&lt;&#x2F;url-pattern&gt;</span><br><span class="line">    &lt;&#x2F;servlet-mapping&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;web-app&gt;</span><br></pre></td></tr></table></figure><p>这里配置监听器和DispatcherServlet使web应用启动时自动加载配置文件。</p><p>到这里配置就结束了.</p>]]></content>
    
    <summary type="html">
    
      关于如何整合Spring、SpringMVC、Mybatis框架的知识
    
    </summary>
    
    
    
      <category term="SSM" scheme="https://hkj141421.github.io/tags/SSM/"/>
    
  </entry>
  
  <entry>
    <title>JSP基本使用</title>
    <link href="https://hkj141421.github.io/2020/04/21/JSP%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
    <id>https://hkj141421.github.io/2020/04/21/JSP%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</id>
    <published>2020-04-21T12:43:57.000Z</published>
    <updated>2020-04-21T13:59:39.742Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JSP基本使用"><a href="#JSP基本使用" class="headerlink" title="JSP基本使用"></a>JSP基本使用</h1><h2 id="什么是JSP"><a href="#什么是JSP" class="headerlink" title="什么是JSP"></a>什么是JSP</h2><p>JSP是Java Server Page的简称,是一种动态网页开发技术。它通过&lt;% %&gt;,&lt;%= %&gt;标签在网页中嵌入java代码。JSP是基于java Servlet Api，因此有许多强大的企业级Api，也因为是这一点，它相比其他同类型的技术，更易于移植到非MS平台。</p><h3 id="JSP的处理流程"><a href="#JSP的处理流程" class="headerlink" title="JSP的处理流程"></a>JSP的处理流程</h3><p><strong>第一步</strong> 用户发送请求到服务器。<br><strong>第二步</strong> 服务器识别出这是一个对JSP页面的请求，将请求交给JSP引擎处理。<br><strong>第三步</strong> JSP引擎从硬盘中读取JSP文件，将其转化为Servlet类。<br><strong>第四步</strong> JSP引擎将Servlet类编译成可执行文件，并将请求交给Servlet引擎处理。<br><strong>第五步</strong> web服务器调用Servlet引擎执行Servlet类,Servlet引擎将执行结果嵌入到响应中。<br><strong>第六步</strong> web服务器将响应结果返回给浏览器，形成我们所看到的网页。</p><h3 id="JSP的生命周期"><a href="#JSP的生命周期" class="headerlink" title="JSP的生命周期"></a>JSP的生命周期</h3><p>JSP的生命周期和Servlet的生命周期类似，只是JSP比Servlet多一个编译成Servlet的阶段。</p><ol><li><strong>编译阶段</strong><br>将JSP页面编译成Servler类</li><li><strong>初始化阶段</strong><br>加载Servlet类，实例化Servlet类，并调用初始化方法</li><li><strong>服务阶段</strong><br>调用Servlet类的服务方法</li><li><strong>销毁阶段</strong><br>调用销毁方法，并销毁Servlet的实例。</li></ol><h3 id="JSP的九大内置对象"><a href="#JSP的九大内置对象" class="headerlink" title="JSP的九大内置对象"></a>JSP的九大内置对象</h3><ol><li>request<br>request对象是HttpServletRequest接口的实例，用户每次请求一个jsp页面，JSP引擎都会创建一个新的request对象。</li><li>response<br>response对象是HttpServletResponse接口的实例，JSP引擎创建request对象时就会创建对应的response对象。</li><li>session<br>session对象是HttpSession类的实例，它可以用于跟踪用户的行为。</li><li>application<br>application对象包装了ServletContext类的对象，它在jsp页面初始化时创建，随着jsp的销毁而销毁。你可以在application中添加属性，以此达到在多个jsp页面之间共享对象的目的。</li><li>out<br>out对象是JspWriter类的实例，用于在response对象中写入数据。它会根据页面是否缓存调用不同的实例操作。JspWriter类会抛出IOException，PrintWriter类则不会。</li><li>exception<br>exception对象中包含了JSP页面抛出的异常信息。</li><li>config<br>config对象是ServletConfig类的实例，你可以通过这个对象获得JSP或Servlet引擎的初始化参数</li><li>pagecontext<br>pageContext对象是PageContext 类的实例，用来代表整个JSP页面。你可以用它获得页面信息。</li><li>page<br>这个对象就是页面实例的引用。它可以被看做是整个JSP页面的代表。page 对象就是this对象的同义词。</li></ol><h3 id="JSP基本语法"><a href="#JSP基本语法" class="headerlink" title="JSP基本语法"></a>JSP基本语法</h3><p>JSP声明代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%! int i &#x3D; 0; %&gt; .</span><br></pre></td></tr></table></figure><p>JSP脚本代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;% out.print(&quot;hello world&quot;); %&gt;</span><br></pre></td></tr></table></figure><p>JSP表达式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%&#x3D;(5*9) %&gt;</span><br></pre></td></tr></table></figure><p>JSP注释</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;%--JSP注释，注释内容不会被发送至浏览器甚至不会被编译--%&gt; </span><br><span class="line">&lt;!-- HTML注释，通过浏览器查看网页源代码时可以看见注释内容--&gt;</span><br></pre></td></tr></table></figure><h3 id="JSP指令"><a href="#JSP指令" class="headerlink" title="JSP指令"></a>JSP指令</h3><p>定义页面的依赖属性，比如脚本语言、error页面、缓存需求等等</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page %&gt;</span><br><span class="line">&lt;%@ page contentType&#x3D;&quot;text&#x2F;xml;charset&#x3D;UTF-8&quot; language&#x3D;&quot;java&quot; isELIgnored&#x3D;&quot;false&quot; %&gt;</span><br><span class="line">&#x2F;&#x2F;此处设置页面属性编码为UTF-8，内容为html网页，脚本语言为java，开启el表达式，默认是关闭的</span><br></pre></td></tr></table></figure><p>引入标签库的定义，可以是自定义标签</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ taglib %&gt;</span><br><span class="line">&lt;%@ taglib prefix&#x3D;&quot;c&quot; uri&#x3D;&quot;http:&#x2F;&#x2F;java.sun.com&#x2F;jsp&#x2F;jstl&#x2F;core&quot; %&gt;</span><br><span class="line">&#x2F;&#x2F;此处引入jstl标签库，设置前缀为c</span><br></pre></td></tr></table></figure><p>包含其他文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ include %&gt;</span><br></pre></td></tr></table></figure><h3 id="使用JSTL标签库"><a href="#使用JSTL标签库" class="headerlink" title="使用JSTL标签库"></a>使用JSTL标签库</h3><p>第一步 引入依赖</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;javax.servlet.jsp.jstl&lt;&#x2F;groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;jstl-api&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;version&gt;1.2&lt;&#x2F;version&gt;</span><br><span class="line">        &lt;exclusions&gt;</span><br><span class="line">            &lt;exclusion&gt;</span><br><span class="line">                &lt;groupId&gt;javax.servlet&lt;&#x2F;groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;servlet-api&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;&#x2F;exclusion&gt;</span><br><span class="line">            &lt;exclusion&gt;</span><br><span class="line">                &lt;groupId&gt;javax.servlet.jsp&lt;&#x2F;groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;jsp-api&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;&#x2F;exclusion&gt;</span><br><span class="line">        &lt;&#x2F;exclusions&gt;</span><br><span class="line">    &lt;&#x2F;dependency&gt;</span><br><span class="line"> </span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.glassfish.web&lt;&#x2F;groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;jstl-impl&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;version&gt;1.2&lt;&#x2F;version&gt;</span><br><span class="line">        &lt;exclusions&gt;</span><br><span class="line">            &lt;exclusion&gt;</span><br><span class="line">                &lt;groupId&gt;javax.servlet&lt;&#x2F;groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;servlet-api&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;&#x2F;exclusion&gt;</span><br><span class="line">            &lt;exclusion&gt;</span><br><span class="line">                &lt;groupId&gt;javax.servlet.jsp&lt;&#x2F;groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;jsp-api&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;&#x2F;exclusion&gt;</span><br><span class="line">            &lt;exclusion&gt;</span><br><span class="line">                &lt;groupId&gt;javax.servlet.jsp.jstl&lt;&#x2F;groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;jstl-api&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;&#x2F;exclusion&gt;</span><br><span class="line">        &lt;&#x2F;exclusions&gt;</span><br><span class="line">    &lt;&#x2F;dependency&gt;</span><br><span class="line">    &#x2F;&#x2F;由于tomcat7是兼容j2ee 3.0规范的，所以我们将jstl 依赖的东西给去除掉，防止和tomcat自身的servlet jar包冲突.</span><br></pre></td></tr></table></figure><p>第二步 在JSP中引入标签库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ taglib prefix&#x3D;&quot;c&quot; uri&#x3D;&quot;http:&#x2F;&#x2F;java.sun.com&#x2F;jsp&#x2F;jstl&#x2F;core&quot; %&gt;</span><br><span class="line">&#x2F;&#x2F;前缀可以自定义</span><br></pre></td></tr></table></figure><p>第三步 使用JSTL标签</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page import&#x3D;&quot;java.util.List&quot; %&gt;</span><br><span class="line">&lt;%@ page import&#x3D;&quot;java.util.ArrayList&quot; %&gt;</span><br><span class="line">&lt;%@ page import&#x3D;&quot;com.study.bean.User&quot; %&gt;</span><br><span class="line">&lt;%@ page contentType&#x3D;&quot;text&#x2F;html;charset&#x3D;UTF-8&quot; language&#x3D;&quot;java&quot; isELIgnored&#x3D;&quot;false&quot; %&gt;</span><br><span class="line">&lt;%@ taglib prefix&#x3D;&quot;c&quot; uri&#x3D;&quot;http:&#x2F;&#x2F;java.sun.com&#x2F;jsp&#x2F;jstl&#x2F;core&quot; %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;%</span><br><span class="line">        List&lt;User&gt; list&#x3D;new ArrayList();</span><br><span class="line">        list.add(new User(&quot;admin&quot;,&quot;123456&quot;));</span><br><span class="line">        list.add(new User(&quot;system&quot;,&quot;789654&quot;));</span><br><span class="line">        list.add(new User(&quot;super&quot;,&quot;46546465&quot;));</span><br><span class="line">        session.setAttribute(&quot;list&quot;,list);</span><br><span class="line">%&gt;</span><br><span class="line">&lt;table border&#x3D;&quot;1px solid black&quot;&gt;</span><br><span class="line">        &lt;thead&gt;</span><br><span class="line">               &lt;tr&gt;</span><br><span class="line">                       &lt;th&gt;username&lt;&#x2F;th&gt;</span><br><span class="line">                       &lt;th&gt;password&lt;&#x2F;th&gt;</span><br><span class="line">               &lt;&#x2F;tr&gt;</span><br><span class="line">        &lt;&#x2F;thead&gt;</span><br><span class="line">        &lt;tbody&gt;</span><br><span class="line">                &lt;c:forEach items&#x3D;&quot;$&#123;list&#125;&quot; var&#x3D;&quot;user&quot;&gt;</span><br><span class="line">                        &lt;tr&gt;</span><br><span class="line">                                &lt;td&gt;$&#123;user.name&#125;&lt;&#x2F;td&gt;</span><br><span class="line">                                &lt;td&gt;$&#123;user.password&#125;&lt;&#x2F;td&gt;</span><br><span class="line">                        &lt;&#x2F;tr&gt;</span><br><span class="line">                &lt;&#x2F;c:forEach&gt;</span><br><span class="line"></span><br><span class="line">        &lt;&#x2F;tbody&gt;</span><br><span class="line">&lt;&#x2F;table&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p>JSTL标签库还提供了sql标签支持SQL操作，下面是查询的例子</p><p>在JSP引入sql标签</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ taglib prefix&#x3D;&quot;sql&quot; uri&#x3D;&quot;http:&#x2F;&#x2F;java.sun.com&#x2F;jsp&#x2F;jstl&#x2F;sql&quot; %&gt;</span><br></pre></td></tr></table></figure><p>查询user表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page import&#x3D;&quot;java.sql.ResultSet&quot; %&gt;</span><br><span class="line">&lt;%@ page import&#x3D;&quot;org.apache.taglibs.standard.tag.common.sql.ResultImpl&quot;%&gt;</span><br><span class="line">&lt;%@ page import&#x3D;&quot;java.util.List&quot; %&gt;</span><br><span class="line">&lt;%@ page import&#x3D;&quot;java.util.ArrayList&quot; %&gt;</span><br><span class="line">&lt;%@ page import&#x3D;&quot;com.study.bean.User&quot; %&gt;</span><br><span class="line">&lt;%@ page contentType&#x3D;&quot;text&#x2F;html;charset&#x3D;UTF-8&quot; language&#x3D;&quot;java&quot; isELIgnored&#x3D;&quot;false&quot; %&gt;</span><br><span class="line">&lt;%@ taglib prefix&#x3D;&quot;s&quot; uri&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;tags&quot; %&gt;</span><br><span class="line">&lt;%@ taglib prefix&#x3D;&quot;c&quot; uri&#x3D;&quot;http:&#x2F;&#x2F;java.sun.com&#x2F;jsp&#x2F;jstl&#x2F;core&quot; %&gt;</span><br><span class="line">&lt;%@ taglib prefix&#x3D;&quot;sql&quot; uri&#x3D;&quot;http:&#x2F;&#x2F;java.sun.com&#x2F;jsp&#x2F;jstl&#x2F;sql&quot; %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;sql:setDataSource driver&#x3D;&quot;com.mysql.cj.jdbc.Driver&quot; user&#x3D;&quot;root&quot; password&#x3D;&quot;root&quot; url&#x3D;&quot;jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;mybatistest?characterEncoding&#x3D;utf8&amp;useSSL&#x3D;true&amp;serverTimezone&#x3D;UTC&quot; scope&#x3D;&quot;application&quot; var&#x3D;&quot;test&quot;&gt;&lt;&#x2F;sql:setDataSource&gt;</span><br><span class="line"></span><br><span class="line">&lt;sql:query var&#x3D;&quot;res&quot; sql&#x3D;&quot;select * from user&quot; dataSource&#x3D;&quot;$&#123;test&#125;&quot; scope&#x3D;&quot;session&quot;&gt;&lt;&#x2F;sql:query&gt;</span><br><span class="line"></span><br><span class="line">&lt;table border&#x3D;&quot;1px solid black&quot;&gt;</span><br><span class="line">        &lt;thead&gt;</span><br><span class="line">               &lt;tr&gt;</span><br><span class="line">                &lt;th&gt;id&lt;&#x2F;th&gt;</span><br><span class="line">                       &lt;th&gt;name&lt;&#x2F;th&gt;</span><br><span class="line">                       &lt;th&gt;sign&lt;&#x2F;th&gt;</span><br><span class="line">               &lt;&#x2F;tr&gt;</span><br><span class="line">        &lt;&#x2F;thead&gt;</span><br><span class="line">        &lt;tbody&gt;</span><br><span class="line">                &lt;c:forEach items&#x3D;&quot;$&#123;res.rows&#125;&quot; var&#x3D;&quot;user&quot;&gt;</span><br><span class="line">                        &lt;tr&gt;</span><br><span class="line">&lt;td&gt;$&#123;user.id&#125;&lt;&#x2F;td&gt;</span><br><span class="line">                                &lt;td&gt;$&#123;user.name&#125;&lt;&#x2F;td&gt;</span><br><span class="line">                                &lt;td&gt;$&#123;user.sign&#125;&lt;&#x2F;td&gt;</span><br><span class="line">                        &lt;&#x2F;tr&gt;</span><br><span class="line">                &lt;&#x2F;c:forEach&gt;</span><br><span class="line">        &lt;&#x2F;tbody&gt;</span><br><span class="line">&lt;&#x2F;table&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;JSP基本使用&quot;&gt;&lt;a href=&quot;#JSP基本使用&quot; class=&quot;headerlink&quot; title=&quot;JSP基本使用&quot;&gt;&lt;/a&gt;JSP基本使用&lt;/h1&gt;&lt;h2 id=&quot;什么是JSP&quot;&gt;&lt;a href=&quot;#什么是JSP&quot; class=&quot;headerlink&quot; 
      
    
    </summary>
    
    
    
      <category term="JSP" scheme="https://hkj141421.github.io/tags/JSP/"/>
    
  </entry>
  
  <entry>
    <title>Spring框架的使用指南（二）声明式事务篇</title>
    <link href="https://hkj141421.github.io/2020/04/21/Spring%E6%A1%86%E6%9E%B6%E7%9A%84%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97%EF%BC%88%E4%BA%8C%EF%BC%89%E5%A3%B0%E6%98%8E%E5%BC%8F%E4%BA%8B%E5%8A%A1%E7%AF%87/"/>
    <id>https://hkj141421.github.io/2020/04/21/Spring%E6%A1%86%E6%9E%B6%E7%9A%84%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97%EF%BC%88%E4%BA%8C%EF%BC%89%E5%A3%B0%E6%98%8E%E5%BC%8F%E4%BA%8B%E5%8A%A1%E7%AF%87/</id>
    <published>2020-04-21T12:43:57.000Z</published>
    <updated>2020-04-21T13:57:05.515Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring框架的使用指南（二）声明式事务篇"><a href="#Spring框架的使用指南（二）声明式事务篇" class="headerlink" title="Spring框架的使用指南（二）声明式事务篇"></a>Spring框架的使用指南（二）声明式事务篇</h1><h2 id="前言：Spring除了提供IOC和AOP两大功能外，还提供了事务管理的功能。"><a href="#前言：Spring除了提供IOC和AOP两大功能外，还提供了事务管理的功能。" class="headerlink" title="前言：Spring除了提供IOC和AOP两大功能外，还提供了事务管理的功能。"></a>前言：Spring除了提供IOC和AOP两大功能外，还提供了事务管理的功能。</h2><p>所谓事务就是保证一个操作只有两种状态，完成状态或者初始状态，不会出现完成了99%的情况。我们为什么需要事务呢？用个最经典例子说明一下，甲在银行转账，账户有1000元，转给乙500元，如果转账成功，那么甲账户只有500元，乙账户增加500元。但是如果甲转账时，银行停电了呢，甲账户少了500元，但乙账户却因为停电中断了转账操作导致账户还是原来的数额。这样的情况明显是不合理，既然转账失败了，那钱就应该退回原账户才对。所以这时候我们就要用事务来保证转账操作要么成功，甲少了500元，乙增加500元，要么转账失败，甲还是原来的数额，乙也是原来的数额。</p><h3 id="Spring事务"><a href="#Spring事务" class="headerlink" title="Spring事务"></a>Spring事务</h3><p>Spring提供了对编程式事务和声明式事务的支持，编程式事务允许用户在代码中精确定义事务的边界，而声明式事务（基于AOP）有助于用户将操作与事务规则进行解耦。<br>简单地说，编程式事务侵入到了业务代码里面，但是提供了更加详细的事务管理；而声明式事务由于基于AOP，所以既能起到事务管理的作用，又可以不影响业务代码的具体实现。</p><h3 id="事务的四个特性"><a href="#事务的四个特性" class="headerlink" title="事务的四个特性"></a>事务的四个特性</h3><p><strong>1.原子性</strong>，事务由一系列动作组成，但这个操作无法被继续分割。原子性保证动作要么全部完成，要么一个都没有完成。</p><p><strong>2.一致性</strong>，事务一旦完成，无论是成功还是失败，所有业务数据都是一致的，不能出现甲转了500，但乙却没有增加500的情况。</p><p><strong>3.隔离性</strong>，可能有多个事务同事处理同一个数据，应保证事务之间隔离性，防止数据损坏。</p><p><strong>4.持久性</strong>，一旦事务完成，不管发生什么系统错误，事务结果都不能再可变动，通常会将事务结果写入持久化存储器中。</p><h3 id="事务的隔离级别"><a href="#事务的隔离级别" class="headerlink" title="事务的隔离级别"></a>事务的隔离级别</h3><p>隔离级别定义了一个事务可能受其他并发事务影响的程度。 当多个事务并发处理相同的数据时就有可能出现下列问题。</p><p><strong>脏读</strong>：后一个事务读取了前一个事务修改了却没有提交的值，如果此时发生异常，数据回滚了，此时后一个事务获得的数据就是无效的。</p><p><strong>不可重复读</strong>：一个事务执行相同的查询两次或两次以上，但是每次都得到不同的数据时。这通常是因为另一个并发事务在两次查询期间进行了更新。</p><p><strong>幻读</strong>：幻读与不可重复读类似。它发生在一个事务读取了几行数据，接着另一个并发事务插入了一些数据时。在随后的查询中，第一个事务就会发现多了一些原本不存在的记录。</p><p>隔离级别就是为了防止这些现象的出现，而定义的。</p><h3 id="事务的传播行为"><a href="#事务的传播行为" class="headerlink" title="事务的传播行为"></a>事务的传播行为</h3><p>事务的传播行为是指，当一个事务方法被另一个事务方法调用时，两个事务是怎样的关系。例如方法可能继续在现有事务中运行，也可能开启一个新事务，并在自己的事务中运行。</p><h3 id="基于xml配置声明式事务管理"><a href="#基于xml配置声明式事务管理" class="headerlink" title="基于xml配置声明式事务管理"></a>基于xml配置声明式事务管理</h3><p>1.引入maven依赖</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 使用jdbcTemplate操作数据库 --&gt;</span><br><span class="line">            &lt;dependency&gt;</span><br><span class="line">                &lt;groupId&gt;org.springframework&lt;&#x2F;groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;spring-jdbc&lt;&#x2F;artifactId&gt;</span><br><span class="line">                &lt;version&gt;5.1.7.RELEASE&lt;&#x2F;version&gt;</span><br><span class="line">            &lt;&#x2F;dependency&gt;</span><br><span class="line">             &lt;dependency&gt;</span><br><span class="line">                &lt;groupId&gt;mysql&lt;&#x2F;groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;mysql-connector-java&lt;&#x2F;artifactId&gt;</span><br><span class="line">                &lt;version&gt;8.0.16&lt;&#x2F;version&gt;</span><br><span class="line">            &lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><p>2.配置事务管理器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&quot;</span><br><span class="line">       xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;</span><br><span class="line">       xmlns:context&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context&quot;</span><br><span class="line">       xmlns:aop&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;aop&quot;</span><br><span class="line">       xmlns:tx&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;tx&quot;</span><br><span class="line">       xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans</span><br><span class="line">        http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&#x2F;spring-beans.xsd</span><br><span class="line">        http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context</span><br><span class="line">        https:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context&#x2F;spring-context.xsd</span><br><span class="line">        http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;tx</span><br><span class="line">        http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;tx&#x2F;spring-tx.xsd</span><br><span class="line">        http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;aop</span><br><span class="line">        http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;aop&#x2F;spring-aop.xsd&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--配置数据源--&gt;</span><br><span class="line">    &lt;bean id&#x3D;&quot;dataSource&quot; class&#x3D;&quot;org.springframework.jdbc.datasource.DriverManagerDataSource&quot;&gt;</span><br><span class="line">        &lt;property name&#x3D;&quot;driverClassName&quot; value&#x3D;&quot;com.mysql.cj.jdbc.Driver&quot;&gt;&lt;&#x2F;property&gt;</span><br><span class="line">        &lt;property name&#x3D;&quot;url&quot; value&#x3D;&quot;jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;mybatistest?characterEncoding&#x3D;utf8&amp;useSSL&#x3D;true&amp;serverTimezone&#x3D;UTC&quot;&gt;&lt;&#x2F;property&gt;</span><br><span class="line">        &lt;property name&#x3D;&quot;username&quot; value&#x3D;&quot;root&quot;&gt;&lt;&#x2F;property&gt;</span><br><span class="line">        &lt;property name&#x3D;&quot;password&quot; value&#x3D;&quot;root&quot;&gt;&lt;&#x2F;property&gt;</span><br><span class="line">    &lt;&#x2F;bean&gt;</span><br><span class="line">    </span><br><span class="line">&lt;!--配置数据源到jdbcTemplate中--&gt;</span><br><span class="line">    &lt;bean id&#x3D;&quot;jdbcTemplate&quot; class&#x3D;&quot;org.springframework.jdbc.core.JdbcTemplate&quot;&gt;</span><br><span class="line">            &lt;property name&#x3D;&quot;dataSource&quot; ref&#x3D;&quot;dataSource&quot;&gt;&lt;&#x2F;property&gt;</span><br><span class="line">    &lt;&#x2F;bean&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;!--配置事务管理器--&gt;</span><br><span class="line">    &lt;bean id&#x3D;&quot;transactionManager&quot; class&#x3D;&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;&gt;</span><br><span class="line">        &lt;property name&#x3D;&quot;dataSource&quot; ref&#x3D;&quot;dataSource&quot;&gt;&lt;&#x2F;property&gt;</span><br><span class="line">    &lt;&#x2F;bean&gt;</span><br><span class="line"></span><br><span class="line">    &lt;aop:aspectj-autoproxy&gt;&lt;&#x2F;aop:aspectj-autoproxy&gt;&lt;!--开启自动代理--&gt;</span><br><span class="line"></span><br><span class="line">    &lt;tx:advice transaction-manager&#x3D;&quot;transactionManager&quot; id&#x3D;&quot;txAdvice&quot;&gt;</span><br><span class="line">        &lt;tx:attributes&gt;</span><br><span class="line">            &lt;!-- 支持当前事务，如果执行到get开头的任何方法时没有事务则开启一个事务 这是最常见的方式 --&gt;</span><br><span class="line">            &lt;tx:method name&#x3D;&quot;get*&quot; rollback-for&#x3D;&quot;java.lang.Exception&quot; propagation&#x3D;&quot;REQUIRED&quot;&#x2F;&gt;</span><br><span class="line">        &lt;&#x2F;tx:attributes&gt;</span><br><span class="line">    &lt;&#x2F;tx:advice&gt;</span><br><span class="line"></span><br><span class="line">    &lt;aop:config&gt;</span><br><span class="line">       &lt;!-- 配置通知需要切入事务的类 --&gt;</span><br><span class="line">        &lt;aop:advisor advice-ref&#x3D;&quot;txAdvice&quot; pointcut&#x3D;&quot;execution(* FrameWork.ServiceImpl.UserServiceImpl.*(..))&quot;&gt;&lt;&#x2F;aop:advisor&gt;</span><br><span class="line">    &lt;&#x2F;aop:config&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;beans&gt;</span><br></pre></td></tr></table></figure><p>Spring并不直接管理事务，而提供一个Spring事务管理器的接口,通过这个接口，向各个框架提供了对应的事务管理器接口，将具体的事务管理的实现交给了各个框架。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">org.springframework.transaction.PlatformTransactionManager</span><br></pre></td></tr></table></figure><p>上面的事务管理器是基于jdbc的事务管理器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id&#x3D;&quot;transactionManager&quot; class&#x3D;&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;&gt;</span><br><span class="line">    &lt;property name&#x3D;&quot;dataSource&quot; ref&#x3D;&quot;dataSource&quot;&gt;&lt;&#x2F;property&gt;</span><br><span class="line">&lt;&#x2F;bean&gt;</span><br></pre></td></tr></table></figure><p>基于Hibernate的事务管理器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id&#x3D;&quot;transactionManager&quot; class&#x3D;&quot;org.springframework.orm.hibernate3.HibernateTransactionManager&quot;&gt;</span><br><span class="line">        &lt;property name&#x3D;&quot;sessionFactory&quot; ref&#x3D;&quot;sessionFactory&quot; &#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;bean&gt;</span><br></pre></td></tr></table></figure><p>Java持久化API事务（JPA）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id&#x3D;&quot;transactionManager&quot; class&#x3D;&quot;org.springframework.orm.jpa.JpaTransactionManager&quot;&gt;</span><br><span class="line">       &lt;property name&#x3D;&quot;sessionFactory&quot; ref&#x3D;&quot;sessionFactory&quot; &#x2F;&gt;</span><br><span class="line">   &lt;&#x2F;bean&gt;</span><br></pre></td></tr></table></figure><p>Java原生API事务</p><p>如果你没有使用以上所述的事务管理，或者是跨越了多个事务管理源（比如两个或者是多个不同的数据源），你就需要使用JtaTransactionManager：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id&#x3D;&quot;transactionManager&quot; class&#x3D;&quot;org.springframework.transaction.jta.JtaTransactionManager&quot;&gt;</span><br><span class="line">       &lt;property name&#x3D;&quot;transactionManagerName&quot; value&#x3D;&quot;java:&#x2F;TransactionManager&quot; &#x2F;&gt;</span><br><span class="line">   &lt;&#x2F;bean&gt;</span><br></pre></td></tr></table></figure><p>JtaTransactionManager将事务管理的责任委托给javax.transaction.UserTransaction和javax.transaction.TransactionManager对象，其中事务成功完成通过UserTransaction.commit()方法提交，事务失败通过UserTransaction.rollback()方法回滚。</p><p>tx:method标签代表哪些方法需要开启事务管理。</p><ol><li><p>rollback-for属性指定发生什么异常时回滚事务。</p></li><li><p>propagation属性指定事务的传播行为，默认为REQUIRED<br>(1) REQUIRED,，如果当前存在事务，则加入该事务，如果当前不存在事务，则创建一个新的事务。<br>(2) SUPPORTS，如果当前存在事务，则加入该事务；如果当前不存在事务，则以非事务的方式继续运行。<br>(3) MANDATORY，如果当前存在事务，则加入该事务；如果当前不存在事务，则抛出异常。<br>(4) REQUIRES_NEW，重新创建一个新的事务，如果当前存在事务，暂停当前的事务。<br>(5) NOT_SUPPORTED，以非事务的方式运行，如果当前存在事务，暂停当前的事务。<br>(6) NEVER，以非事务的方式运行，如果当前存在事务，则抛出异常。<br>(7) NESTED，和 Propagation.REQUIRED 效果一样。</p></li><li><p>isolation属性指定事务的隔离级别，默认值为 Isolation.DEFAULT。</p></li></ol><p><strong>PS</strong>:若未指定rollback-for属性的值，或值为空，则只有发生RuntimeException异常时才会回滚事务。</p><h3 id="基于注解配置声明式事务管理"><a href="#基于注解配置声明式事务管理" class="headerlink" title="基于注解配置声明式事务管理"></a>基于注解配置声明式事务管理</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> FrameWork;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> FrameWork.Advice.myAdvice;</span><br><span class="line"><span class="keyword">import</span> FrameWork.Service.MusicService;</span><br><span class="line"><span class="keyword">import</span> FrameWork.Service.UserService;</span><br><span class="line"><span class="keyword">import</span> FrameWork.ServiceImpl.MusicServiceImpl;</span><br><span class="line"><span class="keyword">import</span> FrameWork.ServiceImpl.UserServiceImpl;</span><br><span class="line"><span class="keyword">import</span> FrameWork.bean.Music;</span><br><span class="line"><span class="keyword">import</span> FrameWork.bean.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.core.JdbcTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.datasource.DataSourceTransactionManager;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.datasource.DriverManagerDataSource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.annotation.EnableTransactionManagement;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableAspectJAutoProxy</span></span><br><span class="line"><span class="meta">@EnableTransactionManagement</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Music <span class="title">music</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Music();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">user</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> User();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserService <span class="title">userService</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> UserServiceImpl();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MusicService <span class="title">musicService</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MusicServiceImpl();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> myAdvice <span class="title">myAdvice</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> myAdvice();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DriverManagerDataSource <span class="title">driverManagerDataSource</span><span class="params">()</span></span>&#123;</span><br><span class="line">        DriverManagerDataSource driverManagerDataSource=<span class="keyword">new</span> DriverManagerDataSource();</span><br><span class="line">        driverManagerDataSource.setDriverClassName(<span class="string">"com.mysql.cj.jdbc.Driver"</span>);</span><br><span class="line">        driverManagerDataSource.setUrl(<span class="string">"jdbc:mysql://localhost:3306/mybatistest?characterEncoding=utf8&amp;useSSL=true&amp;serverTimezone=UTC"</span>);</span><br><span class="line">        driverManagerDataSource.setPassword(<span class="string">"root"</span>);</span><br><span class="line">        driverManagerDataSource.setUsername(<span class="string">"root"</span>);</span><br><span class="line">        <span class="keyword">return</span> driverManagerDataSource;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JdbcTemplate <span class="title">jdbcTemplate</span><span class="params">()</span></span>&#123;</span><br><span class="line">        JdbcTemplate jdbcTemplate=<span class="keyword">new</span> JdbcTemplate();</span><br><span class="line">        jdbcTemplate.setDataSource(driverManagerDataSource());</span><br><span class="line">        <span class="keyword">return</span> jdbcTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSourceTransactionManager <span class="title">transactionManager</span><span class="params">()</span></span>&#123;</span><br><span class="line">        DataSourceTransactionManager dataSourceTransactionManager=<span class="keyword">new</span> DataSourceTransactionManager();</span><br><span class="line">        dataSourceTransactionManager.setDataSource(driverManagerDataSource());</span><br><span class="line">        <span class="keyword">return</span> dataSourceTransactionManager;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional</span>(rollbackFor = Exception<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">void</span> <span class="title">getUser</span>(<span class="title">String</span> <span class="title">name</span>,<span class="title">String</span> <span class="title">sign</span>) <span class="title">throws</span> <span class="title">Exception</span> </span>&#123;</span><br><span class="line">        jdbcTemplate.update(<span class="string">"insert into user(name,sign)  values('"</span>+name+<span class="string">"','"</span>+sign+<span class="string">"')"</span>);</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"异常"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从代码上可以看出，使用注解配置事务要比xml方便许多。</p><p>@EnableTransactionManagement注解代表开启事务支持，标注在配置类上。</p><p>@Transactional注解标记使用事务，如果注解在类上，则类中所有public方法使用事务，注解在方法上则只有该方法使用。</p><p><strong>PS</strong>：@Transactional注解只能对public方法生效，注解到其他非public方法上时不会报错，但不使用事务。</p><p>这里是完全采用java配置的，你也可以选择使用xml配置bean和事务管理器，不配置tx:advice和aop:advisor标签，只需要在xml中加入下面的配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;tx:annotation-driven transaction-manager&#x3D;&quot;transactionManager&quot;&gt;&lt;&#x2F;tx:annotation-driven&gt;</span><br></pre></td></tr></table></figure><p>此标签作用相当于@EnableTransactionManagement注解。你现在已经可以使用@Transactional注解配置事务了。</p><p>更多关于Spring事务的详细内容，请参考博客：<a href="https://www.cnblogs.com/yixianyixian/p/8372832.html" target="_blank" rel="noopener">https://www.cnblogs.com/yixianyixian/p/8372832.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Spring框架的使用指南（二）声明式事务篇&quot;&gt;&lt;a href=&quot;#Spring框架的使用指南（二）声明式事务篇&quot; class=&quot;headerlink&quot; title=&quot;Spring框架的使用指南（二）声明式事务篇&quot;&gt;&lt;/a&gt;Spring框架的使用指南（二）声明式事
      
    
    </summary>
    
    
    
      <category term="Spring 事务" scheme="https://hkj141421.github.io/tags/Spring-%E4%BA%8B%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>基于Mybatis拦截器实现分页插件</title>
    <link href="https://hkj141421.github.io/2020/04/21/%E5%9F%BA%E4%BA%8EMybatis%E6%8B%A6%E6%88%AA%E5%99%A8%E5%AE%9E%E7%8E%B0%E5%88%86%E9%A1%B5%E6%8F%92%E4%BB%B6/"/>
    <id>https://hkj141421.github.io/2020/04/21/%E5%9F%BA%E4%BA%8EMybatis%E6%8B%A6%E6%88%AA%E5%99%A8%E5%AE%9E%E7%8E%B0%E5%88%86%E9%A1%B5%E6%8F%92%E4%BB%B6/</id>
    <published>2020-04-21T12:43:57.000Z</published>
    <updated>2020-04-21T14:02:54.467Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一·、简介"><a href="#一·、简介" class="headerlink" title="一·、简介"></a>一·、简介</h3><p>无意间了解到Mybatis也有拦截器，所以利用空闲时间了解了一下Mybatis拦截器的使用及一些应用场景。</p><h3 id="二、拦截器介绍"><a href="#二、拦截器介绍" class="headerlink" title="二、拦截器介绍"></a>二、拦截器介绍</h3><p> Mybatis的拦截器是通过动态代理来实现的，Mybatis提供了Interceptor接口让用户自定义插件。但是Mybatis只提供了以下四个核心对象的拦截。</p><ol><li>Executor<br>这是Mybatis的执行器，用于执行增删改查的操作，还包含了提交、回滚的事务操作，开发者可以选择拦截其中任意方法，添加自己的功能。</li><li>StatementHandler<br>StatementHandler负责具体编译并执行Sql语句，也就是说如果你想要在改变要执行的sql语句，就必须要在parpre方法执行前改变。</li><li>ParameterHandler<br>ParameterHandler负责sql语句的参数。其中只有setParameters方法需要拦截，该方法负责将参数映射到占位符</li><li>ResultSetHandler<br>ResultSetHandler负责处理sql的结果集。</li></ol><p>这4个对象的执行顺序为Executor-&gt;StatementHandler-&gt;ParameterHandler-&gt;ResultSetHandler。Executor对象收到</p><h3 id="三、应用场景"><a href="#三、应用场景" class="headerlink" title="三、应用场景"></a>三、应用场景</h3><p>Mybatis拦截器可以用来自定义分页功能，数据权限管理，监控sql执行性能等等。使用拦截器实现分页，权限管理，就不需要将分页sql，权限等业务需要硬编码到代码中。</p><h3 id="四、Interceptor接口"><a href="#四、Interceptor接口" class="headerlink" title="四、Interceptor接口"></a>四、Interceptor接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Interceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function">Object <span class="title">intercept</span><span class="params">(Invocation invocation)</span> <span class="keyword">throws</span> Throwable</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function">Object <span class="title">plugin</span><span class="params">(Object target)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">setProperties</span><span class="params">(Properties properties)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Interceptor 接口是Mybatis提供给我们自定义拦截器的接口，其中有3个方法</p><p>1.intercept方法，这个方法就是我们用来实现自己业务逻辑的方法，Invocation 对象中包含了代理对象和被拦截方法的参数。调用Invocation 对象中的proceed（）方法就可以继续执行目标方法。</p><p>2.plugin方法，这个方法是用来生成代理对象的，Mybatis会调用这个方法获取一个对象，执行目标方法。这个方法通常只需要调用Plugin类的wrap静态方法即可。如Plugin.wrap(target,this)。wrap方法的作用是通过反射获取拦截器注解，判断拦截器拦截的是否是Executor，StatementHandler，ParameterHandler，ResultSetHandler4个对象中的方法，是则返回代理对象，不是则返回目标对象。</p><p>3.setProperties方法用于获取配置文件中配置到拦截器中的属性。<br>例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;plugins&gt;</span><br><span class="line">        &lt;plugin interceptor&#x3D;&quot;FrameWork.util.SqlInvocation&quot;&gt;</span><br><span class="line">            &lt;property name&#x3D;&quot;name&quot; value&#x3D;&quot;knight&quot;&gt;&lt;&#x2F;property&gt;</span><br><span class="line">        &lt;&#x2F;plugin&gt;</span><br><span class="line">    &lt;&#x2F;plugins&gt;</span><br></pre></td></tr></table></figure><p>这样的功能使Mybatis在没有Spring的支持下也可以从配置文件中获取属性。</p><h3 id="五、拦截器注解"><a href="#五、拦截器注解" class="headerlink" title="五、拦截器注解"></a>五、拦截器注解</h3><p>Mybatis提供了@Intercepts和@Signature两个注解来指定拦截方法。</p><p>@Intercepts标识类是一个拦截器，其中可以包含多个@Signature。</p><p>@Signature定义了当前拦截器的切入点，该注解有3个参数，type代表拦截哪个类，method代表拦截的方法，args包含了被拦截方法中的参数。</p><h3 id="六、自定义分页插件"><a href="#六、自定义分页插件" class="headerlink" title="六、自定义分页插件"></a>六、自定义分页插件</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> FrameWork.bean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by forget on 2019/9/29.</span></span><br><span class="line"><span class="comment"> * 分页实体类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Page</span> </span>&#123;</span><br><span class="line">    <span class="comment">//分页sql</span></span><br><span class="line">    <span class="keyword">private</span> String sql;</span><br><span class="line">    <span class="comment">//总页数</span></span><br><span class="line">    <span class="keyword">private</span> Integer totalPage=<span class="number">0</span>;</span><br><span class="line">    <span class="comment">//当前页数,默认当前页数为1</span></span><br><span class="line">    <span class="keyword">private</span> Integer indexPage=<span class="number">1</span>;</span><br><span class="line">    <span class="comment">//每页页数，默认页数为10</span></span><br><span class="line">    <span class="keyword">private</span> Integer pageNum=<span class="number">10</span>;</span><br><span class="line">    <span class="comment">//查询参数</span></span><br><span class="line">    <span class="keyword">private</span> HashMap&lt;String,Object&gt; params=<span class="keyword">new</span> HashMap();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSql</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sql;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSql</span><span class="params">(String sql)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.sql = sql;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getTotalPage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> totalPage;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTotalPage</span><span class="params">(Integer total)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.totalPage = total%<span class="keyword">this</span>.pageNum==<span class="number">0</span>?total/<span class="keyword">this</span>.pageNum:total/<span class="keyword">this</span>.pageNum+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getIndexPage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> indexPage;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setIndexPage</span><span class="params">(Integer indexPage)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.indexPage = indexPage;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getParamsMap</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.params.get(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setParamsMap</span><span class="params">(String key,Object value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.params.put(key,value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> HashMap&lt;String, Object&gt; <span class="title">getParams</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> params;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setParams</span><span class="params">(HashMap&lt;String, Object&gt; params)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.params = params;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getPageNum</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> pageNum;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPageNum</span><span class="params">(Integer pageNum)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.pageNum = pageNum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先写一个分页的实体类，帮助我们做分页的操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> FrameWork.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> FrameWork.bean.Page;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.executor.Executor;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.executor.parameter.ParameterHandler;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.executor.resultset.ResultSetHandler;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.executor.statement.RoutingStatementHandler;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.executor.statement.StatementHandler;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.mapping.BoundSql;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.mapping.MappedStatement;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.mapping.ParameterMap;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.mapping.ParameterMapping;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.plugin.*;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.reflection.MetaObject;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.scripting.defaults.DefaultParameterHandler;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.ResultHandler;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.RowBounds;</span><br><span class="line"><span class="keyword">import</span> sun.plugin.javascript.ReflectUtil;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.Result;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by forget on 2019/9/28.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Intercepts</span>(&#123;</span><br><span class="line"><span class="comment">//        @Signature(type = Executor.class,method = "query",args = &#123;MappedStatement.class,Object.class, RowBounds.class, ResultHandler.class&#125;),</span></span><br><span class="line">            <span class="meta">@Signature</span>(type = StatementHandler<span class="class">.<span class="keyword">class</span>,<span class="title">method</span> </span>= <span class="string">"prepare"</span>,args = &#123;Connection<span class="class">.<span class="keyword">class</span>,<span class="title">Integer</span>.<span class="title">class</span>&#125;)</span></span><br><span class="line"><span class="class">&#125;)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">SqlInvocation</span> <span class="keyword">implements</span> <span class="title">Interceptor</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">intercept</span><span class="params">(Invocation invocation)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        RoutingStatementHandler routingStatementHandler= (RoutingStatementHandler) invocation.getTarget();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(routingStatementHandler.getBoundSql().getParameterObject() <span class="keyword">instanceof</span> Page)</span><br><span class="line">        &#123;</span><br><span class="line">            Page pageHelp= (Page) routingStatementHandler.getBoundSql().getParameterObject();</span><br><span class="line">            HandlePage(routingStatementHandler.getBoundSql(),pageHelp, (Connection) invocation.getArgs()[<span class="number">0</span>],routingStatementHandler);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> invocation.proceed();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">HandlePage</span><span class="params">(BoundSql boundSql,Page pageHelper,Connection connection,RoutingStatementHandler routingStatementHandler)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line"></span><br><span class="line">        StatementHandler statementHandler = (StatementHandler) reflectUtil.getFildValue(routingStatementHandler,<span class="string">"delegate"</span>);</span><br><span class="line"></span><br><span class="line">        MappedStatement mappedStatement= (MappedStatement) reflectUtil.getFildValue(statementHandler,<span class="string">"mappedStatement"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取总条数</span></span><br><span class="line">        Integer count=<span class="keyword">this</span>.CountAmount(mappedStatement,boundSql,pageHelper,connection);</span><br><span class="line">        <span class="comment">//设置总页数</span></span><br><span class="line">        pageHelper.setTotalPage(count);</span><br><span class="line">        <span class="comment">//获取分页sql</span></span><br><span class="line">        String pageSql=<span class="keyword">this</span>.getPageSql(boundSql.getSql(),pageHelper);</span><br><span class="line"></span><br><span class="line">        System.out.println(pageSql);</span><br><span class="line"></span><br><span class="line">        reflectUtil.setFildValue(boundSql,<span class="string">"sql"</span>,pageSql);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取SQL语句结果集的总数量</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> mappedStatement</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> boundSql 用于获取原sql和参数映射关系</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> params sql语句的参数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> connection 数据库连接用于执行sql语句</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> SQLException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">CountAmount</span><span class="params">(MappedStatement mappedStatement,BoundSql boundSql,Object params,Connection connection)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line"></span><br><span class="line">        String countSql=<span class="keyword">this</span>.getCountSql(boundSql.getSql());</span><br><span class="line"></span><br><span class="line">        System.out.println(countSql);</span><br><span class="line"></span><br><span class="line">        List&lt;ParameterMapping&gt; parameterMappingList=boundSql.getParameterMappings();</span><br><span class="line">        <span class="comment">//构建统计数量的sql语句的BoundSql对象</span></span><br><span class="line">        BoundSql countBoundSql=<span class="keyword">new</span> BoundSql(mappedStatement.getConfiguration(),countSql,parameterMappingList,params);</span><br><span class="line">        <span class="comment">//创建一个参数映射器，帮助我们给sql语句赋值</span></span><br><span class="line">        ParameterHandler parameterHandler=<span class="keyword">new</span> DefaultParameterHandler(mappedStatement,params,countBoundSql);</span><br><span class="line"></span><br><span class="line">        PreparedStatement statement=<span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        ResultSet resultSet=<span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            statement=connection.prepareStatement(countSql);</span><br><span class="line">            <span class="comment">//给统计语句的sql语句占位符赋值</span></span><br><span class="line">            parameterHandler.setParameters(statement);</span><br><span class="line"></span><br><span class="line">            resultSet=statement.executeQuery();</span><br><span class="line"></span><br><span class="line">            Integer count=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(resultSet.next())&#123;</span><br><span class="line">                count=resultSet.getInt(<span class="number">1</span>);</span><br><span class="line">                System.out.println(<span class="string">"数量："</span>+count);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> count;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">finally</span> &#123;</span><br><span class="line"></span><br><span class="line">           <span class="comment">// if(resultSet!=null)resultSet.close();</span></span><br><span class="line"></span><br><span class="line">         <span class="comment">//   if(statement!=null)statement.close();</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取分页sql</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sql</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pageHelper</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPageSql</span><span class="params">(String sql,Page pageHelper)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> start=(pageHelper.getIndexPage()-<span class="number">1</span>)*pageHelper.getPageNum();</span><br><span class="line">        <span class="keyword">int</span> end=start+pageHelper.getPageNum();</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"select * from ( "</span>+sql+<span class="string">" ) pagedata limit "</span>+start+<span class="string">","</span>+end;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构建统计sql语句</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sql</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getCountSql</span><span class="params">(String sql)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"select count(*) "</span>+sql.substring(sql.indexOf(<span class="string">"from"</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">plugin</span><span class="params">(Object target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Plugin.wrap(target,<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setProperties</span><span class="params">(Properties properties)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>1.RoutingStatementHandler对象是Mybatis的Sql处理器路由,它会跟不同的sql进入不同的StatementHandler中。</p><p>2.BoundSql 对象中储存了sql语句，sql参数以及参数与sql占位符的映射关系。</p><p>3.MappedStatement对象代表了mappper文件中的一个select/update/delete/insert的xml节点，其中还包含了一些配置属性</p><p>4.ParameterHandler对象会根据映射关系设置sql语句参数值。</p><p>5.ParameterMapping对象包含了参数的映射关系。</p><p>添加拦截器（xml配置）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;plugins&gt;</span><br><span class="line">    &lt;plugin interceptor&#x3D;&quot;FrameWork.util.SqlInvocation&quot;&gt;</span><br><span class="line">        &lt;property name&#x3D;&quot;name&quot; value&#x3D;&quot;knight&quot;&gt;&lt;&#x2F;property&gt;</span><br><span class="line">    &lt;&#x2F;plugin&gt;</span><br><span class="line">&lt;&#x2F;plugins&gt;</span><br></pre></td></tr></table></figure><p>添加拦截器（java配置）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">configuration.addInterceptor(<span class="keyword">new</span> SqlInvocation());<span class="comment">//配置sql拦截器</span></span><br></pre></td></tr></table></figure><h3 id="七、测试插件"><a href="#七、测试插件" class="headerlink" title="七、测试插件"></a>七、测试插件</h3><p>mapper文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;select id&#x3D;&quot;selectUser&quot; resultType&#x3D;&quot;userbase&quot; parameterType&#x3D;&quot;Page&quot;&gt;</span><br><span class="line">    select * from userbase  where name&#x3D;#&#123;params.name&#125;</span><br><span class="line">&lt;&#x2F;select&gt;</span><br></pre></td></tr></table></figure><p>测试代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getUser</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    SqlSession sqlSession= sqlSessionUtil.getSqlSession();</span><br><span class="line">    UserMapper userMapper =sqlSession.getMapper(UserMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    userbase user=<span class="keyword">new</span> userbase();</span><br><span class="line">    user.setId(<span class="number">1L</span>);</span><br><span class="line">    Page page=<span class="keyword">new</span> Page();</span><br><span class="line">    page.setPageNum(<span class="number">5</span>);</span><br><span class="line">    page.setParamsMap(<span class="string">"name"</span>,<span class="string">"jascasj"</span>);</span><br><span class="line">    List&lt;userbase&gt; list= userMapper.selectUser(page);</span><br><span class="line">    <span class="keyword">for</span> (userbase u:list) &#123;</span><br><span class="line">        System.out.println(u);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">"总页数："</span>+page.getTotalPage());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试结果<br><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20190930115219598.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM0NzcyNTY4,size_16,color_FFFFFF,t_70"  alt="在这里插入图片描述"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;一·、简介&quot;&gt;&lt;a href=&quot;#一·、简介&quot; class=&quot;headerlink&quot; title=&quot;一·、简介&quot;&gt;&lt;/a&gt;一·、简介&lt;/h3&gt;&lt;p&gt;无意间了解到Mybatis也有拦截器，所以利用空闲时间了解了一下Mybatis拦截器的使用及一些应用场景。&lt;/p&gt;

      
    
    </summary>
    
    
    
      <category term="Mybatis 拦截器" scheme="https://hkj141421.github.io/tags/Mybatis-%E6%8B%A6%E6%88%AA%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>利用JMX技术监控tomcat</title>
    <link href="https://hkj141421.github.io/2020/04/21/%E5%88%A9%E7%94%A8JMX%E6%8A%80%E6%9C%AF%E7%9B%91%E6%8E%A7tomcat/"/>
    <id>https://hkj141421.github.io/2020/04/21/%E5%88%A9%E7%94%A8JMX%E6%8A%80%E6%9C%AF%E7%9B%91%E6%8E%A7tomcat/</id>
    <published>2020-04-21T12:43:57.000Z</published>
    <updated>2020-04-22T14:02:33.936Z</updated>
    
    <content type="html"><![CDATA[<h5 id="JMX-Java-Management-Extensions-是一个为应用程序植入管理功能的框架。JMX是一套标准的代理和服务，-实际上，用户可以在任何Java应用程序中使用这些代理和服务实现管理。主要用于对JAVA应用程序和JVM进行监控和管理。"><a href="#JMX-Java-Management-Extensions-是一个为应用程序植入管理功能的框架。JMX是一套标准的代理和服务，-实际上，用户可以在任何Java应用程序中使用这些代理和服务实现管理。主要用于对JAVA应用程序和JVM进行监控和管理。" class="headerlink" title="JMX(Java Management Extensions)是一个为应用程序植入管理功能的框架。JMX是一套标准的代理和服务， 实际上，用户可以在任何Java应用程序中使用这些代理和服务实现管理。主要用于对JAVA应用程序和JVM进行监控和管理。"></a>JMX(Java Management Extensions)是一个为应用程序植入管理功能的框架。JMX是一套标准的代理和服务， 实际上，用户可以在任何Java应用程序中使用这些代理和服务实现管理。主要用于对JAVA应用程序和JVM进行监控和管理。</h5><h5 id="JMX架构"><a href="#JMX架构" class="headerlink" title="JMX架构"></a>JMX架构</h5><p>JMX可分为监控层，代理层，管理层三层结构。</p><h6 id="监控层"><a href="#监控层" class="headerlink" title="监控层"></a>监控层</h6><p>监控层主要通过MBean来收集管理我们所需要的监控数据。一个MBean对应一类数据。</p><h6 id="代理层"><a href="#代理层" class="headerlink" title="代理层"></a>代理层</h6><p>所有的MBean都需要注册到MBServer容器中才能够被管理使用。一个JMX代理还包括一组用于管理MBeans的服务和至少一个通信适配器(adaptor)或连接器(connector) 以供管理程序访问</p><h6 id="管理层"><a href="#管理层" class="headerlink" title="管理层"></a>管理层</h6><p>JMX 可以以多重方式来访问JMX技术监测信息，既可以通过现有的管理协议，比如简单网络管理协议(SNMP)，也可以通过专利性的协议。MBean server依赖协议适配器(adaptors)和连接器(connectors)来让JMX代理供管理程序(位于JMX代理所在的JVM之外)访问。<br>每个适配器都通过一个特定的协议提供一个包含了所有注册在MBean Server中的MBeans的视图。比如，一个HTML适配器可以在一个浏览器中显示一个MBean。</p><h5 id="JMX示例"><a href="#JMX示例" class="headerlink" title="JMX示例"></a>JMX示例</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ServerResourceMBean</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getInnerstore</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setInnerstore</span><span class="params">(String innerstore)</span> </span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getNetwork</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNetwork</span><span class="params">(String network)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接口名称必须以MBean结尾</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServerResource</span> <span class="keyword">implements</span> <span class="title">ServerResourceMBean</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String innerstore;</span><br><span class="line">    <span class="keyword">private</span> String network;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getInnerstore</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Runtime runtime=Runtime.getRuntime();</span><br><span class="line">        <span class="keyword">return</span> runtime.freeMemory()+<span class="string">""</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setInnerstore</span><span class="params">(String innerstore)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.innerstore = innerstore;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getNetwork</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Runtime runtime=Runtime.getRuntime();</span><br><span class="line">        <span class="keyword">return</span> runtime.totalMemory()+<span class="string">""</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNetwork</span><span class="params">(String network)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.network = network;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现类的名字为去掉MBean之后的接口名，且实现类与接口必须在同一包下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">agent</span><span class="params">()</span> <span class="keyword">throws</span> MalformedObjectNameException, NotCompliantMBeanException, InstanceAlreadyExistsException, MBeanRegistrationException, InterruptedException, RemoteException </span>&#123;</span><br><span class="line">    MBeanServer mBeanServer= ManagementFactory.getPlatformMBeanServer();</span><br><span class="line">    ObjectName ServerResource=<span class="keyword">new</span> ObjectName(<span class="string">"jmxBean:name=ServerResource"</span>);</span><br><span class="line"></span><br><span class="line">    mBeanServer.registerMBean(<span class="keyword">new</span> ServerResource(),ServerResource);</span><br><span class="line"></span><br><span class="line">    LocateRegistry.createRegistry(<span class="number">8099</span>);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        JMXServiceURL jmxServiceURL=<span class="keyword">new</span> JMXServiceURL(<span class="string">"service:jmx:rmi:///jndi/rmi://localhost:8099/jmxrmi"</span>);</span><br><span class="line">        JMXConnectorServer server= JMXConnectorServerFactory.newJMXConnectorServer(jmxServiceURL,<span class="keyword">null</span>,mBeanServer);</span><br><span class="line">        server.start();</span><br><span class="line">        System.out.println(<span class="string">"开启JMX服务器"</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (MalformedURLException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上代码作用为注册MBean到MBServer并开启MBServer。<br>在打开jconsole，连接到此MBServer，可查看注册的MBean信息<br><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20191219181838332.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM0NzcyNTY4,size_16,color_FFFFFF,t_70"  alt="在这里插入图片描述"></p><h5 id="开启tomcat的JMX监控"><a href="#开启tomcat的JMX监控" class="headerlink" title="开启tomcat的JMX监控"></a>开启tomcat的JMX监控</h5><p>本例中使用TOMCAT7版本。<br>在tomcat根目录下bin目录中创建setenv.bat文件，并追加以下配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set CATALINA_OPTS&#x3D;-Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.port&#x3D;9999 -Dcom.sun.management.jmxremote.ssl&#x3D;false -Dcom.sun.management.jmxremote.authenticate&#x3D;false</span><br></pre></td></tr></table></figure><p>如需开启验证则使用以下配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set CATALINA_OPTS&#x3D;-Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.port&#x3D;9999 -Dcom.sun.management.jmxremote.ssl&#x3D;false -Dcom.sun.management.jmxremote.authenticate&#x3D;true  -Dcom.sun.management.jmxremote.password.file&#x3D;..&#x2F;conf&#x2F;jmxremote.password -Dcom.sun.management.jmxremote.access.file&#x3D;..&#x2F;conf&#x2F;jmxremote.access</span><br></pre></td></tr></table></figure><p>在conf目录创建jmxremote.password和jmxremote.acces文件,内容为：<br>jmxremote.password</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">monitorRole tomcat</span><br><span class="line">controlRole tomcat</span><br><span class="line">格式为用户名 密码</span><br></pre></td></tr></table></figure><p>jmxremote.acces</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">monitorRole readonly</span><br><span class="line">controlRole readwrite</span><br></pre></td></tr></table></figure><p>注意jmxremote.password文件需要配置权限，只能由运行tomcat服务器的系统用户访问，其他用户全部不能访问<br><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/2019121918312770.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM0NzcyNTY4,size_16,color_FFFFFF,t_70"  alt="在这里插入图片描述"><br>重启tomcat即可开启JMX（如使用IDEA运行项目需配置JMX端口与配置文件中的端口一致）<br><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20191219182348754.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM0NzcyNTY4,size_16,color_FFFFFF,t_70"  alt="在这里插入图片描述"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">jmxUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String url=<span class="string">"service:jmx:rmi:///jndi/rmi://127.0.0.1:9999/jmxrmi"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String[] usernameAndpassword=<span class="keyword">new</span> String[]&#123;<span class="string">"monitorRole"</span>,<span class="string">"tomcat"</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> needAuth=<span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> MBeanServerConnection <span class="title">getJmxConnector</span><span class="params">()</span></span>&#123;</span><br><span class="line">        JMXConnector connector=<span class="keyword">null</span>;</span><br><span class="line">        MBeanServerConnection connection=<span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            JMXServiceURL jmxServiceURL=<span class="keyword">new</span> JMXServiceURL(url);</span><br><span class="line">            Map&lt;String,String[]&gt; map=<span class="keyword">new</span> HashMap();</span><br><span class="line">            map.put(JMXConnector.CREDENTIALS,usernameAndpassword);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(needAuth)</span><br><span class="line">            &#123;</span><br><span class="line">                System.out.println(<span class="string">"开启验证"</span>);</span><br><span class="line">                 connector=JMXConnectorFactory.connect(jmxServiceURL,map);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> connector=JMXConnectorFactory.connect(jmxServiceURL);</span><br><span class="line"></span><br><span class="line">            connection=connector.getMBeanServerConnection();</span><br><span class="line">            <span class="keyword">if</span> (connection!=<span class="keyword">null</span>) System.out.println(<span class="string">"JMX连接成功"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (MalformedURLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> connection;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> MBeanInfo <span class="title">getMBeanInfo</span><span class="params">(MBeanServerConnection connection, ObjectName objectName)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">           <span class="keyword">return</span> connection.getMBeanInfo(objectName);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InstanceNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IntrospectionException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ReflectionException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Monitor</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> ObjectName requestObject;</span><br><span class="line">    <span class="keyword">public</span> ObjectName threadPoolObject;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> MBeanServerConnection connection;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Monitor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        init();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">        connection=jmxUtil.getJmxConnector();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            requestObject=<span class="keyword">new</span> ObjectName(<span class="string">"Catalina:type=GlobalRequestProcessor,name=\"http-apr-8080\""</span>);</span><br><span class="line">            threadPoolObject=<span class="keyword">new</span> ObjectName(<span class="string">"Catalina:type=ThreadPool,name=\"http-apr-8080\""</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (MalformedObjectNameException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> Map&lt;String,Object&gt; <span class="title">getInfo</span><span class="params">(ObjectName objectName)</span></span>&#123;</span><br><span class="line">       HashMap&lt;String,Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">       MBeanInfo Info = jmxUtil.getMBeanInfo(connection,objectName);</span><br><span class="line"></span><br><span class="line">       MBeanAttributeInfo[] attributeInfo=Info.getAttributes();</span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;attributeInfo.length;i++)</span><br><span class="line">       &#123;</span><br><span class="line">           String n=attributeInfo[i].getName();</span><br><span class="line">           map.put(attributeInfo[i].getName(),getAttr(objectName,attributeInfo[i].getName()));</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String,Object&gt; <span class="title">getRequestInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="keyword">return</span> getInfo(requestObject);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String,Object&gt; <span class="title">getThreadInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getInfo(threadPoolObject);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String,String&gt; <span class="title">getInfoFromMbeanInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line">       HashMap&lt;String,String&gt; res=<span class="keyword">new</span> HashMap();</span><br><span class="line">        MBeanInfo threadPoolInfo=jmxUtil.getMBeanInfo(connection,threadPoolObject);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getAttr</span><span class="params">(ObjectName objectName,String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">           <span class="keyword">return</span> connection.getAttribute(objectName,name);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (MBeanException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (AttributeNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InstanceNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ReflectionException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/"</span>)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Map&lt;String,Object&gt; <span class="title">firat</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Map&lt;String,Object&gt; reqinfo=monitor.getRequestInfo();</span><br><span class="line">    <span class="keyword">return</span> reqinfo;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/threadpool"</span>)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Map&lt;String,Object&gt; <span class="title">threadpool</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Map&lt;String,Object&gt; reqinfo=monitor.getThreadInfo();</span><br><span class="line">    <span class="keyword">return</span> reqinfo;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意开启tomcat验证后IDEA就不能正常访问项目了，需要为IDEA配置JMX的用户名密码，但笔者没查到怎么配置。只能直接打包到tomcat启动，不通过idea运行。<br>测试结果:</p><p><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20191219183554625.png"  alt="在这里插入图片描述"><br>访问/threadpool路径会报未序列化的错误，因为map中包含了一些对象，所以才会这样。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h5 id=&quot;JMX-Java-Management-Extensions-是一个为应用程序植入管理功能的框架。JMX是一套标准的代理和服务，-实际上，用户可以在任何Java应用程序中使用这些代理和服务实现管理。主要用于对JAVA应用程序和JVM进行监控和管理。&quot;&gt;&lt;a hre
      
    
    </summary>
    
    
      <category term="监控" scheme="https://hkj141421.github.io/categories/%E7%9B%91%E6%8E%A7/"/>
    
    
      <category term="JMX" scheme="https://hkj141421.github.io/tags/JMX/"/>
    
      <category term="监控" scheme="https://hkj141421.github.io/tags/%E7%9B%91%E6%8E%A7/"/>
    
  </entry>
  
  <entry>
    <title>时间轮算法</title>
    <link href="https://hkj141421.github.io/2020/04/21/%E6%97%B6%E9%97%B4%E8%BD%AE%E7%AE%97%E6%B3%95/"/>
    <id>https://hkj141421.github.io/2020/04/21/%E6%97%B6%E9%97%B4%E8%BD%AE%E7%AE%97%E6%B3%95/</id>
    <published>2020-04-21T12:43:57.000Z</published>
    <updated>2020-05-09T08:41:16.874Z</updated>
    
    <content type="html"><![CDATA[<h2 id="定时任务—-时间轮算法"><a href="#定时任务—-时间轮算法" class="headerlink" title="定时任务—-时间轮算法"></a>定时任务—-时间轮算法</h2><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>在实际的业务场景中，我们常常需要周期性执行一些任务，比如巡查系统资源，处理过期数据等等。这些事情如果人工去执行的话，无疑是对人力资源的浪费。因此我们就开发出了定时任务。目前业界已有许多出色的定时任务框架，如quartz，elastic-job，包括SpringBoot也提供了定时任务，当然JDK本身也提供了定时任务功能。<br>那么我们在用这些框架的时候，有没有想过它们是怎么实现定时任务的呢？时间轮算法就是这样一种实现定时任务的方法。</p><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>时间轮算法是通过一个时间轮去维护定时任务，按照一定的时间单位对时间轮进行划分刻度。然后根据任务的延时计算任务该落在时间轮的第几个刻度，如果任务时长超出了时间轮的刻度数量，则增加一个参数记录时间轮需要转动的圈数。<br>时间轮每转动一次就检查当前刻度下的任务圈数是否为0，如果为0说明时间到了就执行任务，否则就减少任务的圈数。这样看起来已经很好了，可以满足基本的定时任务需求了，但是我们还能不能继续优化一下呢？答案是可以的。想想我们家里的水表，它是不是有多个轮子在转动，时间轮是不是也可以改造成多级联动呢？建立3个时间轮，月轮、周轮、日轮，月轮存储每个月份需要执行定时任务，转动时将当月份的任务抛到周轮，周轮转动时将当天的任务抛到日轮中，日轮转动时直接执行当前刻度下的定时任务。</p><h3 id="研究分析"><a href="#研究分析" class="headerlink" title="研究分析"></a>研究分析</h3><p>笔者从github找了一个时间轮的项目，我们来研究一下时间轮的具体实现是怎样的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;github.com&#x2F;ifesdjeen&#x2F;hashed-wheel-timer.git</span><br></pre></td></tr></table></figure><p>clone下来的项目目录是这样的，我们只需要查看core模块下的几个类就ok了。<br><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200415173800534.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM0NzcyNTY4,size_16,color_FFFFFF,t_70"  alt="在这里插入图片描述"><br>HashedWheelTimer类就是实现时间轮的类，由于篇幅有限，下面只选取一些重要代码片段讲解</p><h4 id="时间轮属性"><a href="#时间轮属性" class="headerlink" title="时间轮属性"></a>时间轮属性</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HashedWheelTimer</span> <span class="keyword">implements</span> <span class="title">ScheduledExecutorService</span> </span>&#123;</span><br><span class="line"> <span class="comment">//时间轮默认转动一次的时间，10毫秒</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span>  <span class="keyword">long</span>   DEFAULT_RESOLUTION = TimeUnit.NANOSECONDS.convert(<span class="number">10</span>, TimeUnit.MILLISECONDS);</span><br><span class="line">  <span class="comment">//时间轮默认尺寸</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span>  <span class="keyword">int</span>    DEFAULT_WHEEL_SIZE = <span class="number">512</span>;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEFAULT_TIMER_NAME = <span class="string">"hashed-wheel-timer"</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//时间轮</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> Set&lt;Registration&lt;?&gt;&gt;[] wheel;</span><br><span class="line">  <span class="comment">//时间轮尺寸</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span>                    wheelSize;</span><br><span class="line">  <span class="comment">//转动一次花费的时间</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">long</span>                   resolution;</span><br><span class="line">  <span class="comment">//运转时间轮线程的执行器</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> ExecutorService        loop;</span><br><span class="line">  <span class="comment">//运转定时任务的执行器</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> ExecutorService        executor;</span><br><span class="line">  <span class="comment">//时间轮转动的等待策略</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> WaitStrategy           waitStrategy;</span><br><span class="line">  <span class="comment">//当前时间轮所在的刻度</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">int</span> cursor = <span class="number">0</span>;</span><br></pre></td></tr></table></figure><h4 id="构造时间轮"><a href="#构造时间轮" class="headerlink" title="构造时间轮"></a>构造时间轮</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashedWheelTimer</span><span class="params">(String name, <span class="keyword">long</span> res, <span class="keyword">int</span> wheelSize, WaitStrategy strategy, ExecutorService exec)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">this</span>.waitStrategy = strategy;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">this</span>.wheel = <span class="keyword">new</span> Set[wheelSize];</span><br><span class="line">   <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; wheelSize; i++) &#123;</span><br><span class="line">     wheel[i] = <span class="keyword">new</span> ConcurrentSkipListSet&lt;&gt;();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">this</span>.wheelSize = wheelSize;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">this</span>.resolution = res;</span><br><span class="line">   <span class="keyword">final</span> Runnable loopRunnable = <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">     <span class="meta">@Override</span></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">long</span> deadline = System.nanoTime();</span><br><span class="line"></span><br><span class="line">       <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">         <span class="comment">// <span class="doctag">TODO:</span> consider extracting processing until deadline for test purposes</span></span><br><span class="line">         Set&lt;Registration&lt;?&gt;&gt; registrations = wheel[cursor];</span><br><span class="line">         <span class="comment">//遍历当前时间轮刻度中的所有任务</span></span><br><span class="line">         <span class="keyword">for</span> (Registration r : registrations) &#123;</span><br><span class="line">           <span class="keyword">if</span> (r.isCancelled()) &#123;</span><br><span class="line">             registrations.remove(r);</span><br><span class="line">           &#125; <span class="keyword">else</span> <span class="keyword">if</span> (r.ready()) &#123;</span><br><span class="line">             executor.execute(r);</span><br><span class="line">             registrations.remove(r);</span><br><span class="line"></span><br><span class="line">             <span class="keyword">if</span> (!r.isCancelAfterUse()) &#123;</span><br><span class="line">               reschedule(r);</span><br><span class="line">             &#125;</span><br><span class="line">           &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">             r.decrement();</span><br><span class="line">           &#125;</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         deadline += resolution;</span><br><span class="line"></span><br><span class="line">         <span class="keyword">try</span> &#123;</span><br><span class="line">           waitStrategy.waitUntil(deadline);</span><br><span class="line">         &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">           <span class="keyword">return</span>;</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         cursor = (cursor + <span class="number">1</span>) % wheelSize;</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;;</span><br><span class="line">   <span class="comment">//使用单线程池运行时间轮线程</span></span><br><span class="line">   <span class="keyword">this</span>.loop = Executors.newSingleThreadExecutor(<span class="keyword">new</span> ThreadFactory() &#123;</span><br><span class="line">     AtomicInteger i = <span class="keyword">new</span> AtomicInteger();</span><br><span class="line"></span><br><span class="line">     <span class="meta">@Override</span></span><br><span class="line">     <span class="function"><span class="keyword">public</span> Thread <span class="title">newThread</span><span class="params">(Runnable r)</span> </span>&#123;</span><br><span class="line">       Thread thread = <span class="keyword">new</span> Thread(r, name + <span class="string">"-"</span> + i.getAndIncrement());</span><br><span class="line">       thread.setDaemon(<span class="keyword">true</span>);</span><br><span class="line">       <span class="keyword">return</span> thread;</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;);</span><br><span class="line">   <span class="keyword">this</span>.loop.submit(loopRunnable);</span><br><span class="line">   <span class="keyword">this</span>.executor = exec;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h4 id="加入定时任务"><a href="#加入定时任务" class="headerlink" title="加入定时任务"></a>加入定时任务</h4><p>该方法用于加入初次延时与后续延时不一致的任务，另外两个一次性任务和固定频率的任务与该方法大同小异</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> &lt;V&gt; <span class="function">Registration&lt;V&gt; <span class="title">scheduleFixedRate</span><span class="params">(<span class="keyword">long</span> recurringTimeout,</span></span></span><br><span class="line"><span class="function"><span class="params">                                              <span class="keyword">long</span> firstDelay,</span></span></span><br><span class="line"><span class="function"><span class="params">                                              Callable&lt;V&gt; callable)</span> </span>&#123;</span><br><span class="line">  assertRunning();</span><br><span class="line">  <span class="comment">//任务执行的时间间隔必须大于时间轮转动一次的时间</span></span><br><span class="line">  isTrue(recurringTimeout &gt;= resolution,</span><br><span class="line">         <span class="string">"Cannot schedule tasks for amount of time less than timer precision."</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//根据任务延迟时间和时间轮转动一次的时间计算时间轮执行任务所需转动的刻度</span></span><br><span class="line">  <span class="keyword">int</span> offset = (<span class="keyword">int</span>) (recurringTimeout / resolution);</span><br><span class="line">  <span class="comment">//根据时间轮执行任务所需转动的刻度和时间轮刻度数量计算所需执行任务所需转动的圈数</span></span><br><span class="line">  <span class="keyword">int</span> rounds = offset / wheelSize;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//根据初始任务延迟时间和时间轮转动一次的时间计算时间轮初次执行任务所需转动的刻度</span></span><br><span class="line">  <span class="keyword">int</span> firstFireOffset = (<span class="keyword">int</span>) (firstDelay / resolution);</span><br><span class="line">  <span class="comment">//根据时间轮初次执行任务所需转动的刻度和时间轮刻度数量计算所需初次执行任务所需转动的圈数</span></span><br><span class="line">  <span class="keyword">int</span> firstFireRounds = firstFireOffset / wheelSize;</span><br><span class="line"></span><br><span class="line">  Registration&lt;V&gt; r = <span class="keyword">new</span> FixedRateRegistration&lt;&gt;(firstFireRounds, callable, recurringTimeout, rounds, offset);</span><br><span class="line">  <span class="comment">//刻度总是+1，因为firstFireOffset是两个整数相除的结果，会出现精度丢失的情况。因此对刻度直接+1进行补偿.</span></span><br><span class="line">  <span class="comment">//并且+1也可以避免出现时间轮已遍历完当前刻度的所有任务，正处于等待状态时，外部在当前刻度加入新的任务，导致任务延迟一圈</span></span><br><span class="line">  wheel[idx(cursor + firstFireOffset + <span class="number">1</span>)].add(r);</span><br><span class="line">  <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Registration接口是基础定时任务，所有的定时任务类都需要实现这个接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Registration</span>&lt;<span class="title">T</span>&gt; <span class="keyword">extends</span> <span class="title">ScheduledFuture</span>&lt;<span class="title">T</span>&gt;, <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">enum</span> Status &#123;</span><br><span class="line">    CANCELLED,</span><br><span class="line">    READY</span><br><span class="line">    <span class="comment">// COMPLETED ??</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//距离执行任务的时间轮圈数</span></span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">rounds</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Decrement an amount of runs Registration has to run until it's elapsed</span></span><br><span class="line"><span class="comment">   * 减少剩余执行圈数</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">decrement</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Check whether the current Registration is ready for execution</span></span><br><span class="line"><span class="comment">   *检查当前任务是否进入准备执行状态</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span> whether or not the current Registration is ready for execution</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">boolean</span> <span class="title">ready</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Reset the Registration</span></span><br><span class="line"><span class="comment">   * 重置当前任务的状态</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">reset</span><span class="params">()</span></span>;</span><br><span class="line"> <span class="comment">//取消定时任务</span></span><br><span class="line">  <span class="function"><span class="keyword">boolean</span> <span class="title">cancel</span><span class="params">(<span class="keyword">boolean</span> mayInterruptIfRunning)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Check whether the current Registration is cancelled</span></span><br><span class="line"><span class="comment">   *检查任务是否取消</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span> whether or not the current Registration is cancelled</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">boolean</span> <span class="title">isCancelled</span><span class="params">()</span></span>;</span><br><span class="line"> <span class="comment">//检查任务是否已完成</span></span><br><span class="line">  <span class="function"><span class="keyword">boolean</span> <span class="title">isDone</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Get the offset of the Registration relative to the current cursor position</span></span><br><span class="line"><span class="comment">   * to make it fire timely.</span></span><br><span class="line"><span class="comment">   *获取任务所在的刻度</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span> the offset of current Registration</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">getOffset</span><span class="params">()</span></span>;</span><br><span class="line"> <span class="comment">//任务执行后是否需要移除</span></span><br><span class="line">  <span class="function"><span class="keyword">boolean</span> <span class="title">isCancelAfterUse</span><span class="params">()</span></span>;</span><br><span class="line"> <span class="comment">//获取任务的执行间隔时间，以纳秒为单位</span></span><br><span class="line">  <span class="function"><span class="keyword">long</span> <span class="title">getDelay</span><span class="params">(TimeUnit unit)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">default</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Delayed o)</span> </span>&#123;</span><br><span class="line">    Registration other = (Registration) o;</span><br><span class="line">    <span class="keyword">long</span> r1 = rounds();</span><br><span class="line">    <span class="keyword">long</span> r2 = other.rounds();</span><br><span class="line">    <span class="keyword">if</span> (r1 == r2) &#123;</span><br><span class="line">      <span class="keyword">return</span> other == <span class="keyword">this</span> ? <span class="number">0</span> : -<span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> Long.compare(r1, r2);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function">T <span class="title">get</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException, ExecutionException</span>;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function">T <span class="title">get</span><span class="params">(<span class="keyword">long</span> timeout, TimeUnit unit)</span> <span class="keyword">throws</span> InterruptedException, ExecutionException, TimeoutException</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>FixedDelayRegistration，FixedRateRegistration，OneShotRegistration三个类分别是初次延迟后续固定频率定时任务，固定频率定时任务，一次性定时任务。这些类没有什么好讲的都是实现Registration或继承OneShotRegistration类重写一些方法而已。</p><h4 id="时间轮等待策略"><a href="#时间轮等待策略" class="headerlink" title="时间轮等待策略"></a>时间轮等待策略</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">WaitStrategy</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Wait until the given deadline, deadlineNanoseconds</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> deadlineNanoseconds deadline to wait for, in milliseconds</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">waitUntil</span><span class="params">(<span class="keyword">long</span> deadlineNanoseconds)</span> <span class="keyword">throws</span> InterruptedException</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Yielding wait strategy.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * Spins in the loop, until the deadline is reached. Releases the flow control</span></span><br><span class="line"><span class="comment">   * by means of Thread.yield() call. This strategy is less precise than BusySpin</span></span><br><span class="line"><span class="comment">   * one, but is more scheduler-friendly.</span></span><br><span class="line"><span class="comment">   * 线程让度等待策略</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">YieldingWait</span> <span class="keyword">implements</span> <span class="title">WaitStrategy</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">waitUntil</span><span class="params">(<span class="keyword">long</span> deadline)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">      <span class="keyword">while</span> (deadline &gt;= System.nanoTime()) &#123;</span><br><span class="line">        Thread.yield();</span><br><span class="line">        <span class="keyword">if</span> (Thread.currentThread().isInterrupted()) &#123;</span><br><span class="line">          <span class="keyword">throw</span> <span class="keyword">new</span> InterruptedException();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * BusySpin wait strategy.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * Spins in the loop until the deadline is reached. In a multi-core environment,</span></span><br><span class="line"><span class="comment">   * will occupy an entire core. Is more precise than Sleep wait strategy, but</span></span><br><span class="line"><span class="comment">   * consumes more resources.</span></span><br><span class="line"><span class="comment">   * 通过空自旋策略阻塞线程，达到时间轮的轮转效果，消耗的资源比睡眠策略多，但是要更准确</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">BusySpinWait</span> <span class="keyword">implements</span> <span class="title">WaitStrategy</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">waitUntil</span><span class="params">(<span class="keyword">long</span> deadline)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">      Long sd=System.nanoTime();</span><br><span class="line">      <span class="keyword">while</span> (deadline &gt;= System.nanoTime()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (Thread.currentThread().isInterrupted()) &#123;</span><br><span class="line">          <span class="keyword">throw</span> <span class="keyword">new</span> InterruptedException();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      Long ed=System.nanoTime();</span><br><span class="line"><span class="comment">//      System.out.println("等待时间："+(ed-sd));</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Sleep wait strategy.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * Will release the flow control, giving other threads a possibility of execution</span></span><br><span class="line"><span class="comment">   * on the same processor. Uses less resources than BusySpin wait, but is less</span></span><br><span class="line"><span class="comment">   * precise.</span></span><br><span class="line"><span class="comment">   * 通过线程休眠的方式实现时间轮的跳动，比BusySpin方式占用的资源少，但是没有它那么精准</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SleepWait</span> <span class="keyword">implements</span> <span class="title">WaitStrategy</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">waitUntil</span><span class="params">(<span class="keyword">long</span> deadline)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">      <span class="keyword">long</span> sleepTimeNanos = deadline - System.nanoTime();</span><br><span class="line">      <span class="keyword">if</span> (sleepTimeNanos &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">long</span> sleepTimeMillis = sleepTimeNanos / <span class="number">1000000</span>;</span><br><span class="line">        <span class="keyword">int</span> sleepTimeNano = (<span class="keyword">int</span>) (sleepTimeNanos - (sleepTimeMillis * <span class="number">1000000</span>));</span><br><span class="line">        Thread.sleep(sleepTimeMillis, sleepTimeNano);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>到这里整个项目的讲解基本就已经结束了，在core模块的test目录下有测试方法，读者可以自行测试项目。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;定时任务—-时间轮算法&quot;&gt;&lt;a href=&quot;#定时任务—-时间轮算法&quot; class=&quot;headerlink&quot; title=&quot;定时任务—-时间轮算法&quot;&gt;&lt;/a&gt;定时任务—-时间轮算法&lt;/h2&gt;&lt;h3 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;head
      
    
    </summary>
    
    
    
      <category term="算法" scheme="https://hkj141421.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Java NIO基础</title>
    <link href="https://hkj141421.github.io/2020/04/21/JavaNio%E5%9F%BA%E7%A1%80/"/>
    <id>https://hkj141421.github.io/2020/04/21/JavaNio%E5%9F%BA%E7%A1%80/</id>
    <published>2020-04-21T12:43:57.000Z</published>
    <updated>2020-04-22T13:36:31.765Z</updated>
    
    <content type="html"><![CDATA[<h4 id="NIo（Non-Block-IO）是java1-4以后提供的API，它是一个异步，面向缓冲区的IO，遵循React线程模型。"><a href="#NIo（Non-Block-IO）是java1-4以后提供的API，它是一个异步，面向缓冲区的IO，遵循React线程模型。" class="headerlink" title="NIo（Non-Block IO）是java1.4以后提供的API，它是一个异步，面向缓冲区的IO，遵循React线程模型。"></a>NIo（Non-Block IO）是java1.4以后提供的API，它是一个异步，面向缓冲区的IO，遵循React线程模型。</h4><h5 id="NIO与BIO的区别"><a href="#NIO与BIO的区别" class="headerlink" title="NIO与BIO的区别"></a>NIO与BIO的区别</h5><ol><li><p>NIO是非阻塞的IO。NIO在进行读操作时，如果当前没有可读数据，则不会堵塞在这里，而是继续向下执行，进行写操作时也不会等待数据全部写入，而是可以继续执行。BIO即我们以前使用的IO流，它是一个同步阻塞的IO流。它在进行读操作时，必须读取到有效数据才会继续执行，否则就堵塞，同样的进行写操作时也必须等待数据全部写入，才能袭击执行。</p></li><li><p>NIO是通过缓冲区读写数据，BIO则是通过流来读写数据。</p></li><li><p>NIO只使用一个Channel来读写数据，BIO则必须通过两个读写流来读写数据。</p></li></ol><h5 id="NIO基本概念"><a href="#NIO基本概念" class="headerlink" title="NIO基本概念"></a>NIO基本概念</h5><ol><li><p>Channel：IO通道，配合缓冲区可以进行读写操作。它与流的不同之处在于它是全双工的，可读可写，因此它比流更好映射底层系统的API</p></li><li><p>Selector：多路复用器，用于监听读写连接事件，是NIO 的核心组件之一。它会不断轮询已注册的channel，一旦发生监听的事件就会将事件放入selectorkey中，</p></li></ol><ol start="3"><li>Buffer：缓冲区，NIO中都是通过缓冲区来进行读取写入的。它本质上是一个数组，内部除了数组外还维护了读写位置的信息。</li></ol><p>ByteBuffer的重要属性</p><table><thead><tr><th>属性</th><th>作用</th></tr></thead><tbody><tr><td>Capacity</td><td>容量，即可以容纳的最大数据量；在缓冲区创建时被设定并且不能改变</td></tr><tr><td>Limit</td><td>在写模式下表示最多能写入多少数据，此时和capacity相同。在读模式下表示最多能读多少数据，此时和缓存区的实际数据大小相同。</td></tr><tr><td>Position</td><td>位置，下一个要被读或写的元素的索引，每次读写缓冲区数据时都会改变改值，为下次读写作准备</td></tr><tr><td>Mark</td><td>标记，调用mark()来设置mark=position，再调用reset()可以让position恢复到标记的位置</td></tr></tbody></table><h5 id="NIO服务器客户端通信例子"><a href="#NIO服务器客户端通信例子" class="headerlink" title="NIO服务器客户端通信例子"></a>NIO服务器客户端通信例子</h5><p>NIO 服务端</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line">package FrameWork.com.nio.server;</span><br><span class="line"></span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.net.InetSocketAddress;</span><br><span class="line">import java.nio.ByteBuffer;</span><br><span class="line">import java.nio.channels.*;</span><br><span class="line">import java.util.Iterator;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * Created by forget on 2019&#x2F;11&#x2F;26.</span><br><span class="line"> *&#x2F;</span><br><span class="line">public class NioServer implements Runnable&#123;</span><br><span class="line"></span><br><span class="line">    private ServerSocketChannel serverSocketChannel;</span><br><span class="line"></span><br><span class="line">    private String host&#x3D;&quot;localhost&quot;;</span><br><span class="line"></span><br><span class="line">    private Selector selector;</span><br><span class="line"></span><br><span class="line">    private int port&#x3D;8011;</span><br><span class="line"></span><br><span class="line">    public NioServer() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public NioServer(String host, int port) &#123;</span><br><span class="line">        this.host &#x3D; host;</span><br><span class="line">        this.port &#x3D; port;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void start() throws IOException &#123;</span><br><span class="line">        selector&#x3D;Selector.open();</span><br><span class="line">        serverSocketChannel&#x3D;ServerSocketChannel.open();</span><br><span class="line">        serverSocketChannel.bind(new InetSocketAddress(host,port));</span><br><span class="line">        serverSocketChannel.configureBlocking(false);</span><br><span class="line">        serverSocketChannel.register(selector, SelectionKey.OP_ACCEPT);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void run() &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            start();</span><br><span class="line">            System.out.println(&quot;开启服务器,地址是&quot;+host+&quot;:&quot;+port);</span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        while (true)&#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                if(selector.select(1000)&#x3D;&#x3D;0)</span><br><span class="line">                &#123;</span><br><span class="line">                    System.out.print(&quot;.&quot;);</span><br><span class="line">                    continue;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                Iterator&lt;SelectionKey&gt; keys&#x3D;selector.selectedKeys().iterator();</span><br><span class="line">                SelectionKey key&#x3D;null;</span><br><span class="line">                   while (keys.hasNext())&#123;</span><br><span class="line">                       key&#x3D;keys.next();</span><br><span class="line">                       keys.remove();</span><br><span class="line">                       if(key.isValid())</span><br><span class="line">                       &#123;</span><br><span class="line">                           if(key.isReadable())</span><br><span class="line">                           &#123;</span><br><span class="line">                               SocketChannel socketChannel&#x3D; (SocketChannel) key.channel();</span><br><span class="line">                               ByteBuffer byteBuffer&#x3D;ByteBuffer.allocate(1024);</span><br><span class="line">                               int l&#x3D;socketChannel.read(byteBuffer);</span><br><span class="line">                               if(l&gt;0)</span><br><span class="line">                               &#123;</span><br><span class="line">                                   byteBuffer.flip();</span><br><span class="line">                                   byte[] bytes&#x3D;new byte[byteBuffer.remaining()];</span><br><span class="line">                                   byteBuffer.get(bytes);</span><br><span class="line">                                   String body&#x3D;new String(bytes,&quot;UTF-8&quot;);</span><br><span class="line">                                   System.out.println(&quot;消息内容：&quot;+body);</span><br><span class="line">                                   write(&quot;你好，客户端，收到消息：&quot;+body,socketChannel);</span><br><span class="line">                               &#125;</span><br><span class="line">                               else if(l&lt;0)</span><br><span class="line">                               &#123;</span><br><span class="line">                                   key.cancel();</span><br><span class="line">                                   socketChannel.close();</span><br><span class="line">                               &#125;</span><br><span class="line">                           &#125;</span><br><span class="line"></span><br><span class="line">                           if(key.isAcceptable())</span><br><span class="line">                           &#123;</span><br><span class="line">                               ServerSocketChannel socketChannel&#x3D; (ServerSocketChannel) key.channel();</span><br><span class="line">                               SocketChannel sc&#x3D;socketChannel.accept();</span><br><span class="line">                               sc.configureBlocking(false);</span><br><span class="line">                               sc.register(selector,SelectionKey.OP_READ);</span><br><span class="line">                           &#125;</span><br><span class="line">                       &#125;</span><br><span class="line"></span><br><span class="line">                   &#125;</span><br><span class="line">            &#125; catch (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">                System.exit(1);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void write(String message,SocketChannel socketChannel) throws IOException &#123;</span><br><span class="line">        byte [] bytes&#x3D;message.getBytes();</span><br><span class="line">        ByteBuffer byteBuffer&#x3D;ByteBuffer.allocate(bytes.length);</span><br><span class="line">        byteBuffer.put(bytes);</span><br><span class="line">        byteBuffer.flip();</span><br><span class="line">        socketChannel.write(byteBuffer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>NIO的ServerSocketChannel 对应的就是BIO的ServerSocket，此处我们先获取一个ServerSocketChannel 对象，绑定地址，将channel配置为非阻塞模式，register方法将channel注册到selector多路复用器上监听客户端的连接请求。Selector不断轮询Channel查看是否有就绪的事件。处理连接事件，配置客户端Socket参数，注册到Selector监听可读事件，处理读取事件，通过缓冲区异步读取数据，调用flip方法切换缓冲区至读模式。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line">package FrameWork.com.nio.client;</span><br><span class="line"></span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.net.InetSocketAddress;</span><br><span class="line">import java.nio.ByteBuffer;</span><br><span class="line">import java.nio.channels.*;</span><br><span class="line">import java.util.Iterator;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * Created by forget on 2019&#x2F;11&#x2F;26.</span><br><span class="line"> *&#x2F;</span><br><span class="line">public class Client implements Runnable&#123;</span><br><span class="line"></span><br><span class="line">    private Selector selector;</span><br><span class="line"></span><br><span class="line">    private SocketChannel socketChannel;</span><br><span class="line"></span><br><span class="line">    public Client() throws IOException &#123;</span><br><span class="line">        selector&#x3D;Selector.open();</span><br><span class="line">        socketChannel&#x3D;SocketChannel.open();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void start() throws IOException &#123;</span><br><span class="line">        socketChannel.configureBlocking(false);</span><br><span class="line">        boolean res&#x3D;socketChannel.connect(new InetSocketAddress(&quot;localhost&quot;,8011));</span><br><span class="line">        if(res)</span><br><span class="line">        &#123;</span><br><span class="line">            System.out.println(&quot;连接就绪&quot;);</span><br><span class="line">            socketChannel.register(selector, SelectionKey.OP_READ);</span><br><span class="line">        &#125;</span><br><span class="line">        else &#123;</span><br><span class="line">            socketChannel.register(selector,SelectionKey.OP_CONNECT);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void run() &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            start();</span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        while(true)&#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                selector.select(1000);</span><br><span class="line">                Iterator&lt;SelectionKey&gt; keys&#x3D;selector.selectedKeys().iterator();</span><br><span class="line">                SelectionKey key&#x3D;null;</span><br><span class="line">                while (keys.hasNext())</span><br><span class="line">                &#123;</span><br><span class="line">                    key&#x3D;keys.next();</span><br><span class="line">                    keys.remove();</span><br><span class="line">                    if(key.isValid())</span><br><span class="line">                    &#123;</span><br><span class="line">                        if(key.isReadable())</span><br><span class="line">                        &#123;</span><br><span class="line">                            SocketChannel socketChannel&#x3D; (SocketChannel) key.channel();</span><br><span class="line">                            ByteBuffer byteBuffer&#x3D;ByteBuffer.allocate(1024);</span><br><span class="line">                            int l&#x3D;socketChannel.read(byteBuffer);</span><br><span class="line">                            if(l&gt;0)</span><br><span class="line">                            &#123;</span><br><span class="line">                                byteBuffer.flip();</span><br><span class="line">                                byte [] bytes&#x3D;new byte[byteBuffer.remaining()];</span><br><span class="line">                                byteBuffer.get(bytes);</span><br><span class="line">                                String body&#x3D;new String(bytes,&quot;UTF-8&quot;);</span><br><span class="line">                                System.out.println(&quot;消息大小:&quot;+bytes.length);</span><br><span class="line">                                System.out.println(&quot;收到服务器消息：&quot;+body);</span><br><span class="line">                            &#125;</span><br><span class="line">                            else if(l&lt;0)</span><br><span class="line">                            &#123;</span><br><span class="line">                                key.cancel();</span><br><span class="line">                                socketChannel.close();</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        if(key.isConnectable())</span><br><span class="line">                        &#123;</span><br><span class="line">                            SocketChannel sc&#x3D; (SocketChannel) key.channel();</span><br><span class="line">                            if(sc.finishConnect())</span><br><span class="line">                            &#123;</span><br><span class="line">                                sc.register(selector,SelectionKey.OP_READ);</span><br><span class="line">                                System.out.println(&quot;连接服务器成功&quot;);</span><br><span class="line">                                write(&quot;hello world!&quot;,socketChannel);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; catch (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">                System.exit(1);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void write(String message, SocketChannel serverSocketChannel) throws IOException &#123;</span><br><span class="line">        byte [] bytes&#x3D;message.getBytes();</span><br><span class="line">        ByteBuffer byteBuffer&#x3D;ByteBuffer.allocate(bytes.length);</span><br><span class="line">        byteBuffer.put(bytes);</span><br><span class="line">        byteBuffer.flip();</span><br><span class="line">        serverSocketChannel.write(byteBuffer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Selector getSelector() &#123;</span><br><span class="line">        return selector;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setSelector(Selector selector) &#123;</span><br><span class="line">        this.selector &#x3D; selector;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public SocketChannel getSocketChannel() &#123;</span><br><span class="line">        return socketChannel;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setSocketChannel(SocketChannel socketChannel) &#123;</span><br><span class="line">        this.socketChannel &#x3D; socketChannel;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>NIO的SocketChannel 代表BIO的Socket，首先打开SocketChannel ，配置为非阻塞模式，连接服务器，判断是否连接成功，成功则向Selector注册读取事件，连接尚未成功则注册连接事件。Selector轮询Channel，查看是否有就绪的事件，如果是连接事件则获取SocketChannel注册读取事件到Selector，读取事件则通过缓冲区异步读取数据。</p><p>启动服务端和客户端测试效果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public class App </span><br><span class="line">&#123;</span><br><span class="line">    public static void main( String[] args )</span><br><span class="line">    &#123;</span><br><span class="line">        Thread thread&#x3D;new Thread(new NioServer());</span><br><span class="line">        thread.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">public class TestClient &#123;</span><br><span class="line"></span><br><span class="line">    public static void main( String[] args ) throws IOException &#123;</span><br><span class="line">        Client client&#x3D;new Client();</span><br><span class="line">        Thread thread&#x3D;new Thread(client);</span><br><span class="line">        thread.start();</span><br><span class="line"></span><br><span class="line">        Scanner scanner&#x3D;new Scanner(System.in);</span><br><span class="line">        String message&#x3D;null;</span><br><span class="line"></span><br><span class="line">        while(true)</span><br><span class="line">        &#123;</span><br><span class="line">            message&#x3D;scanner.nextLine();</span><br><span class="line">            ByteBuffer byteBuffer&#x3D;ByteBuffer.allocate(message.getBytes().length);</span><br><span class="line">            byteBuffer.put(message.getBytes());</span><br><span class="line">            byteBuffer.flip();</span><br><span class="line">            client.getSocketChannel().write(byteBuffer);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果如下：<br><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20191202104339264.png"  alt="在这里插入图片描述"><br><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20191202104352476.png"  alt="在这里插入图片描述"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;NIo（Non-Block-IO）是java1-4以后提供的API，它是一个异步，面向缓冲区的IO，遵循React线程模型。&quot;&gt;&lt;a href=&quot;#NIo（Non-Block-IO）是java1-4以后提供的API，它是一个异步，面向缓冲区的IO，遵循React线
      
    
    </summary>
    
    
    
      <category term="NIO" scheme="https://hkj141421.github.io/tags/NIO/"/>
    
  </entry>
  
  <entry>
    <title>SpringSecurity使用指南（一）自定义JWT认证流程</title>
    <link href="https://hkj141421.github.io/2020/04/21/SpringSecurity%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97%EF%BC%88%E4%B8%80%EF%BC%89%E8%87%AA%E5%AE%9A%E4%B9%89JWT%E8%AE%A4%E8%AF%81%E6%B5%81%E7%A8%8B/"/>
    <id>https://hkj141421.github.io/2020/04/21/SpringSecurity%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97%EF%BC%88%E4%B8%80%EF%BC%89%E8%87%AA%E5%AE%9A%E4%B9%89JWT%E8%AE%A4%E8%AF%81%E6%B5%81%E7%A8%8B/</id>
    <published>2020-04-21T12:43:57.000Z</published>
    <updated>2020-04-22T13:45:03.802Z</updated>
    
    <content type="html"><![CDATA[<p>SpringSecurity是一个非常强大的安全验证框架，它通过一个过滤器链完成了对资源的访问控制。security框架本身提供了多种验证方式，如OA，Session等，但是有些情况下还是无法满足用户的需求，故此security框架也有非常大的扩展性，它允许用户自定义认证流程，下面我们就结合security实现一个jwt认证流程。</p><h4 id="拦截登录请求"><a href="#拦截登录请求" class="headerlink" title="拦截登录请求"></a>拦截登录请求</h4><p>security框架中通过UsernamePasswordAuthenticationFilter来拦截登录请求，并将登录信息封装为待验证的token对象。由于我们需要自定义认证流程，所以要继承UsernamePasswordAuthenticationFilter的父类实现自己的拦截器来构造token。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JwtAuthenticationProcessingFilter</span> <span class="keyword">extends</span> <span class="title">AbstractAuthenticationProcessingFilter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">JwtAuthenticationProcessingFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//该过滤器会拦截哪些路径和类型的请求</span></span><br><span class="line">        <span class="keyword">super</span>(<span class="keyword">new</span> AntPathRequestMatcher(<span class="string">"/Jwtlogin"</span>, <span class="string">"POST"</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 该方法是实现将用户登录信息从request提取，并封装成一个未认证的token传给AuthenticationManager处理</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> httpServletRequest</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> httpServletResponse</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> AuthenticationException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> ServletException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Authentication <span class="title">attemptAuthentication</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse)</span> <span class="keyword">throws</span> AuthenticationException, IOException, ServletException </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String username=httpServletRequest.getParameter(<span class="string">"username"</span>);</span><br><span class="line">            String password=httpServletRequest.getParameter(<span class="string">"password"</span>);</span><br><span class="line"></span><br><span class="line">            JwtToken jwtToken=<span class="keyword">new</span> JwtToken(username,password);</span><br><span class="line">            <span class="comment">//将请求的会话id，IP地址保存在token中</span></span><br><span class="line">            jwtToken.setDetails(<span class="keyword">new</span> WebAuthenticationDetails(httpServletRequest));</span><br><span class="line">            <span class="comment">//调用认证管理器对token进行认证</span></span><br><span class="line">            Authentication authentication=<span class="keyword">this</span>.getAuthenticationManager().authenticate(jwtToken);</span><br><span class="line">            <span class="keyword">return</span> authentication;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> BadCredentialsException(<span class="string">"校验凭证失败，"</span>+e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="实现token"><a href="#实现token" class="headerlink" title="实现token"></a>实现token</h4><p>由于JwtAuthenticationProcessingFilter会调用AuthenticationManager进行认证，而AuthenticationManager内部存在多个认证方式，它通过token的类型来选择其中一种进行验证，因此我们需要实现一个自己的token。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JwtToken</span> <span class="keyword">extends</span> <span class="title">AbstractAuthenticationToken</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Object Principal;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Object Credential;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构造等待认证的token</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> principal</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> credential</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">JwtToken</span><span class="params">(Object principal, Object credential)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(<span class="keyword">null</span>);</span><br><span class="line">        Principal = principal;</span><br><span class="line">        Credential = credential;</span><br><span class="line">        <span class="comment">//设置token状态为未认证</span></span><br><span class="line">        setAuthenticated(<span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构造已认证的token</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> authorities</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> principal</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> credential</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">JwtToken</span><span class="params">(Collection&lt;? extends GrantedAuthority&gt; authorities, Object principal, Object credential)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//保存权限</span></span><br><span class="line">        <span class="keyword">super</span>(authorities);</span><br><span class="line">        Principal = principal;</span><br><span class="line">        Credential = credential;</span><br><span class="line">        <span class="comment">//设置token状态为已认证</span></span><br><span class="line">        setAuthenticated(<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getCredentials</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.Credential;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getPrincipal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.Principal;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="实现认证方式"><a href="#实现认证方式" class="headerlink" title="实现认证方式"></a>实现认证方式</h4><p>Security的认证方式都实现AuthenticationProvider接口，所以我们只需要这个接口就可以自定义认证方式了，这个接口有authenticate和supports两个方法，authenticate接收一个待认证的token作为参数，认证成功则重新构造一个已认证的token并返回。supports方法用于判断是否该认证方式支持哪种token。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JwtAuthProvider</span> <span class="keyword">implements</span> <span class="title">AuthenticationProvider</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span>(name = <span class="string">"UserDetailServiceImpl"</span>)</span><br><span class="line">    <span class="keyword">private</span> UserDetailsService userDetailsService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JwtPasswordEncoder encoder;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Authentication <span class="title">authenticate</span><span class="params">(Authentication authentication)</span> <span class="keyword">throws</span> AuthenticationException </span>&#123;</span><br><span class="line">        JwtToken jwtToken= (JwtToken) authentication;</span><br><span class="line">        UserDetails details=userDetailsService.loadUserByUsername(jwtToken.getName());</span><br><span class="line">        AuthenticationCheck(details,jwtToken);</span><br><span class="line">        SecurityCheck(details);</span><br><span class="line">        JwtToken token=<span class="keyword">new</span> JwtToken(details.getAuthorities(),details,jwtToken.getCredentials());</span><br><span class="line">        <span class="keyword">return</span> token;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">supports</span><span class="params">(Class&lt;?&gt; aClass)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> JwtToken<span class="class">.<span class="keyword">class</span>.<span class="title">isAssignableFrom</span>(<span class="title">aClass</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SecurityCheck</span><span class="params">(UserDetails details)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!details.isAccountNonLocked())&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> BadCredentialsException(<span class="string">"The Account is locked"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">AuthenticationCheck</span><span class="params">(UserDetails details,JwtToken jwtToken)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(jwtToken.getCredentials()==<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> BadCredentialsException(<span class="string">"The password not null"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!encoder.matches(details.getPassword(),jwtToken.getCredentials().toString()))&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> BadCredentialsException(<span class="string">"The Password verification failed"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="查询用户信息"><a href="#查询用户信息" class="headerlink" title="查询用户信息"></a>查询用户信息</h4><p>在Security框架自己提供的认证方式中都是通过UserDetailsService接口的loadUserByUsername方法从数据库加载用户信息，因此这里我们入乡随俗实现该接口来加载用户信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDetailServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserDetailsService</span></span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userServiceImp;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserDetails <span class="title">loadUserByUsername</span><span class="params">(String s)</span> <span class="keyword">throws</span> UsernameNotFoundException </span>&#123;</span><br><span class="line">        User user=userServiceImp.getUserByAccount(s);</span><br><span class="line">        <span class="keyword">if</span>(user==<span class="keyword">null</span>)<span class="keyword">throw</span> <span class="keyword">new</span> UsernameNotFoundException(<span class="string">"用户账号："</span>+s+<span class="string">"不存在"</span>);</span><br><span class="line">        Optional&lt;String&gt; op=userServiceImp.getUserAuthority(user.getUsername()).stream().findFirst();</span><br><span class="line">        <span class="keyword">if</span>(op.isPresent())<span class="keyword">return</span> <span class="keyword">new</span> SecurityUser(user,op.get());</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> <span class="keyword">new</span> SecurityUser(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="封装用户信息"><a href="#封装用户信息" class="headerlink" title="封装用户信息"></a>封装用户信息</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecurityUser</span> <span class="keyword">implements</span> <span class="title">UserDetails</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> User user;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> GrantedAuthority authorities;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SecurityUser</span><span class="params">(User user,String role)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.user = user;</span><br><span class="line">        <span class="keyword">this</span>.authorities= <span class="keyword">new</span> SimpleGrantedAuthority(role);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SecurityUser</span><span class="params">(User user)</span></span>&#123;<span class="keyword">this</span>.user=user;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SecurityUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SecurityUser</span><span class="params">(GrantedAuthority authoritie)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.authorities = authorities;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUser</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.user = user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Collection&lt;? extends GrantedAuthority&gt; getAuthorities() &#123;</span><br><span class="line">        ArrayList&lt;GrantedAuthority&gt; list=<span class="keyword">new</span> ArrayList&lt;GrantedAuthority&gt;();</span><br><span class="line">        list.add(<span class="keyword">this</span>.authorities);</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAuthorities</span><span class="params">(String authorities)</span> </span>&#123;</span><br><span class="line">         <span class="keyword">this</span>.authorities=<span class="keyword">new</span> SimpleGrantedAuthority(authorities);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@JSONField</span>(serialize = <span class="keyword">false</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.user.getUserpassword();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@JSONField</span>(serialize = <span class="keyword">false</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.user.getUseraccount();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@JSONField</span>(serialize = <span class="keyword">false</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isAccountNonExpired</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@JSONField</span>(serialize = <span class="keyword">false</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isAccountNonLocked</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.user.getStatus().equals(<span class="string">"0"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@JSONField</span>(serialize = <span class="keyword">false</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isCredentialsNonExpired</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@JSONField</span>(serialize = <span class="keyword">false</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEnabled</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="访问控制过滤器"><a href="#访问控制过滤器" class="headerlink" title="访问控制过滤器"></a>访问控制过滤器</h4><p>拦截所有请求，获取请求头的JWT token，如没有JWT token则直接放行，因为后续还有过滤器进行拦截，AnonymousAuthenticationFilter发现SecurityContextHolder中没有待验证的token时会加入一个已验证的匿名token，最终走到FilterSecurityInterceptor时，权限管理器再根据资源访问规则决定是否允许匿名用户访问资源。获取到JWT token并解密通过则构造已认证的token加入SecurityContextHolder。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JwtAccessFilter</span> <span class="keyword">extends</span> <span class="title">OncePerRequestFilter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getToken</span><span class="params">(HttpServletRequest httpServletRequest)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> httpServletRequest.getHeader(<span class="string">"Authorization"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doFilterInternal</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        String token=<span class="keyword">this</span>.getToken(httpServletRequest);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(token==<span class="keyword">null</span>||token.isEmpty())&#123;</span><br><span class="line">            filterChain.doFilter(httpServletRequest,httpServletResponse);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        SecurityUser securityUser;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String jsonUser=JwtUtil.parseToken(token).get(<span class="string">"data"</span>);</span><br><span class="line">            securityUser=JSONObject.parseObject(jsonUser,SecurityUser<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">            JSONObject jsonObject=JSONObject.parseObject(jsonUser);</span><br><span class="line">            securityUser.setAuthorities(jsonObject.getJSONArray(<span class="string">"authorities"</span>).getJSONObject(<span class="number">0</span>).getString(<span class="string">"authority"</span>));</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            httpServletResponse.setContentType(<span class="string">"application/json;charset=UTF-8"</span>);</span><br><span class="line">            httpServletResponse.getWriter().print(JSONObject.toJSONString(<span class="keyword">new</span> AjaxResponseBody(<span class="string">"401"</span>,<span class="string">"token已失效,请重新登录"</span>,<span class="keyword">null</span>)));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        JwtToken jwtToken=<span class="keyword">new</span> JwtToken(securityUser.getAuthorities(),securityUser,<span class="string">""</span>);</span><br><span class="line">        jwtToken.setDetails(<span class="keyword">new</span> WebAuthenticationDetails(httpServletRequest));</span><br><span class="line"></span><br><span class="line">        SecurityContextHolder.getContext().setAuthentication(jwtToken);</span><br><span class="line">        filterChain.doFilter(httpServletRequest,httpServletResponse);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="资源访问规则"><a href="#资源访问规则" class="headerlink" title="资源访问规则"></a>资源访问规则</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span>(<span class="string">"AccessRuleService"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccessRuleService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> AntPathMatcher antPathMatcher=<span class="keyword">new</span> AntPathMatcher();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">controll</span><span class="params">(HttpServletRequest request, Authentication authentication)</span></span>&#123;</span><br><span class="line">        String url=request.getRequestURI();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(antPathMatcher.match(<span class="string">"/anyone"</span>,url)) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(authentication <span class="keyword">instanceof</span> AnonymousAuthenticationToken)<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">        SecurityUser securityUser= (SecurityUser) authentication.getPrincipal();</span><br><span class="line">        Optional&lt;String&gt; op=securityUser.getAuthorities().stream().map(i-&gt;i.getAuthority()).findFirst();</span><br><span class="line">        <span class="keyword">if</span>(!op.isPresent())<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        List&lt;String&gt; Urls=queryUrlByAuthorities(op.get());</span><br><span class="line">        <span class="keyword">for</span> (String l:Urls) &#123;</span><br><span class="line">            <span class="keyword">if</span>(antPathMatcher.match(l,url))<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">queryUrlByAuthorities</span><span class="params">(String authoritie)</span></span>&#123;</span><br><span class="line">            <span class="keyword">switch</span> (authoritie)&#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">case</span> <span class="string">"USER"</span>:&#123;</span><br><span class="line">                    <span class="keyword">return</span> Arrays.asList(<span class="string">"/user"</span>);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">case</span> <span class="string">"ADMIN"</span>:&#123;<span class="keyword">return</span> Arrays.asList(<span class="string">"/user"</span>,<span class="string">"/admin"</span>);&#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">case</span> <span class="string">"SUPER ADMIN"</span>:&#123;<span class="keyword">return</span> Arrays.asList(<span class="string">"/user"</span>,<span class="string">"/admin"</span>,<span class="string">"/super"</span>);&#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">default</span>:<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="登录成功处理器"><a href="#登录成功处理器" class="headerlink" title="登录成功处理器"></a>登录成功处理器</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JwtAuthenticationSuccessHandler</span> <span class="keyword">implements</span> <span class="title">AuthenticationSuccessHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAuthenticationSuccess</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Authentication authentication)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            AjaxResponseBody ajaxResponseBody = <span class="keyword">null</span>;</span><br><span class="line">            SecurityUser securityUser = (SecurityUser) SecurityContextHolder.getContext().getAuthentication().getPrincipal();</span><br><span class="line">            httpServletResponse.setHeader(<span class="string">"Content-Type"</span>, <span class="string">"application/json;charset=utf-8"</span>);</span><br><span class="line"></span><br><span class="line">            JSONObject json=<span class="keyword">new</span> JSONObject();</span><br><span class="line">            JSONObject userjson= (JSONObject) JSONObject.toJSON(securityUser.getUser());</span><br><span class="line">            json.put(<span class="string">"token"</span>,JwtUtil.createJwtToken(JSONObject.toJSONString(securityUser)));</span><br><span class="line">            userjson.remove(<span class="string">"userpassword"</span>);</span><br><span class="line">            json.put(<span class="string">"userinfo"</span>,userjson);</span><br><span class="line">            ajaxResponseBody = <span class="keyword">new</span> AjaxResponseBody(<span class="string">"200"</span>, <span class="string">"success"</span>, json);</span><br><span class="line">            httpServletResponse.getWriter().write(JSONObject.toJSONString(ajaxResponseBody));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="失效token"><a href="#失效token" class="headerlink" title="失效token"></a>失效token</h4><p>由于token的无状态特点，因此我们很难自行失效token。笔者感觉非要失效token的话，在网上找到的诸多方法中，黑名单机制或许是一种比较好的方式。将需要失效的token存入数据库，每次访问时查看token存在失效表中。这里就由读者自行实现吧，笔者懒得弄了。</p><h4 id="组装配置"><a href="#组装配置" class="headerlink" title="组装配置"></a>组装配置</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootConfiguration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSecurityConfiguration</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JwtAuthenticationFailHandler myAuthenticationFailHandler;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JwtAuthenticationSuccessHandler myAuthenticationSuccessHandler;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JwtLogoutSuccessHandler myLogoutSuccessHandler;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JwtLogoutHandler myLogoutHandler;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JwtAccessFilter jwtAccessFilter;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JwtAuthProvider provider;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"UserDetailServiceImpl"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserDetailsService <span class="title">customUserService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> UserDetailServiceImpl();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 使用自定义UserDetailsService</span></span><br><span class="line">        auth.userDetailsService(customUserService()).passwordEncoder(<span class="keyword">new</span> JwtPasswordEncoder());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        JwtAuthenticationProcessingFilter processingFilter=<span class="keyword">new</span> JwtAuthenticationProcessingFilter();</span><br><span class="line">        <span class="comment">//设置认证失败后的处理器</span></span><br><span class="line">        processingFilter.setAuthenticationFailureHandler(myAuthenticationFailHandler);</span><br><span class="line">        <span class="comment">//设置认证成功的处理器</span></span><br><span class="line">        processingFilter.setAuthenticationSuccessHandler(myAuthenticationSuccessHandler);</span><br><span class="line">        <span class="comment">//设置用于认证的认证管理器</span></span><br><span class="line">        processingFilter.setAuthenticationManager(<span class="keyword">this</span>.authenticationManagerBean());</span><br><span class="line"><span class="comment">//将认证流程过滤器放到security的过滤器链中</span></span><br><span class="line">        http.addFilterAfter(processingFilter, UsernamePasswordAuthenticationFilter<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">        //将自定义的认证方式加入过认证管理器</span></span><br><span class="line"><span class="class">                .<span class="title">authenticationProvider</span>(<span class="title">provider</span>)</span></span><br><span class="line"><span class="class">                //<span class="title">token</span>拦截器加入过滤器链中</span></span><br><span class="line"><span class="class">                .<span class="title">addFilterAfter</span>(<span class="title">jwtAccessFilter</span>,<span class="title">JwtAuthenticationProcessingFilter</span>.<span class="title">class</span>)</span></span><br><span class="line"><span class="class">                .<span class="title">exceptionHandling</span>()</span></span><br><span class="line"><span class="class">                //设置访问权限不足时的处理器访问</span></span><br><span class="line"><span class="class">                .<span class="title">accessDeniedHandler</span>(<span class="title">new</span> <span class="title">JwtAccessDeniedHandler</span>())</span></span><br><span class="line"><span class="class">                //设置匿名用户访问被拒绝时的处理器</span></span><br><span class="line"><span class="class">                .<span class="title">authenticationEntryPoint</span>(<span class="title">new</span> <span class="title">JwtAuthenticationEntryPoint</span>())</span></span><br><span class="line"><span class="class">                .<span class="title">and</span>().<span class="title">sessionManagement</span>().<span class="title">sessionCreationPolicy</span>(<span class="title">SessionCreationPolicy</span>.<span class="title">STATELESS</span>)</span></span><br><span class="line"><span class="class">                .<span class="title">and</span>().<span class="title">csrf</span>().<span class="title">disable</span>()</span>;</span><br><span class="line"><span class="comment">//配置登出处理器</span></span><br><span class="line">        http.logout().addLogoutHandler(myLogoutHandler).logoutSuccessHandler(myLogoutSuccessHandler);</span><br><span class="line"><span class="comment">//配置资源访问规则</span></span><br><span class="line">        http.authorizeRequests().anyRequest().access(<span class="string">"@AccessRuleService.controll(request,authentication)"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><p><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200319174252145.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM0NzcyNTY4,size_16,color_FFFFFF,t_70"  alt="在这里插入图片描述"></p><p><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200319175431273.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM0NzcyNTY4,size_16,color_FFFFFF,t_70"  alt="在这里插入图片描述"></p><p><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200319175540619.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM0NzcyNTY4,size_16,color_FFFFFF,t_70"  alt="在这里插入图片描述"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;SpringSecurity是一个非常强大的安全验证框架，它通过一个过滤器链完成了对资源的访问控制。security框架本身提供了多种验证方式，如OA，Session等，但是有些情况下还是无法满足用户的需求，故此security框架也有非常大的扩展性，它允许用户自定义认证流
      
    
    </summary>
    
    
    
      <category term="SpringSecurity" scheme="https://hkj141421.github.io/tags/SpringSecurity/"/>
    
      <category term="JWT" scheme="https://hkj141421.github.io/tags/JWT/"/>
    
  </entry>
  
  <entry>
    <title>SpringMVC框架基本使用指南</title>
    <link href="https://hkj141421.github.io/2020/04/21/SpringMVC%E6%A1%86%E6%9E%B6%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/"/>
    <id>https://hkj141421.github.io/2020/04/21/SpringMVC%E6%A1%86%E6%9E%B6%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/</id>
    <published>2020-04-21T12:43:57.000Z</published>
    <updated>2020-04-21T13:58:20.228Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SpringMVC框架基本使用指南"><a href="#SpringMVC框架基本使用指南" class="headerlink" title="SpringMVC框架基本使用指南"></a>SpringMVC框架基本使用指南</h1><h3 id="一-nbsp-nbsp-MVC的基本概念"><a href="#一-nbsp-nbsp-MVC的基本概念" class="headerlink" title="一&nbsp;&nbsp;MVC的基本概念"></a>一&nbsp;&nbsp;MVC的基本概念</h3><p>SpringMVC是基于MVC模式设计的。MVC模式将应用的输入，处理，输出分离开来，形成模型层，控制层，视图层。M：代表数据模型，即根据业务逻辑处理的数据以及一些安全，日志模块。V：代表视图，即jsp页面，html页面等表现数据结果的界面。C：代表控制器，接受视图的请求，根据请求选择对应的数据模型进行处理。并将结果返回给对应的视图。</p><h3 id="二-nbsp-nbsp-MVC的优点"><a href="#二-nbsp-nbsp-MVC的优点" class="headerlink" title="二&nbsp;&nbsp;MVC的优点"></a>二&nbsp;&nbsp;MVC的优点</h3><ol><li>可以有效的降低模块之间的耦合度,当视图发生改变时，模型层和控制层无需改动。</li><li>可以提高模型的复用性，多个视图可以共用同一套数据模型，无需重写一套模型。</li><li>简单易用。</li><li>方便后期的维护。</li></ol><h3 id="三-nbsp-nbsp-SpringMVC的工作流程"><a href="#三-nbsp-nbsp-SpringMVC的工作流程" class="headerlink" title="三&nbsp;&nbsp;SpringMVC的工作流程"></a>三&nbsp;&nbsp;SpringMVC的工作流程</h3><ol><li>用户向DispatcherServlet发送请求。</li><li>DispatcherServlet将请求交个HandlerMapping处理。</li><li>HandlerMapping根据URL找到对应的Controller,并返回给DispatcherServlet。</li><li>DispatcherServlet调用HandlerAdapter进行参数封装，数据格式转换，数据验证等操作，最后调用具体的Controller方法。</li><li>Controller方法执行完后，返回ModelAndView对象给HandlerAdapter，HandlerAdapter再返回给DispatcherServlet。</li><li>DispatcherServlet将ModelAndView对象交给ViewReslover视图解析器处理。</li><li>ViewReslover视图解析器解析成视图，返回给DispatcherServlet。</li><li>DispatcherServlet将数据填充到视图中。</li><li>DispatcherServlet将渲染后的视图返回给用户。</li></ol><h3 id="四-nbsp-nbsp-搭建SpringMVC框架"><a href="#四-nbsp-nbsp-搭建SpringMVC框架" class="headerlink" title="四&nbsp;&nbsp;搭建SpringMVC框架"></a>四&nbsp;&nbsp;搭建SpringMVC框架</h3><p>自从Spring3以后，SpringMVC框架就支持xml和java两种配置方法，下面我们先看看如何使用xml配置SpringMVC框架.</p><h4 id="1-xml配置SpringMVC框架"><a href="#1-xml配置SpringMVC框架" class="headerlink" title="1.xml配置SpringMVC框架"></a>1.xml配置SpringMVC框架</h4><p>第一步：导入Maven依赖</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"> &lt;dependency&gt;</span><br><span class="line">     &lt;groupId&gt;org.springframework&lt;&#x2F;groupId&gt;</span><br><span class="line">     &lt;artifactId&gt;spring-webmvc&lt;&#x2F;artifactId&gt;</span><br><span class="line">     &lt;version&gt;5.1.7.RELEASE&lt;&#x2F;version&gt;</span><br><span class="line"> &lt;&#x2F;dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">     &lt;groupId&gt;org.springframework&lt;&#x2F;groupId&gt;</span><br><span class="line">     &lt;artifactId&gt;spring-web&lt;&#x2F;artifactId&gt;</span><br><span class="line">     &lt;version&gt;5.1.7.RELEASE&lt;&#x2F;version&gt;</span><br><span class="line"> &lt;&#x2F;dependency&gt;</span><br><span class="line"> &lt;dependency&gt;</span><br><span class="line">     &lt;groupId&gt;org.springframework&lt;&#x2F;groupId&gt;</span><br><span class="line">     &lt;artifactId&gt;spring-core&lt;&#x2F;artifactId&gt;</span><br><span class="line">     &lt;version&gt;5.1.7.RELEASE&lt;&#x2F;version&gt;</span><br><span class="line">  &lt;&#x2F;dependency&gt;</span><br><span class="line">   &lt;dependency&gt;</span><br><span class="line">         &lt;groupId&gt;org.springframework&lt;&#x2F;groupId&gt;</span><br><span class="line">         &lt;artifactId&gt;spring-aop&lt;&#x2F;artifactId&gt;</span><br><span class="line">         &lt;version&gt;5.1.7.RELEASE&lt;&#x2F;version&gt;</span><br><span class="line">   &lt;&#x2F;dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">         &lt;groupId&gt;org.springframework&lt;&#x2F;groupId&gt;</span><br><span class="line">         &lt;artifactId&gt;spring-beans&lt;&#x2F;artifactId&gt;</span><br><span class="line">         &lt;version&gt;5.1.7.RELEASE&lt;&#x2F;version&gt;</span><br><span class="line">     &lt;&#x2F;dependency&gt;</span><br><span class="line">     &lt;dependency&gt;</span><br><span class="line">         &lt;groupId&gt;org.springframework&lt;&#x2F;groupId&gt;</span><br><span class="line">         &lt;artifactId&gt;spring-context&lt;&#x2F;artifactId&gt;</span><br><span class="line">         &lt;version&gt;5.1.7.RELEASE&lt;&#x2F;version&gt;</span><br><span class="line">     &lt;&#x2F;dependency&gt;</span><br><span class="line">     &lt;dependency&gt;</span><br><span class="line">         &lt;groupId&gt;commons-logging&lt;&#x2F;groupId&gt;</span><br><span class="line">         &lt;artifactId&gt;commons-logging&lt;&#x2F;artifactId&gt;</span><br><span class="line">         &lt;version&gt;1.2&lt;&#x2F;version&gt;</span><br><span class="line">     &lt;&#x2F;dependency&gt;</span><br><span class="line">     &lt;dependency&gt;</span><br><span class="line">         &lt;groupId&gt;org.aspectj&lt;&#x2F;groupId&gt;</span><br><span class="line">         &lt;artifactId&gt;aspectjweaver&lt;&#x2F;artifactId&gt;</span><br><span class="line">         &lt;version&gt;1.9.2&lt;&#x2F;version&gt;</span><br><span class="line">     &lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><p>第二步：配置web.xml文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE web-app PUBLIC</span><br><span class="line"> &quot;-&#x2F;&#x2F;Sun Microsystems, Inc.&#x2F;&#x2F;DTD Web Application 2.3&#x2F;&#x2F;EN&quot;</span><br><span class="line"> &quot;http:&#x2F;&#x2F;java.sun.com&#x2F;dtd&#x2F;web-app_2_3.dtd&quot; &gt;</span><br><span class="line"></span><br><span class="line">&lt;web-app&gt;</span><br><span class="line"></span><br><span class="line">  &lt;servlet&gt;</span><br><span class="line">    &lt;servlet-name&gt;SpringMVC&lt;&#x2F;servlet-name&gt;</span><br><span class="line">    &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;&#x2F;servlet-class&gt;</span><br><span class="line">    &lt;init-param&gt;</span><br><span class="line">      &lt;param-name&gt;contextConfigLocation&lt;&#x2F;param-name&gt;</span><br><span class="line">      &lt;param-value&gt;classpath:config&#x2F;SpringMVC_Config.xml&lt;&#x2F;param-value&gt;</span><br><span class="line">    &lt;&#x2F;init-param&gt;</span><br><span class="line">  &lt;&#x2F;servlet&gt;</span><br><span class="line"></span><br><span class="line">  &lt;servlet-mapping&gt;</span><br><span class="line">    &lt;servlet-name&gt;SpringMVC&lt;&#x2F;servlet-name&gt;</span><br><span class="line">    &lt;url-pattern&gt;&#x2F;&lt;&#x2F;url-pattern&gt;</span><br><span class="line">  &lt;&#x2F;servlet-mapping&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;web-app&gt;</span><br></pre></td></tr></table></figure><p>servlet配置了DispatcherServlet，初始参数为config/SpringMVC_Config.xml，servlet-mapping里配置这个servlet会拦截所有的请求。如果没有指定初始化参数，SpringMVC默认会去找/WEB-INF/SpringMVC-servlet.xml。</p><br><p>第三步：配置SpringMVC_Config.xml文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&quot;</span><br><span class="line">       xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;</span><br><span class="line">       xmlns:context&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context&quot;</span><br><span class="line">       xmlns:mvc&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;mvc&quot;</span><br><span class="line">       xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&#x2F;spring-beans.xsd</span><br><span class="line">        http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context&#x2F;spring-context-4.1.xsd</span><br><span class="line">        http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;mvc http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;mvc&#x2F;spring-mvc-4.1.xsd&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 开启注解扫描 --&gt;</span><br><span class="line">    &lt;context:component-scan base-package&#x3D;&quot;com.study.Controller&quot;&#x2F;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 不拦截静态资源 --&gt;</span><br><span class="line">    &lt;mvc:default-servlet-handler &#x2F;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--&lt;mvc:resources mapping&#x3D;&quot;images&#x2F;,&quot; location&#x3D;&quot;classpath:images&#x2F;&quot;&gt;&lt;&#x2F;mvc:resources&gt;--&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 开启mvc注解支持--&gt;</span><br><span class="line">    &lt;mvc:annotation-driven &#x2F;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 配置视图解析器 --&gt;</span><br><span class="line">    &lt;bean class&#x3D;&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot; id&#x3D;&quot;internalResourceViewResolver&quot;&gt;</span><br><span class="line">        &lt;!-- 前缀 --&gt;</span><br><span class="line">        &lt;property name&#x3D;&quot;prefix&quot; value&#x3D;&quot;&#x2F;WEB-INF&#x2F;jsp&#x2F;&quot; &#x2F;&gt;</span><br><span class="line">        &lt;!-- 后缀 --&gt;</span><br><span class="line">        &lt;property name&#x3D;&quot;suffix&quot; value&#x3D;&quot;.jsp&quot; &#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;bean&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;beans&gt;</span><br></pre></td></tr></table></figure><p>上文中mvc:default-servlet-handler标签和mvc:resources标签都可以实现不拦截静态资源的效果，任选其一。</p><p>第四步：测试框架配置<br>视图 index.jsp</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType&#x3D;&quot;text&#x2F;html;charset&#x3D;UTF-8&quot; language&#x3D;&quot;java&quot; isELIgnored&#x3D;&quot;false&quot; %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h2&gt;Hello World!&lt;&#x2F;h2&gt;</span><br><span class="line">$&#123;key&#125;</span><br><span class="line">&lt;h1&gt;&lt;%  out.print(request.getAttribute(&quot;key&quot;));%&gt;&lt;&#x2F;h1&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p>控制器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.study.Controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.DispatcherServlet;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/hello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">print</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        ModelAndView model=<span class="keyword">new</span> ModelAndView();</span><br><span class="line">        model.setViewName(<span class="string">"hello"</span>);</span><br><span class="line">        model.addObject(<span class="string">"key"</span>,<span class="string">"546565151231"</span>);</span><br><span class="line">        <span class="keyword">return</span> model;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">first</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        ModelAndView model=<span class="keyword">new</span> ModelAndView();</span><br><span class="line">        model.setViewName(<span class="string">"index"</span>);</span><br><span class="line">        model.addObject(<span class="string">"key"</span>,<span class="string">"5465651"</span>);</span><br><span class="line">        <span class="keyword">return</span> model;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> @Controller注解：标注该类为一个Controller类。<br> @RequestMapping注解：用于配置方法的请求映射路径。<br>运行服务器，根据请求url <a href="http://localhost:8080" target="_blank" rel="noopener">http://localhost:8080</a> DispatcherServlet最终会调用first方法，first方法创建了一个ModelAndView 对象，调用setViewName方法设置视图名，调用addObject方法添加数据。最终将对象返回给DispatcherServlet。DispatcherServlet此时调用视图解析器解析视图，最终渲染到index视图中。<br>运行结果：</p><p><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20190609152237205.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM0NzcyNTY4,size_16,color_FFFFFF,t_70"  alt="在这里插入图片描述"></p><h4 id="2-java配置SpringMVC框架"><a href="#2-java配置SpringMVC框架" class="headerlink" title="2.java配置SpringMVC框架"></a>2.java配置SpringMVC框架</h4><p>使用java配置SpringMVC框架，可以完全摆脱web.xml文件。只需添加几个配置类即可<br>第一步：配置MVC框架配置类</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">package com.study.Config;</span><br><span class="line"></span><br><span class="line">import org.springframework.context.annotation.Bean;</span><br><span class="line">import org.springframework.context.annotation.ComponentScan;</span><br><span class="line">import org.springframework.context.annotation.Configuration;</span><br><span class="line">import org.springframework.web.bind.annotation.ControllerAdvice;</span><br><span class="line">import org.springframework.web.servlet.config.annotation.*;</span><br><span class="line">import org.springframework.web.servlet.support.AbstractAnnotationConfigDispatcherServletInitializer;</span><br><span class="line">import org.springframework.web.servlet.view.InternalResourceViewResolver;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * Created by forget on 2019&#x2F;6&#x2F;9.</span><br><span class="line"> *&#x2F;</span><br><span class="line">@EnableWebMvc</span><br><span class="line">@Configuration</span><br><span class="line">@ComponentScan(basePackages &#x3D; &quot;com.study.Controller&quot;)</span><br><span class="line">public class SpringMVCConfig implements WebMvcConfigurer&#123;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;    @Bean</span><br><span class="line">&#x2F;&#x2F;    public InternalResourceViewResolver internalResourceViewResolver()&#123;</span><br><span class="line">&#x2F;&#x2F;&#x2F;&#x2F;        配置视图解析器</span><br><span class="line">&#x2F;&#x2F;        InternalResourceViewResolver internalResourceViewResolver&#x3D;new InternalResourceViewResolver();</span><br><span class="line">&#x2F;&#x2F;        internalResourceViewResolver.setPrefix(&quot;&#x2F;WEB-INF&#x2F;jsp&#x2F;&quot;);</span><br><span class="line">&#x2F;&#x2F;        internalResourceViewResolver.setSuffix(&quot;.jsp&quot;);</span><br><span class="line">&#x2F;&#x2F;        return internalResourceViewResolver;</span><br><span class="line">&#x2F;&#x2F;    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void addResourceHandlers(ResourceHandlerRegistry registry)&#123;</span><br><span class="line">&#x2F;&#x2F;        将本地文件路径映射为资源路径</span><br><span class="line">        registry.addResourceHandler(&quot;&#x2F;static&#x2F;**&quot;).addResourceLocations(&quot;file:E:&#x2F;ItemStatic&#x2F;static&#x2F;&quot;);</span><br><span class="line">        registry.addResourceHandler(&quot;&#x2F;upload&#x2F;**&quot;).addResourceLocations(&quot;file:E:&#x2F;ItemStatic&#x2F;upload&#x2F;&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void configureViewResolvers(ViewResolverRegistry registry)&#123;</span><br><span class="line">        InternalResourceViewResolver internalResourceViewResolver&#x3D;new InternalResourceViewResolver();</span><br><span class="line">        internalResourceViewResolver.setPrefix(&quot;&#x2F;WEB-INF&#x2F;jsp&#x2F;&quot;);</span><br><span class="line">        internalResourceViewResolver.setSuffix(&quot;.jsp&quot;);</span><br><span class="line">        registry.viewResolver(internalResourceViewResolver);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void configureDefaultServletHandling(DefaultServletHandlerConfigurer configurer)&#123;</span><br><span class="line">&#x2F;&#x2F;        不拦截静态资源</span><br><span class="line">        configurer.enable();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>@EnableWebMvc注解表示启用MVC框架的java配置,此注解必须配合@Configuration注解使用。<br>@ComponentScan注解表示开启注解扫描,相当于context:component-scan标签</p><p>WebMvcConfigurer接口是Spring5.0以后的MVC配置类，Spring5.0以前使用WebMvcConfigurerAdapter作为配置类，Spring5.0以后这个类就被废弃了。你通过实现该接口，重写接口中的默认方法，配置MVC 的一些功能，比如静态资源路径的映射，跨域等。</p><p>关于视图解析器配置有两种方式，第一种将视图解析器配置成一个bean，第二种重写configureViewResolvers方法，直接注册一个视图解析器。</p><p>第二步：配置父应用配置类</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">package com.study.Config;</span><br><span class="line"></span><br><span class="line">import org.springframework.context.annotation.ComponentScan;</span><br><span class="line">import org.springframework.context.annotation.Configuration;</span><br><span class="line">import org.springframework.context.annotation.FilterType;</span><br><span class="line">import org.springframework.web.servlet.config.annotation.EnableWebMvc;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * Created by forget on 2019&#x2F;6&#x2F;9.</span><br><span class="line"> *&#x2F;</span><br><span class="line">@Configuration</span><br><span class="line">@ComponentScan(basePackages &#x3D; &quot;com.study&quot;)</span><br><span class="line">public class RootConfig &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该类代表父应用上下文，子应用上下文可以访问父应用上下文，但父应用上下文不能访问子应用上下文。当存在多个DispatcherServlet时可以在多个DispatcherServlet的应用上下文之间共享bean，比如数据源之类的。你也可以不配置该类，只使用一个DispatcherServlet</p><p>第三步：加载配置类</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">package com.study.Config;</span><br><span class="line"></span><br><span class="line">import org.springframework.web.servlet.support.AbstractAnnotationConfigDispatcherServletInitializer;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * Created by forget on 2019&#x2F;6&#x2F;9.</span><br><span class="line"> *&#x2F;</span><br><span class="line">public class ConfigDispatcherServletInitializer extends AbstractAnnotationConfigDispatcherServletInitializer &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected Class&lt;?&gt;[] getRootConfigClasses() &#123;</span><br><span class="line">        return new Class[0];</span><br><span class="line">&#x2F;&#x2F;        return new Class[]&#123;RootConfig.class&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected Class&lt;?&gt;[] getServletConfigClasses() &#123;</span><br><span class="line">        return new Class[]&#123;SpringMVCConfig.class&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected String[] getServletMappings() &#123;</span><br><span class="line">        return new String[]&#123;&quot;&#x2F;&quot;&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该类用于代替web.xml，加载配置类。该类之所以可以不用web.xml就能完成配置类的自动加载，是因为在Servlet3.0环境下，Servlet 容器会在 classpath 下搜索实现了 javax.servlet .ServletContainerInitializer 接口，而Spring实现了这个接口，AbstractAnnotationConfigDispatcherServletInitializer类正是间接实现了这个接口，所以在Servlet3.0容器中，就可以通过继承该类来加载配置文件了。</p><p>getRootConfigClasses方法用于加载父应用配置类，当只有一个子应用上下文（即只有一个DispatcherServlet）时可以不配置。</p><p>getServletConfigClasses方法用于加载DispatcherServlet的配置文件，每个DispatcherServlet都有自己单独的配置类。</p><p>getServletMappings方法用于配置DispatcherServlet的映射路径。</p><p>到此为止java的配置就已经全部完成了，接下来测试一下配置结果，还是原来那个控制器和视图。</p><p>第四步：测试结果</p><p><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20190609161453514.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM0NzcyNTY4,size_16,color_FFFFFF,t_70"  alt="在这里插入图片描述"></p><h3 id="五-nbsp-nbsp-配置拦截器"><a href="#五-nbsp-nbsp-配置拦截器" class="headerlink" title="五&nbsp;&nbsp;配置拦截器"></a>五&nbsp;&nbsp;配置拦截器</h3><h5 id="1-xml配置拦截器"><a href="#1-xml配置拦截器" class="headerlink" title="1.xml配置拦截器"></a>1.xml配置拦截器</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;mvc:interceptors&gt;</span><br><span class="line"> &lt;bean id&#x3D;&quot;myIntersrc&quot; class&#x3D;&quot;com.study.Interceptors.MyInterceptorsrc&quot;&gt;&lt;&#x2F;bean&gt;</span><br><span class="line">    &lt;mvc:interceptor&gt;</span><br><span class="line">        &lt;mvc:mapping path&#x3D;&quot;&#x2F;&quot;&#x2F;&gt;</span><br><span class="line">        &lt;bean id&#x3D;&quot;myInter&quot; class&#x3D;&quot;com.study.Interceptors.MyInterceptor&quot;&gt;&lt;&#x2F;bean&gt;</span><br><span class="line">    &lt;&#x2F;mvc:interceptor&gt;</span><br><span class="line">    &lt;mvc:interceptor&gt;</span><br><span class="line">        &lt;mvc:mapping path&#x3D;&quot;&#x2F;&quot;&#x2F;&gt;</span><br><span class="line">        &lt;bean id&#x3D;&quot;Int&quot; class&#x3D;&quot;com.study.Interceptors.ExtendInterceptor&quot;&gt;&lt;&#x2F;bean&gt;</span><br><span class="line">    &lt;&#x2F;mvc:interceptor&gt;</span><br><span class="line">&lt;&#x2F;mvc:interceptors&gt;</span><br></pre></td></tr></table></figure><p>mvc:interceptor标签代表一个拦截器，mvc:mapping标签代表拦截器拦截的请求url，bean标签在这里代表拦截器。你也可以直接在mvc:interceptors标签下定义拦截器的bean，这样该拦截器会拦截所有请求。<br><br></p><h4 id="2-java配置拦截器"><a href="#2-java配置拦截器" class="headerlink" title="2.java配置拦截器"></a>2.java配置拦截器</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">    @Override</span><br><span class="line">    public void addInterceptors(InterceptorRegistry registry)&#123;</span><br><span class="line">&#x2F;&#x2F;        注册拦截器</span><br><span class="line">          registry.addInterceptor(new MyInterceptor()).addPathPatterns(&quot;&#x2F;&quot;);</span><br><span class="line">          registry.addInterceptor(new ExtendInterceptor());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>addInterceptors方法是WebMvcConfigurer接口的默认方法，你需要实现这个接口，然后重写方法，通过addInterceptor方法注册拦截器，再通过返回值调用addPathPatterns方法，设置拦截的请求URL，如果设置则会拦截所有请求。</p><p><strong>PS</strong>:拦截器会将静态资源也一起拦截的，即使你使用了已经配置了不拦截静态资源。所以你应该使用mvc:exclude-mapping标签或excludePathPatterns方法将静态资源的路径排除。<br><br><br>在上面的配置中，MyInterceptor是HandlerInterceptor接口的实现类，ExtendInterceptor是抽象类HandlerInterceptorAdapter的子类，间接的实现了HandlerInterceptor接口。在SpringMVC中要定义拦截器必须实现这个接口。</p><p>HandlerInterceptor接口中有三个方法，方法参数中的handler是下一个拦截器</p><ol><li><p>preHandle方法：在控制器方法调用前执行，通过返回值控制是否放行到下一个方法。</p></li><li><p>postHandle方法：在控制器方法调用后执行。</p></li><li><p>afterCompletion方法：在视图渲染完成后调用。</p></li></ol><p>当存在多个拦截器时，执行顺序如下</p><ul><li><p>拦截器1执行前方法   </p></li><li><p>拦截器2执行前方法   </p></li><li><p>拦截器2执行后方法 </p><ul><li><p>拦截器1执行后方法 </p></li><li><p>拦截器1页面渲染后方法</p></li><li><p>拦截器2页面渲染后方法</p></li></ul></li></ul><p>拦截器的执行顺序就是拦截器的定义顺序</p><h3 id="六-nbsp-nbsp-异常处理"><a href="#六-nbsp-nbsp-异常处理" class="headerlink" title="六&nbsp;&nbsp;异常处理"></a>六&nbsp;&nbsp;异常处理</h3><p>SpringMVC有三种统一处理异常的方式。</p><p><strong>第一种</strong><br>使用@ExceptionHandler注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ExceptionHandler</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ModelAndView <span class="title">Error</span><span class="params">(Exception e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ModelAndView modelAndView=<span class="keyword">new</span> ModelAndView();</span><br><span class="line">    modelAndView.setViewName(<span class="string">"error"</span>);</span><br><span class="line">    modelAndView.addObject(<span class="string">"errMsg"</span>,e.getMessage());</span><br><span class="line">    <span class="keyword">return</span> modelAndView;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>@ExceptionHandler注解可以指定方法处理的异常类，如果未指定，则默认为方法的参数类型。你可以选择返回视图，也可以选择配合@ResponseBody注解返回json数据。这种方式是局部的，只能处理该方法所在的Controller类出现的异常。</p><p><strong>第二种</strong><br>从Spring3.2开始就有@ControllerAdvice注解，该注解用于控制器增强，它作用于所有被@RequestMapping，@GetMapping等映射注解过的方法 ，因此可以用做全局异常处理，全局数据处理等。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Excepy</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExceptionHandler</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">Error</span><span class="params">(Exception e)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        ModelAndView modelAndView=<span class="keyword">new</span> ModelAndView();</span><br><span class="line">        modelAndView.setViewName(<span class="string">"error"</span>);</span><br><span class="line">        modelAndView.addObject(<span class="string">"errMsg"</span>,e.getMessage());</span><br><span class="line">        <span class="keyword">return</span> modelAndView;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>PS</strong>:该类必须被Spring扫描到，才能处理全局异常。</p><p><strong>第三种</strong><br>实现HandlerExceptionResolver接口，这个接口用于请求过程中产生的异常。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Order</span>(-<span class="number">1000</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Excepy</span> <span class="keyword">implements</span> <span class="title">HandlerExceptionResolver</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">resolveException</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o, Exception e)</span> </span>&#123;</span><br><span class="line">        ModelAndView modelAndView=<span class="keyword">new</span> ModelAndView();</span><br><span class="line">        modelAndView.setViewName(<span class="string">"error"</span>);</span><br><span class="line">        modelAndView.addObject(<span class="string">"errMsg"</span>,e.getMessage());</span><br><span class="line">        <span class="keyword">return</span> modelAndView;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>@Order(-1000)注解是为了提高该异常处理器的优先级别，防止异常被Spring的异常处理器捕获。该异常处理器必须被Spring容器管理才能处理异常。</p><h3 id="七-nbsp-nbsp-转发和重定向"><a href="#七-nbsp-nbsp-转发和重定向" class="headerlink" title="七&nbsp;&nbsp;转发和重定向"></a>七&nbsp;&nbsp;转发和重定向</h3><p>SpringMVC中想进行转发和重定向操作可以参考以下代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/red"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">test01</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"redirect:/index"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"for"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">test00</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"forward:index"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"redMode"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> ModelAndView <span class="title">test03</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ModelAndView modelAndView=<span class="keyword">new</span> ModelAndView();</span><br><span class="line">    modelAndView.setViewName(<span class="string">"redirect:/index"</span>);</span><br><span class="line">    <span class="keyword">return</span> modelAndView;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"forMode"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> ModelAndView <span class="title">test04</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ModelAndView modelAndView=<span class="keyword">new</span> ModelAndView();</span><br><span class="line">    modelAndView.setViewName(<span class="string">"forward:/index"</span>);</span><br><span class="line">    <span class="keyword">return</span> modelAndView;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="带参数的重定向"><a href="#带参数的重定向" class="headerlink" title="带参数的重定向"></a>带参数的重定向</h5><p>SpringMVC3.1版本之后出来了RedirectAttribute功能，专门用于重定向之后还能带参数跳转的.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"redMode"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> ModelAndView <span class="title">test03</span><span class="params">(RedirectAttributes redirectAttributes)</span></span>&#123;</span><br><span class="line">    ModelAndView modelAndView=<span class="keyword">new</span> ModelAndView();</span><br><span class="line">    modelAndView.setViewName(<span class="string">"redirect:/hello"</span>);</span><br><span class="line">    redirectAttributes.addAttribute(<span class="string">"key"</span>,<span class="string">"231321"</span>);</span><br><span class="line">    redirectAttributes.addFlashAttribute(<span class="string">"key2"</span>,<span class="string">"543231"</span>);</span><br><span class="line">    <span class="keyword">return</span> modelAndView;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>1、使用  RedirectAttributes 的 addAttribute（）方法设置参数，则参数将直接拼接在转发url后面，然后可以在通过request.getParameter(“userName”)) 和 直接通过spring mvc配置参数映射接收到参数<br>2、使用 RedirectAttributes  的 addFlashAttribute（）方法设置参数，则参数不会出现在转发url中，然后可以通过modelMap 取出参数</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;SpringMVC框架基本使用指南&quot;&gt;&lt;a href=&quot;#SpringMVC框架基本使用指南&quot; class=&quot;headerlink&quot; title=&quot;SpringMVC框架基本使用指南&quot;&gt;&lt;/a&gt;SpringMVC框架基本使用指南&lt;/h1&gt;&lt;h3 id=&quot;一-nbs
      
    
    </summary>
    
    
    
      <category term="SpringMVC" scheme="https://hkj141421.github.io/tags/SpringMVC/"/>
    
  </entry>
  
  <entry>
    <title>Spring框架使用指南（一）基本篇</title>
    <link href="https://hkj141421.github.io/2020/04/21/Spring%E6%A1%86%E6%9E%B6%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97%EF%BC%88%E4%B8%80%EF%BC%89%E5%9F%BA%E6%9C%AC%E7%AF%87/"/>
    <id>https://hkj141421.github.io/2020/04/21/Spring%E6%A1%86%E6%9E%B6%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97%EF%BC%88%E4%B8%80%EF%BC%89%E5%9F%BA%E6%9C%AC%E7%AF%87/</id>
    <published>2020-04-21T12:43:57.000Z</published>
    <updated>2020-04-21T14:02:02.331Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring框架搭建指南（一）基本篇"><a href="#Spring框架搭建指南（一）基本篇" class="headerlink" title="Spring框架搭建指南（一）基本篇"></a>Spring框架搭建指南（一）基本篇</h1><h2 id="前言：整理一下Spring框架的基本使用"><a href="#前言：整理一下Spring框架的基本使用" class="headerlink" title="前言：整理一下Spring框架的基本使用"></a>前言：整理一下Spring框架的基本使用</h2><h3 id="1-Spring框架有两大最核心的功能：IOC-控制反转-依赖注入-AOP-面向切面-。"><a href="#1-Spring框架有两大最核心的功能：IOC-控制反转-依赖注入-AOP-面向切面-。" class="headerlink" title="1.Spring框架有两大最核心的功能：IOC(控制反转/依赖注入),AOP(面向切面)。"></a>1.Spring框架有两大最核心的功能：IOC(控制反转/依赖注入),AOP(面向切面)。</h3><h4 id="1-1-控制反转"><a href="#1-1-控制反转" class="headerlink" title="1.1  控制反转"></a>1.1  控制反转</h4><p>所谓控制反转，就是将创建对象的权利交给Spring容器管理，也就是说你不需要再去new一个对象，这个事情Spring会帮你做好，你只需要告诉容器你需要什么对象就OK    了。<br>那么，为什么只是这样的一项功能会被认为是Spirng最重要的功能之一呢，我们自己难道不能去new一个对象吗？我们当然可以选择自己new一个对象，但是这样就会增强组件之间的耦合度，使我们后期的优化维护变得很麻烦，需要改动很多代码。<br>例如：有一个电视剧需要一个男主角,而这个男主角就由霍建华饰演。我们用java就可以这样表现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">actor</span></span>&#123;</span><br><span class="line">play(String dialogue)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">huojianhua</span> <span class="keyword">implements</span> <span class="title">actor</span></span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line">play(String dialogue)&#123;</span><br><span class="line">System.out.println(dialogue);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TVplay</span></span>&#123;</span><br><span class="line"><span class="keyword">public</span> actor a;</span><br><span class="line"><span class="keyword">public</span> String dialogue=<span class="string">"水善利万物而不争，处众人之所恶，故几于道。师傅，善人者，不善人之师，不善人者，善人之资，请掌门允许弟子，成为景兄弟的手下。"</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">play</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.a=<span class="keyword">new</span> huojianhua();</span><br><span class="line"><span class="keyword">this</span>.a.play()</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时我们可以看到上面的代码中，我们自己new了一个huojianhua对象来充当主角。那么如果想更换演员的话，我就得重新new实现了actor接口的对象，并把它放到play方法中。如果只有这一个接口是这样还可这样解决。但是如果有很多个接口都是类似的问题，那一个个去换就很麻烦了。这时候Spring的IOC作用就体现出来了，将所有的对象都交给Spring管理，我只需要告诉Spring我需要一个actor对象就行了，不管他是霍建华还是胡歌。</p><h4 id="1-2-面向切面"><a href="#1-2-面向切面" class="headerlink" title="1.2 面向切面"></a>1.2 面向切面</h4><p>所谓面向切面就是对某些业务方法进行方法增强，而不改动业务方法中的代码。打个比方，我有一个播放音乐的方法，现在需要统计一下音乐的播放次数。如果我们直接去修改方法中的代码，那当其他方法也需要进行统计的话，我们又要重复添加代码。所以这时候我们就可以面向切面编程。将这些代码抽离出来做成一个方法，然后切入到需要统计的业务方法中。</p><p>下面介绍一下AOP的一些概念<br>(1) 通知(Advice)：就是你想要实现的功能，在上面的例子中，通知就是用来统计播放次数的方法，其他的类似日志，安全之类的功能也可以使用通知去实现。<br>(2) 连接点(JoinPoint)：就是通知具体在什么时候执行，你可以选择在目标方法开始前执行，方法结束后执行，发生异常时执行等等<br>(3)  切入点（Pointcut）:切入点就是你想要将通知织入到哪些方法上，织入在方法前还是再方法后等等。<br>(4) 切面(Aspect)：切面就是切入点和通知的结合，通知说明了要干什么事，切入点说明了要将通知切入到哪些地方</p><h3 id="2-引入Maven依赖包"><a href="#2-引入Maven依赖包" class="headerlink" title="2. 引入Maven依赖包"></a>2. 引入Maven依赖包</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-core&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;5.1.7.RELEASE&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-aop&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;5.1.7.RELEASE&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-beans&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;5.1.7.RELEASE&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br><span class="line"> &lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-context&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;5.1.7.RELEASE&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-web&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;5.1.7.RELEASE&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br><span class="line">            &lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;commons-logging&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;commons-logging&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.2&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;log4j&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;log4j&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.2.17&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><h3 id="3-IOC容器管理"><a href="#3-IOC容器管理" class="headerlink" title="3.IOC容器管理"></a>3.IOC容器管理</h3><p>  要让Spring容器管理所有的对象，必须要先将需要管理的bean加入到容器中，这样才能从容器中获得你想要的对象，Spring框架提供了XML和java两种配置方法，首先我们来看看怎么使用xml文件注册bean到容器中。</p><h4 id="xml管理容器"><a href="#xml管理容器" class="headerlink" title="xml管理容器"></a>xml管理容器</h4>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">  &lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&quot;</span><br><span class="line">       xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;</span><br><span class="line">       xmlns:context&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context&quot;</span><br><span class="line">       xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans</span><br><span class="line">        http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&#x2F;spring-beans.xsd http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context https:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context&#x2F;spring-context.xsd&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;beans&gt;</span><br></pre></td></tr></table></figure><p>  上面的代码是Spring配置文件的基本结构，读者可以先复制代码到一个xml中。取名时注意规范，以便日后维护。<br> Spring注册bean到容器中有三种方式，使用bean标签注册，基于注解方式注册，java方式注册。我们通常用的都是第二种方式，因为这种方式方便快捷。下面先介绍前两种注册bean的方法</p><h5 id="使用bean标签注册"><a href="#使用bean标签注册" class="headerlink" title="使用bean标签注册"></a>使用bean标签注册</h5> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">   &lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&quot;</span><br><span class="line">       xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;</span><br><span class="line">       xmlns:context&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context&quot;</span><br><span class="line">       xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans</span><br><span class="line">        http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&#x2F;spring-beans.xsd http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context https:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context&#x2F;spring-context.xsd&quot;&gt;</span><br><span class="line">        </span><br><span class="line">    &lt;bean id&#x3D;&quot;Music&quot; class&#x3D;&quot;FrameWork.bean.Music&quot;&gt;&lt;&#x2F;bean&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;bean id&#x3D;&quot;UserService&quot; class&#x3D;&quot;FrameWork.ServiceImpl.UserServiceImpl&quot;&gt;</span><br><span class="line">        &lt;constructor-arg name&#x3D;&quot;user&quot; ref&#x3D;&quot;User&quot; type&#x3D;&quot;FrameWork.bean.User&quot;&gt;&lt;&#x2F;constructor-arg&gt;</span><br><span class="line">    &lt;&#x2F;bean&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;bean id&#x3D;&quot;MusicService&quot; class&#x3D;&quot;FrameWork.ServiceImpl.MusicServiceImpl&quot;&gt;</span><br><span class="line">        &lt;property name&#x3D;&quot;music&quot; ref&#x3D;&quot;Music&quot;&gt;&lt;&#x2F;property&gt;</span><br><span class="line">    &lt;&#x2F;bean&gt;</span><br><span class="line">    </span><br><span class="line">&lt;&#x2F;beans&gt;</span><br></pre></td></tr></table></figure><p> bean标签是专门用于注册bean到Spring容器中的。在上面的代码中bean标签内还有property ，constructor-arg</p><p> <strong>id属性</strong>代表bean在容器中的唯一标识。</p><p> <strong>class属性</strong>指定了bean的全类名。</p><p> <strong>name属性</strong>是bean的名称标识也不能重复，在注入时会用到此属性。</p><p> <strong>factory-method属性</strong>用于指定生产bean的静态工厂方法。使用此属性的bean，容器会调用该此方法获取一个bean返回给用户。</p><p> <strong>factory-bean属性</strong>用于指定生产对象要使用的工厂类，它的值是一个bean的引用id，必须配合factory-method属性一起使用，使用该属性不需要指定class属性。</p><p> <strong>init-method和destory-method属性</strong>代表初始化，销毁bean时调用的方法。</p><p> <strong>scope属性</strong>代表bean的作用域，总共有四个值，singleton代表单例，整个IOC容器只会创建一次，以后每次获取该对象是都是同一个，prototype代表每次获取都会创建新的对象，request代表每次HTTP请求将会生成各自的bean实例，session代表每次会话请求对应一个bean实例。</p><h5 id="基于注解方式注册"><a href="#基于注解方式注册" class="headerlink" title="基于注解方式注册"></a>基于注解方式注册</h5> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">   &lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&quot;</span><br><span class="line">       xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;</span><br><span class="line">       xmlns:context&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context&quot;</span><br><span class="line">       xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans</span><br><span class="line">        http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&#x2F;spring-beans.xsd http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context https:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context&#x2F;spring-context.xsd&quot;&gt;</span><br><span class="line"> &#x2F;&#x2F;开启注解扫描</span><br><span class="line">&lt;context:component-scan base-package&#x3D;&quot;FrameWork.ServiceImpl&quot;&gt;&lt;&#x2F;context:component-scan&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;beans&gt;</span><br></pre></td></tr></table></figure> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"> @Service</span><br><span class="line">public class MusicServiceImpl implements MusicService &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private Music music;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void setMusic(Music music) &#123;</span><br><span class="line">            this.music&#x3D;music;</span><br><span class="line">        System.out.println(&quot;设置音乐信息&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public Music getMusic(Music music) &#123;</span><br><span class="line">            return this.music;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void listenMusic(Music music) &#123;</span><br><span class="line">        System.out.println(&quot;正在收听音乐&quot;+music);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> component-scan标签代表组件扫描，base-package属性指定要扫描的包路径，这个标签会查找base-package属性路径下所有被构造型（stereotype）注解所标注的类，比如@Component,@Repository,@Service,@Controller。</p><p>bean加入容器后，我们可以通过以下方式从容器中获取实例。<br>方式1：手动加载</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ApplicationContext applicationContext=<span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"config/Spring_Config.xml"</span>);</span><br><span class="line">applicationContext.getBean(MusicService<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">musicService=(MusicServiceImpl)applicationContext.getBean(MusicService<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">musicService.listenMusic(<span class="keyword">new</span> Music());</span><br></pre></td></tr></table></figure><p>方式2：web.xml<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"> &lt;!DOCTYPE web-app PUBLIC</span><br><span class="line">        &quot;-&#x2F;&#x2F;Sun Microsystems, Inc.&#x2F;&#x2F;DTD Web Application 2.3&#x2F;&#x2F;EN&quot;</span><br><span class="line">        &quot;http:&#x2F;&#x2F;java.sun.com&#x2F;dtd&#x2F;web-app_2_3.dtd&quot; &gt;</span><br><span class="line"></span><br><span class="line">&lt;web-app&gt;</span><br><span class="line">    &lt;display-name&gt;Archetype Created Web Application&lt;&#x2F;display-name&gt;</span><br><span class="line"></span><br><span class="line">    &lt;context-param&gt;</span><br><span class="line">        &lt;param-name&gt;contextConfigLocation&lt;&#x2F;param-name&gt;</span><br><span class="line">        &lt;param-value&gt;classpath:config&#x2F;Spring_Config.xml&lt;&#x2F;param-value&gt;</span><br><span class="line">    &lt;&#x2F;context-param&gt;</span><br><span class="line"></span><br><span class="line">    &lt;listener&gt;</span><br><span class="line">        &lt;listener-class&gt;org.springframework.web.context.ContextLoaderListener&lt;&#x2F;listener-class&gt;</span><br><span class="line">    &lt;&#x2F;listener&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;web-app&gt;</span><br></pre></td></tr></table></figure><br> web应用可用方式二加载配置文件，ContextLoaderListener类实现了Servlet API 中的ServletContextListener 接口。这个接口可以监听servletContext的生命周期，实际也相当于监听了web应用的生命周期，web应用的启动和终止都会触发ServletContextEvent 事件，这个事件是由ServletContextListener 接口处理的，所以ContextLoaderListener就可以在web应用启动时自动帮你加载配置文件。<br> 要获取bean时，只需要给要注入实例的成员，添加@Autowire之类的注入类注解即可使用。<br> <strong>PS</strong>:注意使用xml配置Spring，要用@Autowire必须在容器注册下面这个bean<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean class&#x3D;&quot;org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor&quot;&#x2F;&gt;</span><br></pre></td></tr></table></figure><br> 使用java配置的不需要注册这个bean，原因不明，怀疑是java配置在加载配置文件时使用了AnnotationConfigWebApplicationContext类的原因。</p><p> 若要获取applicationcontext可以加入下面这行代码：<br> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">WebApplicationContext webApplicationContext=WebApplicationContextUtils.getWebApplicationContext(<span class="keyword">this</span>.getServletContext());</span><br><span class="line">`</span><br></pre></td></tr></table></figure><br> WebApplicationContext 继承了applicationcontext类，所以你直接调用getBean方法获取你想要的对象。</p><h3 id="java管理容器"><a href="#java管理容器" class="headerlink" title="java管理容器"></a>java管理容器</h3><p>自从Spring3.0以后就可以使用java配置Spring框架。使用java配置步骤如下：<br>1.注册bean到Spring容器<br>创建一个配置类，命名应注意规范，方便理解。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan</span>(<span class="string">"FrameWork"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Music <span class="title">music</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Music();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">user</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"实例化User对象"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> User();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserService <span class="title">userService</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> UserServiceImpl();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MusicService <span class="title">musicService</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MusicServiceImpl();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>@Configuration注解</strong>说明SpringConfig 类是一个配置类，这是一个bean定义的资源文件相当于beans标签，容器可以从这个类中获取对象。被注解的类也会被注册为一个bean。<br><strong>@Bean注解</strong> 说明方法可以向Spring容器提供一个对象相当于bean标签，它向容器中定义了一个bean，bean的名称就是方法名。容器调用该方法获取对象，你可以方法内添加一些初始化操作。<br><strong>@ComponentScan注解</strong>说明了Spring需要扫描哪些路径相当于context:component-scan标签。</p><p>2.从容器中获取bean<br>java配置的容器，获取方式与xml配置的类似，只是更换了ApplicationContext的实现类。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public static void main( String[] args )</span><br><span class="line">&#123;</span><br><span class="line">    ApplicationContext applicationContext&#x3D;new AnnotationConfigApplicationContext(SpringConfig.class);</span><br><span class="line">    User user&#x3D;(User) applicationContext.getAutowireCapableBeanFactory().getBean(User.class);</span><br><span class="line">    System.out.println(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>AnnotationConfigApplicationContext类用于加载java的配置类。你可以在构造方法中传入配置类，使用空的构造方法，然后调用scan方法扫描包，接着调用refresh方法将被扫描到的类注册到容器中。</p><p>对于web应用，可以在web.xml中做如下配置，使web应用启动时自动加载配置。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE web-app PUBLIC</span><br><span class="line">        &quot;-&#x2F;&#x2F;Sun Microsystems, Inc.&#x2F;&#x2F;DTD Web Application 2.3&#x2F;&#x2F;EN&quot;</span><br><span class="line">        &quot;http:&#x2F;&#x2F;java.sun.com&#x2F;dtd&#x2F;web-app_2_3.dtd&quot; &gt;</span><br><span class="line"></span><br><span class="line">&lt;web-app&gt;</span><br><span class="line">    &lt;display-name&gt;Archetype Created Web Application&lt;&#x2F;display-name&gt;</span><br><span class="line"></span><br><span class="line">    &lt;context-param&gt;</span><br><span class="line">        &lt;param-name&gt;contextClass&lt;&#x2F;param-name&gt;</span><br><span class="line">        &lt;param-value&gt;org.springframework.web.context.support.AnnotationConfigWebApplicationContext&lt;&#x2F;param-value&gt;</span><br><span class="line">    &lt;&#x2F;context-param&gt;</span><br><span class="line"></span><br><span class="line">    &lt;context-param&gt;</span><br><span class="line">        &lt;param-name&gt;contextConfigLocation&lt;&#x2F;param-name&gt;</span><br><span class="line">        &lt;param-value&gt;FrameWork.SpringConfig&lt;&#x2F;param-value&gt;</span><br><span class="line">    &lt;&#x2F;context-param&gt;</span><br><span class="line"></span><br><span class="line">    &lt;listener&gt;</span><br><span class="line">        &lt;listener-class&gt;org.springframework.web.context.ContextLoaderListener&lt;&#x2F;listener-class&gt;</span><br><span class="line">    &lt;&#x2F;listener&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;web-app&gt;</span><br></pre></td></tr></table></figure><p>以上就是Spring容器的基本配置，更多详细配置请参考<br> 在实际的应用开发中，你会发现在servlet中使用@Autowire之类注解自动注入实例时，会出现空指针异常。下面是发生异常的原因：</p><p> <strong>此处内容引用自 MasterT-J的文章</strong><br> (1) tomcat启动后先加载web.xml文件。web.xml主要配置了servlet 、filter、listenner三种javaEE规范的类，加载顺序跟在web.xml文档中的位置无关。顺序为 listenner&gt;filter&gt;servlet 。</p><p>(2) 而spring的初始化类为org.springframework.web.context.ContextLoaderListener，就是一个listenner，它是先于servlet加载的。普通servlet和springmvc的入口servlet的加载顺序，就要看servlet的设置了。它们按照在Web.xml中定义的Servlet顺序加载。其中springmvc需要指定org.springframework.web.servlet.DispatcherServlet拦截所有的Web请求。</p><p>(3) 在 servletA类上加@WebServlet等注解时，spring或springmvc会扫面相关包，自动实例化一个servlet实例A；这个实例A的引用是spring IOC容器管理的。这个时候Spring ContextLoaderListener监听器首先初始化，扫描所有的java包，创建Bean对象。然后Tomcat容器在加载Servlet类，包括我们定义的Servlet以及Spring的DispatcherServlet。<br>Tomcat容器接下来会在web.xml配置加载Servlet类，这个时候加载DispatcherServle以及我们定义的Servlet类。这是tomcat容器会根据servler配置启动时或者第一次请求该url时实例化我们定义的Web servlet实例B.这个实例B的引用是tomcat容器管理的。</p><h3 id="所以最终结果就是：拦截url的servlet和spring依赖注入的servlet不是同一个实例！！拦截url的servlet不受Spring容器的管理，所以就出现了不能依赖注入或者注解不起作用的现象。"><a href="#所以最终结果就是：拦截url的servlet和spring依赖注入的servlet不是同一个实例！！拦截url的servlet不受Spring容器的管理，所以就出现了不能依赖注入或者注解不起作用的现象。" class="headerlink" title="所以最终结果就是：拦截url的servlet和spring依赖注入的servlet不是同一个实例！！拦截url的servlet不受Spring容器的管理，所以就出现了不能依赖注入或者注解不起作用的现象。"></a>所以最终结果就是：拦截url的servlet和spring依赖注入的servlet不是同一个实例！！拦截url的servlet不受Spring容器的管理，所以就出现了不能依赖注入或者注解不起作用的现象。</h3><p>原文：<a href="https://blog.csdn.net/qq_21125183/article/details/86242910" target="_blank" rel="noopener">https://blog.csdn.net/qq_21125183/article/details/86242910</a> </p><p>出现这样的问题时你就需要手动从容器中获取实例了，我们可以用下面这种方法去解决问题。重写servlet的init方法，并在方法中执行以下代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SpringBeanAutowiringSupport.processInjectionBasedOnServletContext(<span class="keyword">this</span>,<span class="keyword">this</span>.getServletContext());</span><br></pre></td></tr></table></figure><p>这段代码会将本类中所有被自动注入注解过的成员注入实例。<br>我们可以写一个servlet基类，重写init方法，将这段代码放入init方法中，之后的servlet只需要继承该基类即可。</p><h3 id="4-AOP编程"><a href="#4-AOP编程" class="headerlink" title="4.AOP编程"></a>4.AOP编程</h3><p>AOP其实是一种编程思想，它的目的在于减少代码的重复性，降低耦合度。在Spring中对AOP的实现采用了两种方式，<br><strong>第一种是jdk动态代理</strong>，通过实现和目标类B相同的接口生成类A，从而骗过java的类型检查。类A持有目标类B的对象引用，因此可以在调用类B方法的前后做一下事情，类A本身并不能做类B的事情，只是由于类A持有类B的引用所以达到了代理的效果，因此可以代理任何实现了接口的类。Spring默认使用这种方式。<br><strong>第二种是CGLIB代理</strong>，通过继承目标类B生成类A，也可以骗过java的类型检查。和jdk代理不一样，CGLIB生成的类A是继承目标类B而来的，因此这个类A可以代理类B所有非final的事情(final方法不能被重写)，通过重写方法，类A可以再调用父类方法的前后做一些别的事情，因此CGLIB可以代理所有没有final修饰的类。也因此在Spring中，如果一个业务对象并没有实现任何接口，默认就会使用CGLIB。</p><p>首先导入jar包，由于Spring采用了AspectJ的方式实现AOP，所以我们需要导入这个包</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.aspectj&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;aspectjweaver&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.9.2&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br><span class="line"> &lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-aop&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;5.1.7.RELEASE&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><p> PS：不知道为什么我测试时，idea没帮我把这个包打到WEB-INF/lib目录,导致一运行就包缺少类的错误。只能手动打进去了。</p><p>下面我们先看看如何使用xml配置实现AOP吧</p><h4 id="xml配置切面"><a href="#xml配置切面" class="headerlink" title="xml配置切面"></a>xml配置切面</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> FrameWork.Advice;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.EnableAspectJAutoProxy;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.ProceedingJoinPoint;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">myAdvice</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doAfter</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"后置通知"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doBefore</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"前置通知"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doAround</span><span class="params">(ProceedingJoinPoint proceedingJoinPoint)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"环绕通知开始"</span>);</span><br><span class="line">        proceedingJoinPoint.proceed();</span><br><span class="line">        System.out.println(<span class="string">"环绕通知结束"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doException</span><span class="params">(Exception e)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        System.out.println(e.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&quot;</span><br><span class="line">       xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;</span><br><span class="line">       xmlns:context&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context&quot;</span><br><span class="line">       xmlns:aop&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;aop&quot;</span><br><span class="line">       xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans</span><br><span class="line">        http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&#x2F;spring-beans.xsd</span><br><span class="line">        http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context</span><br><span class="line">        https:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context&#x2F;spring-context.xsd</span><br><span class="line">        http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;aop</span><br><span class="line">        http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;aop&#x2F;spring-aop.xsd&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--&lt;context:component-scan base-package&#x3D;&quot;FrameWork.ServiceImpl,FrameWork.bean,FrameWork.Servlets&quot;&gt;&lt;&#x2F;context:component-scan&gt;--&gt;</span><br><span class="line"></span><br><span class="line">    &lt;bean id&#x3D;&quot;User&quot; class&#x3D;&quot;FrameWork.bean.User&quot;&gt;&lt;&#x2F;bean&gt;</span><br><span class="line"></span><br><span class="line">    &lt;bean id&#x3D;&quot;Music&quot; class&#x3D;&quot;FrameWork.bean.Music&quot;&gt;&lt;&#x2F;bean&gt;</span><br><span class="line"></span><br><span class="line">    &lt;bean id&#x3D;&quot;UserService&quot; class&#x3D;&quot;FrameWork.ServiceImpl.UserServiceImpl&quot;&gt;</span><br><span class="line">    &lt;&#x2F;bean&gt;</span><br><span class="line"></span><br><span class="line">    &lt;bean id&#x3D;&quot;MusicService&quot; class&#x3D;&quot;FrameWork.ServiceImpl.MusicServiceImpl&quot;  name&#x3D;&quot;musicService&quot;&gt;</span><br><span class="line">    &lt;&#x2F;bean&gt;</span><br><span class="line"></span><br><span class="line">    &lt;bean id&#x3D;&quot;myAdvice&quot; class&#x3D;&quot;FrameWork.Advice.myAdvice&quot;&gt;&lt;&#x2F;bean&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;aop:aspectj-autoproxy&gt;&lt;&#x2F;aop:aspectj-autoproxy&gt;&lt;!--开启自动代理--&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;aop:config&gt;</span><br><span class="line">        &lt;!--配置切面，需要切入的功能为myAdvice中的方法--&gt;</span><br><span class="line">        &lt;aop:aspect ref&#x3D;&quot;myAdvice&quot;&gt;</span><br><span class="line">        &lt;!--配置切入点，expression表达式会确定要切入到哪些类的方法中--&gt;</span><br><span class="line">            &lt;aop:pointcut id&#x3D;&quot;mypointcut&quot; expression&#x3D;&quot;execution(* FrameWork.ServiceImpl.*.*())&quot;&gt;&lt;&#x2F;aop:pointcut&gt;</span><br><span class="line">             &lt;!--配置前置通知，method为调用的方法，pointcut-ref引用切入点--&gt;</span><br><span class="line">            &lt;aop:before method&#x3D;&quot;doBefore&quot; pointcut-ref&#x3D;&quot;mypointcut&quot;&gt;&lt;&#x2F;aop:before&gt;</span><br><span class="line">            &lt;aop:after method&#x3D;&quot;doAfter&quot; pointcut&#x3D;&quot;execution(* FrameWork.ServiceImpl.MusicServiceImpl.listenMusic())&quot;&gt;&lt;&#x2F;aop:after&gt;</span><br><span class="line">            &lt;aop:around method&#x3D;&quot;doAround&quot; pointcut-ref&#x3D;&quot;mypointcut&quot;&gt;&lt;&#x2F;aop:around&gt;</span><br><span class="line">            &lt;!--配置异常通知，method为调用的方法，pointcut配置切入点为MusicServiceImpl的所有方法，throwing配置异常参数--&gt;</span><br><span class="line">            &lt;aop:after-throwing method&#x3D;&quot;doException&quot; throwing&#x3D;&quot;e&quot; pointcut&#x3D;&quot;execution(* FrameWork.ServiceImpl.MusicServiceImpl.*())&quot;&gt;&lt;&#x2F;aop:after-throwing&gt;</span><br><span class="line">        &lt;&#x2F;aop:aspect&gt;</span><br><span class="line">    &lt;&#x2F;aop:config&gt;</span><br><span class="line">    &lt;!--更多切面配置--&gt;</span><br><span class="line">&lt;&#x2F;beans&gt;</span><br></pre></td></tr></table></figure><p>在上面的代码中，我们配置了myAdvice的切面，根据execution表达式将通知切入到其他方法中。需要注意的是你需要在xml文件中增加aop的命名空间及xsd约束，否则不会有代码提示。<br>另外要使用AOP功能你还需要 &lt;aop:aspectj-autoproxy&gt;这行代码，开启Spring的自动代理功能，其中proxy-target-class属性选择false为jdk代理，true为CGLIB代理，默认为false，如果属性为false，但是目标类没实现接口，Spring会自动使用CGLIB代理。</p><p><strong>PS</strong>：如果你在测试时出现了循环依赖的错误，并且你确保配置中没有循环依赖，你可以检查一下切入点是不是配置成切入所有公共方法之类的形式，这样会使Spring将自动代理切入到你所依赖的jar包中，很可能会造成循环依赖。作者测试就出现了这样的情况。</p><h4 id="java注解配置切面"><a href="#java注解配置切面" class="headerlink" title="java注解配置切面"></a>java注解配置切面</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> FrameWork.Advice;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.EnableAspectJAutoProxy;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.ProceedingJoinPoint;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by forget on 2019/6/7.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">myAdvice</span> </span>&#123;</span><br><span class="line">    <span class="meta">@After</span>(value = <span class="string">"execution(* FrameWork.ServiceImpl.*.*())"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doAfter</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"后置通知"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Before</span>(value = <span class="string">"execution(* FrameWork.ServiceImpl.*.*())"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doBefore</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"前置通知"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Around</span>(value = <span class="string">"execution(* FrameWork.ServiceImpl.*.*())"</span>)</span><br><span class="line">         <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doAround</span><span class="params">(ProceedingJoinPoint proceedingJoinPoint)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"环绕通知开始"</span>);</span><br><span class="line">        proceedingJoinPoint.proceed();</span><br><span class="line">        System.out.println(<span class="string">"环绕通知结束"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@AfterThrowing</span>(throwing = <span class="string">"e"</span>,pointcut = <span class="string">"execution(* FrameWork.ServiceImpl.*.*())"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doException</span><span class="params">(Exception e)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        System.out.println(e.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> FrameWork;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> FrameWork.Advice.myAdvice;</span><br><span class="line"><span class="keyword">import</span> FrameWork.Service.MusicService;</span><br><span class="line"><span class="keyword">import</span> FrameWork.Service.UserService;</span><br><span class="line"><span class="keyword">import</span> FrameWork.ServiceImpl.MusicServiceImpl;</span><br><span class="line"><span class="keyword">import</span> FrameWork.ServiceImpl.UserServiceImpl;</span><br><span class="line"><span class="keyword">import</span> FrameWork.bean.Music;</span><br><span class="line"><span class="keyword">import</span> FrameWork.bean.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.context.ConfigurableWebApplicationContext;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableAspectJAutoProxy</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Music <span class="title">music</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Music();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">user</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> User();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserService <span class="title">userService</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> UserServiceImpl();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MusicService <span class="title">musicService</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MusicServiceImpl();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> myAdvice <span class="title">myAdvice</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> myAdvice();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>@EnableAspectJAutoProxy注解</strong>就相当于aop:aspectj-autoproxy标签，同样有个proxyTargetClass属性可以选择代理。</p><p><strong>@Aspect注解</strong>代表这是一个切面配置类相当于aop:aspect标签</p><p> <strong>@After，@Before，@Around，@AfterThrowing注解</strong>代表通知的连接点，注解内的value属性通知的切入点。</p><p>从这些代码可以发现Spring对AOP的支持是非常强大，你只需几个注解就可以完成一个切面的配置。</p><p><strong>PS</strong>:注意使用环绕通知时必须在方法中调用ProceedingJoinPoint对象的proceed方法，否则将不会调用被代理对象的目标方法。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Spring框架搭建指南（一）基本篇&quot;&gt;&lt;a href=&quot;#Spring框架搭建指南（一）基本篇&quot; class=&quot;headerlink&quot; title=&quot;Spring框架搭建指南（一）基本篇&quot;&gt;&lt;/a&gt;Spring框架搭建指南（一）基本篇&lt;/h1&gt;&lt;h2 id=&quot;前
      
    
    </summary>
    
    
    
      <category term="Spring" scheme="https://hkj141421.github.io/tags/Spring/"/>
    
  </entry>
  
</feed>
